{"version":3,"sources":["webpack:///./actions/sendMessage.js","webpack:///./app.js","webpack:///./lib/gql.js","webpack:///./lib/hasuraAuthMiddleware.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;AACM;AACF;;;AAG5B,yBAAyB,gDAAG;AAC5B;AACA;AACA;AACA,KAAK,EAAE;AACP;AACA;;;AAGA;AACA,gCAAgC,iDAAK;AACrC;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,4CAAG;AACH,SAAS,KAAK;;AAEd;;AAEA,SAAS,aAAa,oCAAoC,KAAK;;AAE/D;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;;;AC3CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACW;AACJ;AACyB;;AAE7D;AACA,YAAY,8CAAO;;AAEnB,QAAQ,oDAAY;AACpB,QAAQ,kDAAU;AAClB;;;AAGA;AACA;AACA,wDAAwD,OAAO;AAC/D,CAAC;;;AAGc,kEAAG;;;;;;;;;;;;;;ACnBlB;AAAA;AAAe;AACf;AACA;;;;;;;;;;;;;ACFA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA","file":"0.index.js","sourcesContent":["import app from \"../app\"\r\nimport fetch from \"node-fetch\"\r\nimport gql from \"../lib/gql\"\r\n\r\n\r\nconst HASURA_OPERATION = gql`\r\n  mutation sendMessage ($text: String) {\r\n    insert_message_one(object: {\r\n      text: $text\r\n    }){ id }\r\n  }\r\n`\r\n\r\n\r\nconst execute = async (query, variables) => {\r\n  const fetchedResponse = await fetch(\r\n    \"http://hasura:8080/v1/graphql\",\r\n    {\r\n      method: 'POST',\r\n      body: JSON.stringify({query, variables})\r\n    }\r\n  );\r\n\r\n  const data = await fetchedResponse.json();\r\n  console.log('DEBUG: ', data);\r\n  return data;\r\n};\r\n\r\n\r\napp.post('/sendMessage', async (req, res) => {\r\n  const {text} = req.body.input;\r\n\r\n  // run some business logic\r\n\r\n  const {data, errors} = await execute(HASURA_OPERATION, {text});\r\n\r\n  if (errors) {\r\n    return res.status(400).json(errors[0])\r\n  }\r\n\r\n  return res.json({\r\n    ...data['insert_message_one']\r\n  })\r\n})\r\n\r\n","import express from 'express'\r\nimport cookieParser from 'cookie-parser'\r\nimport bodyParser from 'body-parser'\r\nimport hasuraAuthMiddleware from './lib/hasuraAuthMiddleware'\r\n\r\nconst PORT = process.env.PORT\r\nconst app = express()\r\n\r\napp.use(cookieParser())\r\napp.use(bodyParser.json())\r\n// app.use()\r\n\r\n\r\napp.listen(PORT, (error) => {\r\n  if (error) return console.error(error)\r\n  console.log(`Api server started on http://localhost:${ PORT }`)\r\n})\r\n\r\n\r\nexport default app\r\n\r\n","export default function gql([code]) {\r\n  return code\r\n}\r\n","export default function hasuraAuthMiddleware(req, res, next) {\r\n  const requiredSecret = req.headers['x-hasura-action-secret']\r\n  const providedSecret = process.env.HASURA_GRAPHQL_ACTION_SECRET\r\n  if (requiredSecret === providedSecret) next();\r\n  else res.sendStatus(403);\r\n}\r\n"],"sourceRoot":""}