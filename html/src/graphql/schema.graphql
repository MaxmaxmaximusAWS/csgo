schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

scalar bigint

# expression to compare columns of type bigint. All fields are combined with logical 'AND'.
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type BuyItemOutput {
  id: bigint!
}

# columns and relationships of "chat.message"
type chat_message {
  author_id: bigint!
  id: bigint!
  text: String!

  # An object relationship
  user: user!
}

# aggregated selection of "chat.message"
type chat_message_aggregate {
  aggregate: chat_message_aggregate_fields
  nodes: [chat_message!]!
}

# aggregate fields of "chat.message"
type chat_message_aggregate_fields {
  avg: chat_message_avg_fields
  count(columns: [chat_message_select_column!], distinct: Boolean): Int
  max: chat_message_max_fields
  min: chat_message_min_fields
  stddev: chat_message_stddev_fields
  stddev_pop: chat_message_stddev_pop_fields
  stddev_samp: chat_message_stddev_samp_fields
  sum: chat_message_sum_fields
  var_pop: chat_message_var_pop_fields
  var_samp: chat_message_var_samp_fields
  variance: chat_message_variance_fields
}

# order by aggregate values of table "chat.message"
input chat_message_aggregate_order_by {
  avg: chat_message_avg_order_by
  count: order_by
  max: chat_message_max_order_by
  min: chat_message_min_order_by
  stddev: chat_message_stddev_order_by
  stddev_pop: chat_message_stddev_pop_order_by
  stddev_samp: chat_message_stddev_samp_order_by
  sum: chat_message_sum_order_by
  var_pop: chat_message_var_pop_order_by
  var_samp: chat_message_var_samp_order_by
  variance: chat_message_variance_order_by
}

# input type for inserting array relation for remote table "chat.message"
input chat_message_arr_rel_insert_input {
  data: [chat_message_insert_input!]!
  on_conflict: chat_message_on_conflict
}

# aggregate avg on columns
type chat_message_avg_fields {
  author_id: Float
  id: Float
}

# order by avg() on columns of table "chat.message"
input chat_message_avg_order_by {
  author_id: order_by
  id: order_by
}

# Boolean expression to filter rows from the table "chat.message". All fields are combined with a logical 'AND'.
input chat_message_bool_exp {
  _and: [chat_message_bool_exp]
  _not: chat_message_bool_exp
  _or: [chat_message_bool_exp]
  author_id: bigint_comparison_exp
  id: bigint_comparison_exp
  text: String_comparison_exp
  user: user_bool_exp
}

# unique or primary key constraints on table "chat.message"
enum chat_message_constraint {
  # unique or primary key constraint
  message_pkey
}

# input type for incrementing integer column in table "chat.message"
input chat_message_inc_input {
  author_id: bigint
  id: bigint
}

# input type for inserting data into table "chat.message"
input chat_message_insert_input {
  author_id: bigint
  id: bigint
  text: String
  user: user_obj_rel_insert_input
}

# aggregate max on columns
type chat_message_max_fields {
  author_id: bigint
  id: bigint
  text: String
}

# order by max() on columns of table "chat.message"
input chat_message_max_order_by {
  author_id: order_by
  id: order_by
  text: order_by
}

# aggregate min on columns
type chat_message_min_fields {
  author_id: bigint
  id: bigint
  text: String
}

# order by min() on columns of table "chat.message"
input chat_message_min_order_by {
  author_id: order_by
  id: order_by
  text: order_by
}

# response of any mutation on the table "chat.message"
type chat_message_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [chat_message!]!
}

# input type for inserting object relation for remote table "chat.message"
input chat_message_obj_rel_insert_input {
  data: chat_message_insert_input!
  on_conflict: chat_message_on_conflict
}

# on conflict condition type for table "chat.message"
input chat_message_on_conflict {
  constraint: chat_message_constraint!
  update_columns: [chat_message_update_column!]!
  where: chat_message_bool_exp
}

# ordering options when selecting data from "chat.message"
input chat_message_order_by {
  author_id: order_by
  id: order_by
  text: order_by
  user: user_order_by
}

# primary key columns input for table: "chat.message"
input chat_message_pk_columns_input {
  id: bigint!
}

# select columns of table "chat.message"
enum chat_message_select_column {
  # column name
  author_id

  # column name
  id

  # column name
  text
}

# input type for updating data in table "chat.message"
input chat_message_set_input {
  author_id: bigint
  id: bigint
  text: String
}

# aggregate stddev on columns
type chat_message_stddev_fields {
  author_id: Float
  id: Float
}

# order by stddev() on columns of table "chat.message"
input chat_message_stddev_order_by {
  author_id: order_by
  id: order_by
}

# aggregate stddev_pop on columns
type chat_message_stddev_pop_fields {
  author_id: Float
  id: Float
}

# order by stddev_pop() on columns of table "chat.message"
input chat_message_stddev_pop_order_by {
  author_id: order_by
  id: order_by
}

# aggregate stddev_samp on columns
type chat_message_stddev_samp_fields {
  author_id: Float
  id: Float
}

# order by stddev_samp() on columns of table "chat.message"
input chat_message_stddev_samp_order_by {
  author_id: order_by
  id: order_by
}

# aggregate sum on columns
type chat_message_sum_fields {
  author_id: bigint
  id: bigint
}

# order by sum() on columns of table "chat.message"
input chat_message_sum_order_by {
  author_id: order_by
  id: order_by
}

# update columns of table "chat.message"
enum chat_message_update_column {
  # column name
  author_id

  # column name
  id

  # column name
  text
}

# aggregate var_pop on columns
type chat_message_var_pop_fields {
  author_id: Float
  id: Float
}

# order by var_pop() on columns of table "chat.message"
input chat_message_var_pop_order_by {
  author_id: order_by
  id: order_by
}

# aggregate var_samp on columns
type chat_message_var_samp_fields {
  author_id: Float
  id: Float
}

# order by var_samp() on columns of table "chat.message"
input chat_message_var_samp_order_by {
  author_id: order_by
  id: order_by
}

# aggregate variance on columns
type chat_message_variance_fields {
  author_id: Float
  id: Float
}

# order by variance() on columns of table "chat.message"
input chat_message_variance_order_by {
  author_id: order_by
  id: order_by
}

type CreateUserOutput {
  id: Int!
}

# columns and relationships of "game.bet"
type game_bet {
  id: bigint!
  money: Int!

  # An object relationship
  round: game_round!
  round_id: bigint!

  # An object relationship
  user: user!
  user_id: bigint!
}

# aggregated selection of "game.bet"
type game_bet_aggregate {
  aggregate: game_bet_aggregate_fields
  nodes: [game_bet!]!
}

# aggregate fields of "game.bet"
type game_bet_aggregate_fields {
  avg: game_bet_avg_fields
  count(columns: [game_bet_select_column!], distinct: Boolean): Int
  max: game_bet_max_fields
  min: game_bet_min_fields
  stddev: game_bet_stddev_fields
  stddev_pop: game_bet_stddev_pop_fields
  stddev_samp: game_bet_stddev_samp_fields
  sum: game_bet_sum_fields
  var_pop: game_bet_var_pop_fields
  var_samp: game_bet_var_samp_fields
  variance: game_bet_variance_fields
}

# order by aggregate values of table "game.bet"
input game_bet_aggregate_order_by {
  avg: game_bet_avg_order_by
  count: order_by
  max: game_bet_max_order_by
  min: game_bet_min_order_by
  stddev: game_bet_stddev_order_by
  stddev_pop: game_bet_stddev_pop_order_by
  stddev_samp: game_bet_stddev_samp_order_by
  sum: game_bet_sum_order_by
  var_pop: game_bet_var_pop_order_by
  var_samp: game_bet_var_samp_order_by
  variance: game_bet_variance_order_by
}

# input type for inserting array relation for remote table "game.bet"
input game_bet_arr_rel_insert_input {
  data: [game_bet_insert_input!]!
  on_conflict: game_bet_on_conflict
}

# aggregate avg on columns
type game_bet_avg_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by avg() on columns of table "game.bet"
input game_bet_avg_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# Boolean expression to filter rows from the table "game.bet". All fields are combined with a logical 'AND'.
input game_bet_bool_exp {
  _and: [game_bet_bool_exp]
  _not: game_bet_bool_exp
  _or: [game_bet_bool_exp]
  id: bigint_comparison_exp
  money: Int_comparison_exp
  round: game_round_bool_exp
  round_id: bigint_comparison_exp
  user: user_bool_exp
  user_id: bigint_comparison_exp
}

# unique or primary key constraints on table "game.bet"
enum game_bet_constraint {
  # unique or primary key constraint
  game_round_bet_pkey
}

# input type for incrementing integer column in table "game.bet"
input game_bet_inc_input {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# input type for inserting data into table "game.bet"
input game_bet_insert_input {
  id: bigint
  money: Int
  round: game_round_obj_rel_insert_input
  round_id: bigint
  user: user_obj_rel_insert_input
  user_id: bigint
}

# aggregate max on columns
type game_bet_max_fields {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# order by max() on columns of table "game.bet"
input game_bet_max_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate min on columns
type game_bet_min_fields {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# order by min() on columns of table "game.bet"
input game_bet_min_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# response of any mutation on the table "game.bet"
type game_bet_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_bet!]!
}

# input type for inserting object relation for remote table "game.bet"
input game_bet_obj_rel_insert_input {
  data: game_bet_insert_input!
  on_conflict: game_bet_on_conflict
}

# on conflict condition type for table "game.bet"
input game_bet_on_conflict {
  constraint: game_bet_constraint!
  update_columns: [game_bet_update_column!]!
  where: game_bet_bool_exp
}

# ordering options when selecting data from "game.bet"
input game_bet_order_by {
  id: order_by
  money: order_by
  round: game_round_order_by
  round_id: order_by
  user: user_order_by
  user_id: order_by
}

# primary key columns input for table: "game.bet"
input game_bet_pk_columns_input {
  id: bigint!
}

# select columns of table "game.bet"
enum game_bet_select_column {
  # column name
  id

  # column name
  money

  # column name
  round_id

  # column name
  user_id
}

# input type for updating data in table "game.bet"
input game_bet_set_input {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# aggregate stddev on columns
type game_bet_stddev_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by stddev() on columns of table "game.bet"
input game_bet_stddev_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate stddev_pop on columns
type game_bet_stddev_pop_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by stddev_pop() on columns of table "game.bet"
input game_bet_stddev_pop_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate stddev_samp on columns
type game_bet_stddev_samp_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by stddev_samp() on columns of table "game.bet"
input game_bet_stddev_samp_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate sum on columns
type game_bet_sum_fields {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# order by sum() on columns of table "game.bet"
input game_bet_sum_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# update columns of table "game.bet"
enum game_bet_update_column {
  # column name
  id

  # column name
  money

  # column name
  round_id

  # column name
  user_id
}

# aggregate var_pop on columns
type game_bet_var_pop_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by var_pop() on columns of table "game.bet"
input game_bet_var_pop_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate var_samp on columns
type game_bet_var_samp_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by var_samp() on columns of table "game.bet"
input game_bet_var_samp_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate variance on columns
type game_bet_variance_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by variance() on columns of table "game.bet"
input game_bet_variance_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# columns and relationships of "game.item"
type game_item {
  created_at: timestamptz
  id: bigint!

  # An object relationship
  item_data: game_item_data
  item_data_id: bigint!

  # An object relationship
  user: user!
  user_id: bigint!
}

# aggregated selection of "game.item"
type game_item_aggregate {
  aggregate: game_item_aggregate_fields
  nodes: [game_item!]!
}

# aggregate fields of "game.item"
type game_item_aggregate_fields {
  avg: game_item_avg_fields
  count(columns: [game_item_select_column!], distinct: Boolean): Int
  max: game_item_max_fields
  min: game_item_min_fields
  stddev: game_item_stddev_fields
  stddev_pop: game_item_stddev_pop_fields
  stddev_samp: game_item_stddev_samp_fields
  sum: game_item_sum_fields
  var_pop: game_item_var_pop_fields
  var_samp: game_item_var_samp_fields
  variance: game_item_variance_fields
}

# order by aggregate values of table "game.item"
input game_item_aggregate_order_by {
  avg: game_item_avg_order_by
  count: order_by
  max: game_item_max_order_by
  min: game_item_min_order_by
  stddev: game_item_stddev_order_by
  stddev_pop: game_item_stddev_pop_order_by
  stddev_samp: game_item_stddev_samp_order_by
  sum: game_item_sum_order_by
  var_pop: game_item_var_pop_order_by
  var_samp: game_item_var_samp_order_by
  variance: game_item_variance_order_by
}

# input type for inserting array relation for remote table "game.item"
input game_item_arr_rel_insert_input {
  data: [game_item_insert_input!]!
  on_conflict: game_item_on_conflict
}

# aggregate avg on columns
type game_item_avg_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by avg() on columns of table "game.item"
input game_item_avg_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# Boolean expression to filter rows from the table "game.item". All fields are combined with a logical 'AND'.
input game_item_bool_exp {
  _and: [game_item_bool_exp]
  _not: game_item_bool_exp
  _or: [game_item_bool_exp]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  item_data: game_item_data_bool_exp
  item_data_id: bigint_comparison_exp
  user: user_bool_exp
  user_id: bigint_comparison_exp
}

# unique or primary key constraints on table "game.item"
enum game_item_constraint {
  # unique or primary key constraint
  item_pkey
}

# columns and relationships of "game.item_data"
type game_item_data {
  active: Boolean!
  id: bigint!
  image: String!
  inspect_link: String!
  inspectable: Boolean!
  market_hash_name: String!
  phase: String!
  price: Int!
  quality: Int
  rarity: Int
}

# aggregated selection of "game.item_data"
type game_item_data_aggregate {
  aggregate: game_item_data_aggregate_fields
  nodes: [game_item_data!]!
}

# aggregate fields of "game.item_data"
type game_item_data_aggregate_fields {
  avg: game_item_data_avg_fields
  count(columns: [game_item_data_select_column!], distinct: Boolean): Int
  max: game_item_data_max_fields
  min: game_item_data_min_fields
  stddev: game_item_data_stddev_fields
  stddev_pop: game_item_data_stddev_pop_fields
  stddev_samp: game_item_data_stddev_samp_fields
  sum: game_item_data_sum_fields
  var_pop: game_item_data_var_pop_fields
  var_samp: game_item_data_var_samp_fields
  variance: game_item_data_variance_fields
}

# order by aggregate values of table "game.item_data"
input game_item_data_aggregate_order_by {
  avg: game_item_data_avg_order_by
  count: order_by
  max: game_item_data_max_order_by
  min: game_item_data_min_order_by
  stddev: game_item_data_stddev_order_by
  stddev_pop: game_item_data_stddev_pop_order_by
  stddev_samp: game_item_data_stddev_samp_order_by
  sum: game_item_data_sum_order_by
  var_pop: game_item_data_var_pop_order_by
  var_samp: game_item_data_var_samp_order_by
  variance: game_item_data_variance_order_by
}

# input type for inserting array relation for remote table "game.item_data"
input game_item_data_arr_rel_insert_input {
  data: [game_item_data_insert_input!]!
  on_conflict: game_item_data_on_conflict
}

# aggregate avg on columns
type game_item_data_avg_fields {
  id: Float
  price: Float
  quality: Float
  rarity: Float
}

# order by avg() on columns of table "game.item_data"
input game_item_data_avg_order_by {
  id: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# Boolean expression to filter rows from the table "game.item_data". All fields are combined with a logical 'AND'.
input game_item_data_bool_exp {
  _and: [game_item_data_bool_exp]
  _not: game_item_data_bool_exp
  _or: [game_item_data_bool_exp]
  active: Boolean_comparison_exp
  id: bigint_comparison_exp
  image: String_comparison_exp
  inspect_link: String_comparison_exp
  inspectable: Boolean_comparison_exp
  market_hash_name: String_comparison_exp
  phase: String_comparison_exp
  price: Int_comparison_exp
  quality: Int_comparison_exp
  rarity: Int_comparison_exp
}

# unique or primary key constraints on table "game.item_data"
enum game_item_data_constraint {
  # unique or primary key constraint
  item_data_market_hash_name_phase_key

  # unique or primary key constraint
  item_data_pkey
}

# input type for incrementing integer column in table "game.item_data"
input game_item_data_inc_input {
  id: bigint
  price: Int
  quality: Int
  rarity: Int
}

# input type for inserting data into table "game.item_data"
input game_item_data_insert_input {
  active: Boolean
  id: bigint
  image: String
  inspect_link: String
  inspectable: Boolean
  market_hash_name: String
  phase: String
  price: Int
  quality: Int
  rarity: Int
}

# aggregate max on columns
type game_item_data_max_fields {
  id: bigint
  image: String
  inspect_link: String
  market_hash_name: String
  phase: String
  price: Int
  quality: Int
  rarity: Int
}

# order by max() on columns of table "game.item_data"
input game_item_data_max_order_by {
  id: order_by
  image: order_by
  inspect_link: order_by
  market_hash_name: order_by
  phase: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# aggregate min on columns
type game_item_data_min_fields {
  id: bigint
  image: String
  inspect_link: String
  market_hash_name: String
  phase: String
  price: Int
  quality: Int
  rarity: Int
}

# order by min() on columns of table "game.item_data"
input game_item_data_min_order_by {
  id: order_by
  image: order_by
  inspect_link: order_by
  market_hash_name: order_by
  phase: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# response of any mutation on the table "game.item_data"
type game_item_data_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_item_data!]!
}

# input type for inserting object relation for remote table "game.item_data"
input game_item_data_obj_rel_insert_input {
  data: game_item_data_insert_input!
  on_conflict: game_item_data_on_conflict
}

# on conflict condition type for table "game.item_data"
input game_item_data_on_conflict {
  constraint: game_item_data_constraint!
  update_columns: [game_item_data_update_column!]!
  where: game_item_data_bool_exp
}

# ordering options when selecting data from "game.item_data"
input game_item_data_order_by {
  active: order_by
  id: order_by
  image: order_by
  inspect_link: order_by
  inspectable: order_by
  market_hash_name: order_by
  phase: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# primary key columns input for table: "game.item_data"
input game_item_data_pk_columns_input {
  id: bigint!
}

# select columns of table "game.item_data"
enum game_item_data_select_column {
  # column name
  active

  # column name
  id

  # column name
  image

  # column name
  inspect_link

  # column name
  inspectable

  # column name
  market_hash_name

  # column name
  phase

  # column name
  price

  # column name
  quality

  # column name
  rarity
}

# input type for updating data in table "game.item_data"
input game_item_data_set_input {
  active: Boolean
  id: bigint
  image: String
  inspect_link: String
  inspectable: Boolean
  market_hash_name: String
  phase: String
  price: Int
  quality: Int
  rarity: Int
}

# aggregate stddev on columns
type game_item_data_stddev_fields {
  id: Float
  price: Float
  quality: Float
  rarity: Float
}

# order by stddev() on columns of table "game.item_data"
input game_item_data_stddev_order_by {
  id: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# aggregate stddev_pop on columns
type game_item_data_stddev_pop_fields {
  id: Float
  price: Float
  quality: Float
  rarity: Float
}

# order by stddev_pop() on columns of table "game.item_data"
input game_item_data_stddev_pop_order_by {
  id: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# aggregate stddev_samp on columns
type game_item_data_stddev_samp_fields {
  id: Float
  price: Float
  quality: Float
  rarity: Float
}

# order by stddev_samp() on columns of table "game.item_data"
input game_item_data_stddev_samp_order_by {
  id: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# aggregate sum on columns
type game_item_data_sum_fields {
  id: bigint
  price: Int
  quality: Int
  rarity: Int
}

# order by sum() on columns of table "game.item_data"
input game_item_data_sum_order_by {
  id: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# update columns of table "game.item_data"
enum game_item_data_update_column {
  # column name
  active

  # column name
  id

  # column name
  image

  # column name
  inspect_link

  # column name
  inspectable

  # column name
  market_hash_name

  # column name
  phase

  # column name
  price

  # column name
  quality

  # column name
  rarity
}

# aggregate var_pop on columns
type game_item_data_var_pop_fields {
  id: Float
  price: Float
  quality: Float
  rarity: Float
}

# order by var_pop() on columns of table "game.item_data"
input game_item_data_var_pop_order_by {
  id: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# aggregate var_samp on columns
type game_item_data_var_samp_fields {
  id: Float
  price: Float
  quality: Float
  rarity: Float
}

# order by var_samp() on columns of table "game.item_data"
input game_item_data_var_samp_order_by {
  id: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# aggregate variance on columns
type game_item_data_variance_fields {
  id: Float
  price: Float
  quality: Float
  rarity: Float
}

# order by variance() on columns of table "game.item_data"
input game_item_data_variance_order_by {
  id: order_by
  price: order_by
  quality: order_by
  rarity: order_by
}

# input type for incrementing integer column in table "game.item"
input game_item_inc_input {
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# input type for inserting data into table "game.item"
input game_item_insert_input {
  created_at: timestamptz
  id: bigint
  item_data: game_item_data_obj_rel_insert_input
  item_data_id: bigint
  user: user_obj_rel_insert_input
  user_id: bigint
}

# aggregate max on columns
type game_item_max_fields {
  created_at: timestamptz
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# order by max() on columns of table "game.item"
input game_item_max_order_by {
  created_at: order_by
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate min on columns
type game_item_min_fields {
  created_at: timestamptz
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# order by min() on columns of table "game.item"
input game_item_min_order_by {
  created_at: order_by
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# response of any mutation on the table "game.item"
type game_item_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_item!]!
}

# input type for inserting object relation for remote table "game.item"
input game_item_obj_rel_insert_input {
  data: game_item_insert_input!
  on_conflict: game_item_on_conflict
}

# on conflict condition type for table "game.item"
input game_item_on_conflict {
  constraint: game_item_constraint!
  update_columns: [game_item_update_column!]!
  where: game_item_bool_exp
}

# ordering options when selecting data from "game.item"
input game_item_order_by {
  created_at: order_by
  id: order_by
  item_data: game_item_data_order_by
  item_data_id: order_by
  user: user_order_by
  user_id: order_by
}

# primary key columns input for table: "game.item"
input game_item_pk_columns_input {
  id: bigint!
}

# select columns of table "game.item"
enum game_item_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  item_data_id

  # column name
  user_id
}

# input type for updating data in table "game.item"
input game_item_set_input {
  created_at: timestamptz
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# aggregate stddev on columns
type game_item_stddev_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by stddev() on columns of table "game.item"
input game_item_stddev_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate stddev_pop on columns
type game_item_stddev_pop_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by stddev_pop() on columns of table "game.item"
input game_item_stddev_pop_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate stddev_samp on columns
type game_item_stddev_samp_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by stddev_samp() on columns of table "game.item"
input game_item_stddev_samp_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate sum on columns
type game_item_sum_fields {
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# order by sum() on columns of table "game.item"
input game_item_sum_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# update columns of table "game.item"
enum game_item_update_column {
  # column name
  created_at

  # column name
  id

  # column name
  item_data_id

  # column name
  user_id
}

# aggregate var_pop on columns
type game_item_var_pop_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by var_pop() on columns of table "game.item"
input game_item_var_pop_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate var_samp on columns
type game_item_var_samp_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by var_samp() on columns of table "game.item"
input game_item_var_samp_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate variance on columns
type game_item_variance_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by variance() on columns of table "game.item"
input game_item_variance_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# columns and relationships of "game.items_data_loader"
type game_items_data_loader {
  completed: Int!
  id: bigint!
  loading: Boolean!
}

# aggregated selection of "game.items_data_loader"
type game_items_data_loader_aggregate {
  aggregate: game_items_data_loader_aggregate_fields
  nodes: [game_items_data_loader!]!
}

# aggregate fields of "game.items_data_loader"
type game_items_data_loader_aggregate_fields {
  avg: game_items_data_loader_avg_fields
  count(columns: [game_items_data_loader_select_column!], distinct: Boolean): Int
  max: game_items_data_loader_max_fields
  min: game_items_data_loader_min_fields
  stddev: game_items_data_loader_stddev_fields
  stddev_pop: game_items_data_loader_stddev_pop_fields
  stddev_samp: game_items_data_loader_stddev_samp_fields
  sum: game_items_data_loader_sum_fields
  var_pop: game_items_data_loader_var_pop_fields
  var_samp: game_items_data_loader_var_samp_fields
  variance: game_items_data_loader_variance_fields
}

# order by aggregate values of table "game.items_data_loader"
input game_items_data_loader_aggregate_order_by {
  avg: game_items_data_loader_avg_order_by
  count: order_by
  max: game_items_data_loader_max_order_by
  min: game_items_data_loader_min_order_by
  stddev: game_items_data_loader_stddev_order_by
  stddev_pop: game_items_data_loader_stddev_pop_order_by
  stddev_samp: game_items_data_loader_stddev_samp_order_by
  sum: game_items_data_loader_sum_order_by
  var_pop: game_items_data_loader_var_pop_order_by
  var_samp: game_items_data_loader_var_samp_order_by
  variance: game_items_data_loader_variance_order_by
}

# input type for inserting array relation for remote table "game.items_data_loader"
input game_items_data_loader_arr_rel_insert_input {
  data: [game_items_data_loader_insert_input!]!
  on_conflict: game_items_data_loader_on_conflict
}

# aggregate avg on columns
type game_items_data_loader_avg_fields {
  completed: Float
  id: Float
}

# order by avg() on columns of table "game.items_data_loader"
input game_items_data_loader_avg_order_by {
  completed: order_by
  id: order_by
}

# Boolean expression to filter rows from the table "game.items_data_loader". All fields are combined with a logical 'AND'.
input game_items_data_loader_bool_exp {
  _and: [game_items_data_loader_bool_exp]
  _not: game_items_data_loader_bool_exp
  _or: [game_items_data_loader_bool_exp]
  completed: Int_comparison_exp
  id: bigint_comparison_exp
  loading: Boolean_comparison_exp
}

# unique or primary key constraints on table "game.items_data_loader"
enum game_items_data_loader_constraint {
  # unique or primary key constraint
  items_data_loader_pkey
}

# input type for incrementing integer column in table "game.items_data_loader"
input game_items_data_loader_inc_input {
  completed: Int
  id: bigint
}

# input type for inserting data into table "game.items_data_loader"
input game_items_data_loader_insert_input {
  completed: Int
  id: bigint
  loading: Boolean
}

# aggregate max on columns
type game_items_data_loader_max_fields {
  completed: Int
  id: bigint
}

# order by max() on columns of table "game.items_data_loader"
input game_items_data_loader_max_order_by {
  completed: order_by
  id: order_by
}

# aggregate min on columns
type game_items_data_loader_min_fields {
  completed: Int
  id: bigint
}

# order by min() on columns of table "game.items_data_loader"
input game_items_data_loader_min_order_by {
  completed: order_by
  id: order_by
}

# response of any mutation on the table "game.items_data_loader"
type game_items_data_loader_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_items_data_loader!]!
}

# input type for inserting object relation for remote table "game.items_data_loader"
input game_items_data_loader_obj_rel_insert_input {
  data: game_items_data_loader_insert_input!
  on_conflict: game_items_data_loader_on_conflict
}

# on conflict condition type for table "game.items_data_loader"
input game_items_data_loader_on_conflict {
  constraint: game_items_data_loader_constraint!
  update_columns: [game_items_data_loader_update_column!]!
  where: game_items_data_loader_bool_exp
}

# ordering options when selecting data from "game.items_data_loader"
input game_items_data_loader_order_by {
  completed: order_by
  id: order_by
  loading: order_by
}

# primary key columns input for table: "game.items_data_loader"
input game_items_data_loader_pk_columns_input {
  id: bigint!
}

# select columns of table "game.items_data_loader"
enum game_items_data_loader_select_column {
  # column name
  completed

  # column name
  id

  # column name
  loading
}

# input type for updating data in table "game.items_data_loader"
input game_items_data_loader_set_input {
  completed: Int
  id: bigint
  loading: Boolean
}

# aggregate stddev on columns
type game_items_data_loader_stddev_fields {
  completed: Float
  id: Float
}

# order by stddev() on columns of table "game.items_data_loader"
input game_items_data_loader_stddev_order_by {
  completed: order_by
  id: order_by
}

# aggregate stddev_pop on columns
type game_items_data_loader_stddev_pop_fields {
  completed: Float
  id: Float
}

# order by stddev_pop() on columns of table "game.items_data_loader"
input game_items_data_loader_stddev_pop_order_by {
  completed: order_by
  id: order_by
}

# aggregate stddev_samp on columns
type game_items_data_loader_stddev_samp_fields {
  completed: Float
  id: Float
}

# order by stddev_samp() on columns of table "game.items_data_loader"
input game_items_data_loader_stddev_samp_order_by {
  completed: order_by
  id: order_by
}

# aggregate sum on columns
type game_items_data_loader_sum_fields {
  completed: Int
  id: bigint
}

# order by sum() on columns of table "game.items_data_loader"
input game_items_data_loader_sum_order_by {
  completed: order_by
  id: order_by
}

# update columns of table "game.items_data_loader"
enum game_items_data_loader_update_column {
  # column name
  completed

  # column name
  id

  # column name
  loading
}

# aggregate var_pop on columns
type game_items_data_loader_var_pop_fields {
  completed: Float
  id: Float
}

# order by var_pop() on columns of table "game.items_data_loader"
input game_items_data_loader_var_pop_order_by {
  completed: order_by
  id: order_by
}

# aggregate var_samp on columns
type game_items_data_loader_var_samp_fields {
  completed: Float
  id: Float
}

# order by var_samp() on columns of table "game.items_data_loader"
input game_items_data_loader_var_samp_order_by {
  completed: order_by
  id: order_by
}

# aggregate variance on columns
type game_items_data_loader_variance_fields {
  completed: Float
  id: Float
}

# order by variance() on columns of table "game.items_data_loader"
input game_items_data_loader_variance_order_by {
  completed: order_by
  id: order_by
}

# columns and relationships of "game.round"
type game_round {
  # An array relationship
  bets(
    # distinct select on columns
    distinct_on: [game_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_bet_order_by!]

    # filter the rows returned
    where: game_bet_bool_exp
  ): [game_bet!]!

  # An aggregated array relationship
  bets_aggregate(
    # distinct select on columns
    distinct_on: [game_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_bet_order_by!]

    # filter the rows returned
    where: game_bet_bool_exp
  ): game_bet_aggregate!
  created_at: timestamptz!
  id: bigint!
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  status: game_round_status_enum!
  x: Int
}

# aggregated selection of "game.round"
type game_round_aggregate {
  aggregate: game_round_aggregate_fields
  nodes: [game_round!]!
}

# aggregate fields of "game.round"
type game_round_aggregate_fields {
  avg: game_round_avg_fields
  count(columns: [game_round_select_column!], distinct: Boolean): Int
  max: game_round_max_fields
  min: game_round_min_fields
  stddev: game_round_stddev_fields
  stddev_pop: game_round_stddev_pop_fields
  stddev_samp: game_round_stddev_samp_fields
  sum: game_round_sum_fields
  var_pop: game_round_var_pop_fields
  var_samp: game_round_var_samp_fields
  variance: game_round_variance_fields
}

# order by aggregate values of table "game.round"
input game_round_aggregate_order_by {
  avg: game_round_avg_order_by
  count: order_by
  max: game_round_max_order_by
  min: game_round_min_order_by
  stddev: game_round_stddev_order_by
  stddev_pop: game_round_stddev_pop_order_by
  stddev_samp: game_round_stddev_samp_order_by
  sum: game_round_sum_order_by
  var_pop: game_round_var_pop_order_by
  var_samp: game_round_var_samp_order_by
  variance: game_round_variance_order_by
}

# input type for inserting array relation for remote table "game.round"
input game_round_arr_rel_insert_input {
  data: [game_round_insert_input!]!
  on_conflict: game_round_on_conflict
}

# aggregate avg on columns
type game_round_avg_fields {
  id: Float
  x: Float
}

# order by avg() on columns of table "game.round"
input game_round_avg_order_by {
  id: order_by
  x: order_by
}

# Boolean expression to filter rows from the table "game.round". All fields are combined with a logical 'AND'.
input game_round_bool_exp {
  _and: [game_round_bool_exp]
  _not: game_round_bool_exp
  _or: [game_round_bool_exp]
  bets: game_bet_bool_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  start_pending_at: timestamptz_comparison_exp
  start_playing_at: timestamptz_comparison_exp
  start_show_at: timestamptz_comparison_exp
  status: game_round_status_enum_comparison_exp
  x: Int_comparison_exp
}

# unique or primary key constraints on table "game.round"
enum game_round_constraint {
  # unique or primary key constraint
  game_round_pkey
}

# input type for incrementing integer column in table "game.round"
input game_round_inc_input {
  id: bigint
  x: Int
}

# input type for inserting data into table "game.round"
input game_round_insert_input {
  bets: game_bet_arr_rel_insert_input
  created_at: timestamptz
  id: bigint
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  status: game_round_status_enum
  x: Int
}

# aggregate max on columns
type game_round_max_fields {
  created_at: timestamptz
  id: bigint
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  x: Int
}

# order by max() on columns of table "game.round"
input game_round_max_order_by {
  created_at: order_by
  id: order_by
  start_pending_at: order_by
  start_playing_at: order_by
  start_show_at: order_by
  x: order_by
}

# aggregate min on columns
type game_round_min_fields {
  created_at: timestamptz
  id: bigint
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  x: Int
}

# order by min() on columns of table "game.round"
input game_round_min_order_by {
  created_at: order_by
  id: order_by
  start_pending_at: order_by
  start_playing_at: order_by
  start_show_at: order_by
  x: order_by
}

# response of any mutation on the table "game.round"
type game_round_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_round!]!
}

# input type for inserting object relation for remote table "game.round"
input game_round_obj_rel_insert_input {
  data: game_round_insert_input!
  on_conflict: game_round_on_conflict
}

# on conflict condition type for table "game.round"
input game_round_on_conflict {
  constraint: game_round_constraint!
  update_columns: [game_round_update_column!]!
  where: game_round_bool_exp
}

# ordering options when selecting data from "game.round"
input game_round_order_by {
  bets_aggregate: game_bet_aggregate_order_by
  created_at: order_by
  id: order_by
  start_pending_at: order_by
  start_playing_at: order_by
  start_show_at: order_by
  status: order_by
  x: order_by
}

# primary key columns input for table: "game.round"
input game_round_pk_columns_input {
  id: bigint!
}

# select columns of table "game.round"
enum game_round_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  start_pending_at

  # column name
  start_playing_at

  # column name
  start_show_at

  # column name
  status

  # column name
  x
}

# input type for updating data in table "game.round"
input game_round_set_input {
  created_at: timestamptz
  id: bigint
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  status: game_round_status_enum
  x: Int
}

# columns and relationships of "game.round_status"
type game_round_status {
  value: String!
}

# aggregated selection of "game.round_status"
type game_round_status_aggregate {
  aggregate: game_round_status_aggregate_fields
  nodes: [game_round_status!]!
}

# aggregate fields of "game.round_status"
type game_round_status_aggregate_fields {
  count(columns: [game_round_status_select_column!], distinct: Boolean): Int
  max: game_round_status_max_fields
  min: game_round_status_min_fields
}

# order by aggregate values of table "game.round_status"
input game_round_status_aggregate_order_by {
  count: order_by
  max: game_round_status_max_order_by
  min: game_round_status_min_order_by
}

# input type for inserting array relation for remote table "game.round_status"
input game_round_status_arr_rel_insert_input {
  data: [game_round_status_insert_input!]!
  on_conflict: game_round_status_on_conflict
}

# Boolean expression to filter rows from the table "game.round_status". All fields are combined with a logical 'AND'.
input game_round_status_bool_exp {
  _and: [game_round_status_bool_exp]
  _not: game_round_status_bool_exp
  _or: [game_round_status_bool_exp]
  value: String_comparison_exp
}

# unique or primary key constraints on table "game.round_status"
enum game_round_status_constraint {
  # unique or primary key constraint
  game_status_pkey
}

enum game_round_status_enum {
  done
  error
  pending
  playing
  show
}

# expression to compare columns of type game_round_status_enum. All fields are combined with logical 'AND'.
input game_round_status_enum_comparison_exp {
  _eq: game_round_status_enum
  _in: [game_round_status_enum!]
  _is_null: Boolean
  _neq: game_round_status_enum
  _nin: [game_round_status_enum!]
}

# input type for inserting data into table "game.round_status"
input game_round_status_insert_input {
  value: String
}

# aggregate max on columns
type game_round_status_max_fields {
  value: String
}

# order by max() on columns of table "game.round_status"
input game_round_status_max_order_by {
  value: order_by
}

# aggregate min on columns
type game_round_status_min_fields {
  value: String
}

# order by min() on columns of table "game.round_status"
input game_round_status_min_order_by {
  value: order_by
}

# response of any mutation on the table "game.round_status"
type game_round_status_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_round_status!]!
}

# input type for inserting object relation for remote table "game.round_status"
input game_round_status_obj_rel_insert_input {
  data: game_round_status_insert_input!
  on_conflict: game_round_status_on_conflict
}

# on conflict condition type for table "game.round_status"
input game_round_status_on_conflict {
  constraint: game_round_status_constraint!
  update_columns: [game_round_status_update_column!]!
  where: game_round_status_bool_exp
}

# ordering options when selecting data from "game.round_status"
input game_round_status_order_by {
  value: order_by
}

# primary key columns input for table: "game.round_status"
input game_round_status_pk_columns_input {
  value: String!
}

# select columns of table "game.round_status"
enum game_round_status_select_column {
  # column name
  value
}

# input type for updating data in table "game.round_status"
input game_round_status_set_input {
  value: String
}

# update columns of table "game.round_status"
enum game_round_status_update_column {
  # column name
  value
}

# aggregate stddev on columns
type game_round_stddev_fields {
  id: Float
  x: Float
}

# order by stddev() on columns of table "game.round"
input game_round_stddev_order_by {
  id: order_by
  x: order_by
}

# aggregate stddev_pop on columns
type game_round_stddev_pop_fields {
  id: Float
  x: Float
}

# order by stddev_pop() on columns of table "game.round"
input game_round_stddev_pop_order_by {
  id: order_by
  x: order_by
}

# aggregate stddev_samp on columns
type game_round_stddev_samp_fields {
  id: Float
  x: Float
}

# order by stddev_samp() on columns of table "game.round"
input game_round_stddev_samp_order_by {
  id: order_by
  x: order_by
}

# aggregate sum on columns
type game_round_sum_fields {
  id: bigint
  x: Int
}

# order by sum() on columns of table "game.round"
input game_round_sum_order_by {
  id: order_by
  x: order_by
}

# update columns of table "game.round"
enum game_round_update_column {
  # column name
  created_at

  # column name
  id

  # column name
  start_pending_at

  # column name
  start_playing_at

  # column name
  start_show_at

  # column name
  status

  # column name
  x
}

# aggregate var_pop on columns
type game_round_var_pop_fields {
  id: Float
  x: Float
}

# order by var_pop() on columns of table "game.round"
input game_round_var_pop_order_by {
  id: order_by
  x: order_by
}

# aggregate var_samp on columns
type game_round_var_samp_fields {
  id: Float
  x: Float
}

# order by var_samp() on columns of table "game.round"
input game_round_var_samp_order_by {
  id: order_by
  x: order_by
}

# aggregate variance on columns
type game_round_variance_fields {
  id: Float
  x: Float
}

# order by variance() on columns of table "game.round"
input game_round_variance_order_by {
  id: order_by
  x: order_by
}

# columns and relationships of "game.settings"
type game_settings {
  id: bigint!
  pending_time: Int!
  show_time: Int!
  speed_x: Int
}

# aggregated selection of "game.settings"
type game_settings_aggregate {
  aggregate: game_settings_aggregate_fields
  nodes: [game_settings!]!
}

# aggregate fields of "game.settings"
type game_settings_aggregate_fields {
  avg: game_settings_avg_fields
  count(columns: [game_settings_select_column!], distinct: Boolean): Int
  max: game_settings_max_fields
  min: game_settings_min_fields
  stddev: game_settings_stddev_fields
  stddev_pop: game_settings_stddev_pop_fields
  stddev_samp: game_settings_stddev_samp_fields
  sum: game_settings_sum_fields
  var_pop: game_settings_var_pop_fields
  var_samp: game_settings_var_samp_fields
  variance: game_settings_variance_fields
}

# order by aggregate values of table "game.settings"
input game_settings_aggregate_order_by {
  avg: game_settings_avg_order_by
  count: order_by
  max: game_settings_max_order_by
  min: game_settings_min_order_by
  stddev: game_settings_stddev_order_by
  stddev_pop: game_settings_stddev_pop_order_by
  stddev_samp: game_settings_stddev_samp_order_by
  sum: game_settings_sum_order_by
  var_pop: game_settings_var_pop_order_by
  var_samp: game_settings_var_samp_order_by
  variance: game_settings_variance_order_by
}

# input type for inserting array relation for remote table "game.settings"
input game_settings_arr_rel_insert_input {
  data: [game_settings_insert_input!]!
  on_conflict: game_settings_on_conflict
}

# aggregate avg on columns
type game_settings_avg_fields {
  id: Float
  pending_time: Float
  show_time: Float
  speed_x: Float
}

# order by avg() on columns of table "game.settings"
input game_settings_avg_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# Boolean expression to filter rows from the table "game.settings". All fields are combined with a logical 'AND'.
input game_settings_bool_exp {
  _and: [game_settings_bool_exp]
  _not: game_settings_bool_exp
  _or: [game_settings_bool_exp]
  id: bigint_comparison_exp
  pending_time: Int_comparison_exp
  show_time: Int_comparison_exp
  speed_x: Int_comparison_exp
}

# unique or primary key constraints on table "game.settings"
enum game_settings_constraint {
  # unique or primary key constraint
  settings_pkey
}

# input type for incrementing integer column in table "game.settings"
input game_settings_inc_input {
  id: bigint
  pending_time: Int
  show_time: Int
  speed_x: Int
}

# input type for inserting data into table "game.settings"
input game_settings_insert_input {
  id: bigint
  pending_time: Int
  show_time: Int
  speed_x: Int
}

# aggregate max on columns
type game_settings_max_fields {
  id: bigint
  pending_time: Int
  show_time: Int
  speed_x: Int
}

# order by max() on columns of table "game.settings"
input game_settings_max_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# aggregate min on columns
type game_settings_min_fields {
  id: bigint
  pending_time: Int
  show_time: Int
  speed_x: Int
}

# order by min() on columns of table "game.settings"
input game_settings_min_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# response of any mutation on the table "game.settings"
type game_settings_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_settings!]!
}

# input type for inserting object relation for remote table "game.settings"
input game_settings_obj_rel_insert_input {
  data: game_settings_insert_input!
  on_conflict: game_settings_on_conflict
}

# on conflict condition type for table "game.settings"
input game_settings_on_conflict {
  constraint: game_settings_constraint!
  update_columns: [game_settings_update_column!]!
  where: game_settings_bool_exp
}

# ordering options when selecting data from "game.settings"
input game_settings_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# primary key columns input for table: "game.settings"
input game_settings_pk_columns_input {
  id: bigint!
}

# select columns of table "game.settings"
enum game_settings_select_column {
  # column name
  id

  # column name
  pending_time

  # column name
  show_time

  # column name
  speed_x
}

# input type for updating data in table "game.settings"
input game_settings_set_input {
  id: bigint
  pending_time: Int
  show_time: Int
  speed_x: Int
}

# aggregate stddev on columns
type game_settings_stddev_fields {
  id: Float
  pending_time: Float
  show_time: Float
  speed_x: Float
}

# order by stddev() on columns of table "game.settings"
input game_settings_stddev_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# aggregate stddev_pop on columns
type game_settings_stddev_pop_fields {
  id: Float
  pending_time: Float
  show_time: Float
  speed_x: Float
}

# order by stddev_pop() on columns of table "game.settings"
input game_settings_stddev_pop_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# aggregate stddev_samp on columns
type game_settings_stddev_samp_fields {
  id: Float
  pending_time: Float
  show_time: Float
  speed_x: Float
}

# order by stddev_samp() on columns of table "game.settings"
input game_settings_stddev_samp_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# aggregate sum on columns
type game_settings_sum_fields {
  id: bigint
  pending_time: Int
  show_time: Int
  speed_x: Int
}

# order by sum() on columns of table "game.settings"
input game_settings_sum_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# update columns of table "game.settings"
enum game_settings_update_column {
  # column name
  id

  # column name
  pending_time

  # column name
  show_time

  # column name
  speed_x
}

# aggregate var_pop on columns
type game_settings_var_pop_fields {
  id: Float
  pending_time: Float
  show_time: Float
  speed_x: Float
}

# order by var_pop() on columns of table "game.settings"
input game_settings_var_pop_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# aggregate var_samp on columns
type game_settings_var_samp_fields {
  id: Float
  pending_time: Float
  show_time: Float
  speed_x: Float
}

# order by var_samp() on columns of table "game.settings"
input game_settings_var_samp_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# aggregate variance on columns
type game_settings_variance_fields {
  id: Float
  pending_time: Float
  show_time: Float
  speed_x: Float
}

# order by variance() on columns of table "game.settings"
input game_settings_variance_order_by {
  id: order_by
  pending_time: order_by
  show_time: order_by
  speed_x: order_by
}

# columns and relationships of "game.view_active_bet"
type game_view_active_bet {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# aggregated selection of "game.view_active_bet"
type game_view_active_bet_aggregate {
  aggregate: game_view_active_bet_aggregate_fields
  nodes: [game_view_active_bet!]!
}

# aggregate fields of "game.view_active_bet"
type game_view_active_bet_aggregate_fields {
  avg: game_view_active_bet_avg_fields
  count(columns: [game_view_active_bet_select_column!], distinct: Boolean): Int
  max: game_view_active_bet_max_fields
  min: game_view_active_bet_min_fields
  stddev: game_view_active_bet_stddev_fields
  stddev_pop: game_view_active_bet_stddev_pop_fields
  stddev_samp: game_view_active_bet_stddev_samp_fields
  sum: game_view_active_bet_sum_fields
  var_pop: game_view_active_bet_var_pop_fields
  var_samp: game_view_active_bet_var_samp_fields
  variance: game_view_active_bet_variance_fields
}

# order by aggregate values of table "game.view_active_bet"
input game_view_active_bet_aggregate_order_by {
  avg: game_view_active_bet_avg_order_by
  count: order_by
  max: game_view_active_bet_max_order_by
  min: game_view_active_bet_min_order_by
  stddev: game_view_active_bet_stddev_order_by
  stddev_pop: game_view_active_bet_stddev_pop_order_by
  stddev_samp: game_view_active_bet_stddev_samp_order_by
  sum: game_view_active_bet_sum_order_by
  var_pop: game_view_active_bet_var_pop_order_by
  var_samp: game_view_active_bet_var_samp_order_by
  variance: game_view_active_bet_variance_order_by
}

# input type for inserting array relation for remote table "game.view_active_bet"
input game_view_active_bet_arr_rel_insert_input {
  data: [game_view_active_bet_insert_input!]!
}

# aggregate avg on columns
type game_view_active_bet_avg_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by avg() on columns of table "game.view_active_bet"
input game_view_active_bet_avg_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# Boolean expression to filter rows from the table "game.view_active_bet". All fields are combined with a logical 'AND'.
input game_view_active_bet_bool_exp {
  _and: [game_view_active_bet_bool_exp]
  _not: game_view_active_bet_bool_exp
  _or: [game_view_active_bet_bool_exp]
  id: bigint_comparison_exp
  money: Int_comparison_exp
  round_id: bigint_comparison_exp
  user_id: bigint_comparison_exp
}

# input type for incrementing integer column in table "game.view_active_bet"
input game_view_active_bet_inc_input {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# input type for inserting data into table "game.view_active_bet"
input game_view_active_bet_insert_input {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# aggregate max on columns
type game_view_active_bet_max_fields {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# order by max() on columns of table "game.view_active_bet"
input game_view_active_bet_max_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate min on columns
type game_view_active_bet_min_fields {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# order by min() on columns of table "game.view_active_bet"
input game_view_active_bet_min_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# response of any mutation on the table "game.view_active_bet"
type game_view_active_bet_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_view_active_bet!]!
}

# input type for inserting object relation for remote table "game.view_active_bet"
input game_view_active_bet_obj_rel_insert_input {
  data: game_view_active_bet_insert_input!
}

# ordering options when selecting data from "game.view_active_bet"
input game_view_active_bet_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# select columns of table "game.view_active_bet"
enum game_view_active_bet_select_column {
  # column name
  id

  # column name
  money

  # column name
  round_id

  # column name
  user_id
}

# input type for updating data in table "game.view_active_bet"
input game_view_active_bet_set_input {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# aggregate stddev on columns
type game_view_active_bet_stddev_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by stddev() on columns of table "game.view_active_bet"
input game_view_active_bet_stddev_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate stddev_pop on columns
type game_view_active_bet_stddev_pop_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by stddev_pop() on columns of table "game.view_active_bet"
input game_view_active_bet_stddev_pop_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate stddev_samp on columns
type game_view_active_bet_stddev_samp_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by stddev_samp() on columns of table "game.view_active_bet"
input game_view_active_bet_stddev_samp_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate sum on columns
type game_view_active_bet_sum_fields {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# order by sum() on columns of table "game.view_active_bet"
input game_view_active_bet_sum_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate var_pop on columns
type game_view_active_bet_var_pop_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by var_pop() on columns of table "game.view_active_bet"
input game_view_active_bet_var_pop_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate var_samp on columns
type game_view_active_bet_var_samp_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by var_samp() on columns of table "game.view_active_bet"
input game_view_active_bet_var_samp_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate variance on columns
type game_view_active_bet_variance_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by variance() on columns of table "game.view_active_bet"
input game_view_active_bet_variance_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# columns and relationships of "game.view_active_round"
type game_view_active_round {
  created_at: timestamptz
  id: bigint
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  status: String
  x: Int
}

# aggregated selection of "game.view_active_round"
type game_view_active_round_aggregate {
  aggregate: game_view_active_round_aggregate_fields
  nodes: [game_view_active_round!]!
}

# aggregate fields of "game.view_active_round"
type game_view_active_round_aggregate_fields {
  avg: game_view_active_round_avg_fields
  count(columns: [game_view_active_round_select_column!], distinct: Boolean): Int
  max: game_view_active_round_max_fields
  min: game_view_active_round_min_fields
  stddev: game_view_active_round_stddev_fields
  stddev_pop: game_view_active_round_stddev_pop_fields
  stddev_samp: game_view_active_round_stddev_samp_fields
  sum: game_view_active_round_sum_fields
  var_pop: game_view_active_round_var_pop_fields
  var_samp: game_view_active_round_var_samp_fields
  variance: game_view_active_round_variance_fields
}

# order by aggregate values of table "game.view_active_round"
input game_view_active_round_aggregate_order_by {
  avg: game_view_active_round_avg_order_by
  count: order_by
  max: game_view_active_round_max_order_by
  min: game_view_active_round_min_order_by
  stddev: game_view_active_round_stddev_order_by
  stddev_pop: game_view_active_round_stddev_pop_order_by
  stddev_samp: game_view_active_round_stddev_samp_order_by
  sum: game_view_active_round_sum_order_by
  var_pop: game_view_active_round_var_pop_order_by
  var_samp: game_view_active_round_var_samp_order_by
  variance: game_view_active_round_variance_order_by
}

# input type for inserting array relation for remote table "game.view_active_round"
input game_view_active_round_arr_rel_insert_input {
  data: [game_view_active_round_insert_input!]!
}

# aggregate avg on columns
type game_view_active_round_avg_fields {
  id: Float
  x: Float
}

# order by avg() on columns of table "game.view_active_round"
input game_view_active_round_avg_order_by {
  id: order_by
  x: order_by
}

# Boolean expression to filter rows from the table "game.view_active_round". All fields are combined with a logical 'AND'.
input game_view_active_round_bool_exp {
  _and: [game_view_active_round_bool_exp]
  _not: game_view_active_round_bool_exp
  _or: [game_view_active_round_bool_exp]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  start_pending_at: timestamptz_comparison_exp
  start_playing_at: timestamptz_comparison_exp
  start_show_at: timestamptz_comparison_exp
  status: String_comparison_exp
  x: Int_comparison_exp
}

# input type for incrementing integer column in table "game.view_active_round"
input game_view_active_round_inc_input {
  id: bigint
  x: Int
}

# input type for inserting data into table "game.view_active_round"
input game_view_active_round_insert_input {
  created_at: timestamptz
  id: bigint
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  status: String
  x: Int
}

# aggregate max on columns
type game_view_active_round_max_fields {
  created_at: timestamptz
  id: bigint
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  status: String
  x: Int
}

# order by max() on columns of table "game.view_active_round"
input game_view_active_round_max_order_by {
  created_at: order_by
  id: order_by
  start_pending_at: order_by
  start_playing_at: order_by
  start_show_at: order_by
  status: order_by
  x: order_by
}

# aggregate min on columns
type game_view_active_round_min_fields {
  created_at: timestamptz
  id: bigint
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  status: String
  x: Int
}

# order by min() on columns of table "game.view_active_round"
input game_view_active_round_min_order_by {
  created_at: order_by
  id: order_by
  start_pending_at: order_by
  start_playing_at: order_by
  start_show_at: order_by
  status: order_by
  x: order_by
}

# response of any mutation on the table "game.view_active_round"
type game_view_active_round_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_view_active_round!]!
}

# input type for inserting object relation for remote table "game.view_active_round"
input game_view_active_round_obj_rel_insert_input {
  data: game_view_active_round_insert_input!
}

# ordering options when selecting data from "game.view_active_round"
input game_view_active_round_order_by {
  created_at: order_by
  id: order_by
  start_pending_at: order_by
  start_playing_at: order_by
  start_show_at: order_by
  status: order_by
  x: order_by
}

# select columns of table "game.view_active_round"
enum game_view_active_round_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  start_pending_at

  # column name
  start_playing_at

  # column name
  start_show_at

  # column name
  status

  # column name
  x
}

# input type for updating data in table "game.view_active_round"
input game_view_active_round_set_input {
  created_at: timestamptz
  id: bigint
  start_pending_at: timestamptz
  start_playing_at: timestamptz
  start_show_at: timestamptz
  status: String
  x: Int
}

# aggregate stddev on columns
type game_view_active_round_stddev_fields {
  id: Float
  x: Float
}

# order by stddev() on columns of table "game.view_active_round"
input game_view_active_round_stddev_order_by {
  id: order_by
  x: order_by
}

# aggregate stddev_pop on columns
type game_view_active_round_stddev_pop_fields {
  id: Float
  x: Float
}

# order by stddev_pop() on columns of table "game.view_active_round"
input game_view_active_round_stddev_pop_order_by {
  id: order_by
  x: order_by
}

# aggregate stddev_samp on columns
type game_view_active_round_stddev_samp_fields {
  id: Float
  x: Float
}

# order by stddev_samp() on columns of table "game.view_active_round"
input game_view_active_round_stddev_samp_order_by {
  id: order_by
  x: order_by
}

# aggregate sum on columns
type game_view_active_round_sum_fields {
  id: bigint
  x: Int
}

# order by sum() on columns of table "game.view_active_round"
input game_view_active_round_sum_order_by {
  id: order_by
  x: order_by
}

# aggregate var_pop on columns
type game_view_active_round_var_pop_fields {
  id: Float
  x: Float
}

# order by var_pop() on columns of table "game.view_active_round"
input game_view_active_round_var_pop_order_by {
  id: order_by
  x: order_by
}

# aggregate var_samp on columns
type game_view_active_round_var_samp_fields {
  id: Float
  x: Float
}

# order by var_samp() on columns of table "game.view_active_round"
input game_view_active_round_var_samp_order_by {
  id: order_by
  x: order_by
}

# aggregate variance on columns
type game_view_active_round_variance_fields {
  id: Float
  x: Float
}

# order by variance() on columns of table "game.view_active_round"
input game_view_active_round_variance_order_by {
  id: order_by
  x: order_by
}

# columns and relationships of "game.view_my_item"
type game_view_my_item {
  created_at: timestamptz
  id: bigint

  # An object relationship
  item_data: game_item_data
  item_data_id: bigint

  # An object relationship
  user: user
  user_id: bigint
}

# aggregated selection of "game.view_my_item"
type game_view_my_item_aggregate {
  aggregate: game_view_my_item_aggregate_fields
  nodes: [game_view_my_item!]!
}

# aggregate fields of "game.view_my_item"
type game_view_my_item_aggregate_fields {
  avg: game_view_my_item_avg_fields
  count(columns: [game_view_my_item_select_column!], distinct: Boolean): Int
  max: game_view_my_item_max_fields
  min: game_view_my_item_min_fields
  stddev: game_view_my_item_stddev_fields
  stddev_pop: game_view_my_item_stddev_pop_fields
  stddev_samp: game_view_my_item_stddev_samp_fields
  sum: game_view_my_item_sum_fields
  var_pop: game_view_my_item_var_pop_fields
  var_samp: game_view_my_item_var_samp_fields
  variance: game_view_my_item_variance_fields
}

# order by aggregate values of table "game.view_my_item"
input game_view_my_item_aggregate_order_by {
  avg: game_view_my_item_avg_order_by
  count: order_by
  max: game_view_my_item_max_order_by
  min: game_view_my_item_min_order_by
  stddev: game_view_my_item_stddev_order_by
  stddev_pop: game_view_my_item_stddev_pop_order_by
  stddev_samp: game_view_my_item_stddev_samp_order_by
  sum: game_view_my_item_sum_order_by
  var_pop: game_view_my_item_var_pop_order_by
  var_samp: game_view_my_item_var_samp_order_by
  variance: game_view_my_item_variance_order_by
}

# input type for inserting array relation for remote table "game.view_my_item"
input game_view_my_item_arr_rel_insert_input {
  data: [game_view_my_item_insert_input!]!
}

# aggregate avg on columns
type game_view_my_item_avg_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by avg() on columns of table "game.view_my_item"
input game_view_my_item_avg_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# Boolean expression to filter rows from the table "game.view_my_item". All fields are combined with a logical 'AND'.
input game_view_my_item_bool_exp {
  _and: [game_view_my_item_bool_exp]
  _not: game_view_my_item_bool_exp
  _or: [game_view_my_item_bool_exp]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  item_data: game_item_data_bool_exp
  item_data_id: bigint_comparison_exp
  user: user_bool_exp
  user_id: bigint_comparison_exp
}

# input type for incrementing integer column in table "game.view_my_item"
input game_view_my_item_inc_input {
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# input type for inserting data into table "game.view_my_item"
input game_view_my_item_insert_input {
  created_at: timestamptz
  id: bigint
  item_data: game_item_data_obj_rel_insert_input
  item_data_id: bigint
  user: user_obj_rel_insert_input
  user_id: bigint
}

# aggregate max on columns
type game_view_my_item_max_fields {
  created_at: timestamptz
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# order by max() on columns of table "game.view_my_item"
input game_view_my_item_max_order_by {
  created_at: order_by
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate min on columns
type game_view_my_item_min_fields {
  created_at: timestamptz
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# order by min() on columns of table "game.view_my_item"
input game_view_my_item_min_order_by {
  created_at: order_by
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# response of any mutation on the table "game.view_my_item"
type game_view_my_item_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [game_view_my_item!]!
}

# input type for inserting object relation for remote table "game.view_my_item"
input game_view_my_item_obj_rel_insert_input {
  data: game_view_my_item_insert_input!
}

# ordering options when selecting data from "game.view_my_item"
input game_view_my_item_order_by {
  created_at: order_by
  id: order_by
  item_data: game_item_data_order_by
  item_data_id: order_by
  user: user_order_by
  user_id: order_by
}

# select columns of table "game.view_my_item"
enum game_view_my_item_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  item_data_id

  # column name
  user_id
}

# input type for updating data in table "game.view_my_item"
input game_view_my_item_set_input {
  created_at: timestamptz
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# aggregate stddev on columns
type game_view_my_item_stddev_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by stddev() on columns of table "game.view_my_item"
input game_view_my_item_stddev_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate stddev_pop on columns
type game_view_my_item_stddev_pop_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by stddev_pop() on columns of table "game.view_my_item"
input game_view_my_item_stddev_pop_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate stddev_samp on columns
type game_view_my_item_stddev_samp_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by stddev_samp() on columns of table "game.view_my_item"
input game_view_my_item_stddev_samp_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate sum on columns
type game_view_my_item_sum_fields {
  id: bigint
  item_data_id: bigint
  user_id: bigint
}

# order by sum() on columns of table "game.view_my_item"
input game_view_my_item_sum_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate var_pop on columns
type game_view_my_item_var_pop_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by var_pop() on columns of table "game.view_my_item"
input game_view_my_item_var_pop_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate var_samp on columns
type game_view_my_item_var_samp_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by var_samp() on columns of table "game.view_my_item"
input game_view_my_item_var_samp_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

# aggregate variance on columns
type game_view_my_item_variance_fields {
  id: Float
  item_data_id: Float
  user_id: Float
}

# order by variance() on columns of table "game.view_my_item"
input game_view_my_item_variance_order_by {
  id: order_by
  item_data_id: order_by
  user_id: order_by
}

type Inp {
  id: Int!
}

input Input {
  id: Int!
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar json

# expression to compare columns of type json. All fields are combined with logical 'AND'.
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

type Lol {
  id: Int!
}

type MakeBetOutput {
  id: bigint!
}

type MoneyMinusOutput {
  money: bigint
}

type MoneyPlusOutput {
  money: bigint
}

# mutation root
type mutation_root {
  # perform the action: "buy_item"
  buy_item(item_data_id: bigint!): BuyItemOutput

  # perform the action: "clear_items_data"
  clear_items_data: Result

  # delete data from the table: "chat.message"
  delete_chat_message(
    # filter the rows which have to be deleted
    where: chat_message_bool_exp!
  ): chat_message_mutation_response

  # delete single row from the table: "chat.message"
  delete_chat_message_by_pk(id: bigint!): chat_message

  # delete data from the table: "game.bet"
  delete_game_bet(
    # filter the rows which have to be deleted
    where: game_bet_bool_exp!
  ): game_bet_mutation_response

  # delete single row from the table: "game.bet"
  delete_game_bet_by_pk(id: bigint!): game_bet

  # delete data from the table: "game.item"
  delete_game_item(
    # filter the rows which have to be deleted
    where: game_item_bool_exp!
  ): game_item_mutation_response

  # delete single row from the table: "game.item"
  delete_game_item_by_pk(id: bigint!): game_item

  # delete data from the table: "game.item_data"
  delete_game_item_data(
    # filter the rows which have to be deleted
    where: game_item_data_bool_exp!
  ): game_item_data_mutation_response

  # delete single row from the table: "game.item_data"
  delete_game_item_data_by_pk(id: bigint!): game_item_data

  # delete data from the table: "game.items_data_loader"
  delete_game_items_data_loader(
    # filter the rows which have to be deleted
    where: game_items_data_loader_bool_exp!
  ): game_items_data_loader_mutation_response

  # delete single row from the table: "game.items_data_loader"
  delete_game_items_data_loader_by_pk(id: bigint!): game_items_data_loader

  # delete data from the table: "game.round"
  delete_game_round(
    # filter the rows which have to be deleted
    where: game_round_bool_exp!
  ): game_round_mutation_response

  # delete single row from the table: "game.round"
  delete_game_round_by_pk(id: bigint!): game_round

  # delete data from the table: "game.round_status"
  delete_game_round_status(
    # filter the rows which have to be deleted
    where: game_round_status_bool_exp!
  ): game_round_status_mutation_response

  # delete single row from the table: "game.round_status"
  delete_game_round_status_by_pk(value: String!): game_round_status

  # delete data from the table: "game.settings"
  delete_game_settings(
    # filter the rows which have to be deleted
    where: game_settings_bool_exp!
  ): game_settings_mutation_response

  # delete single row from the table: "game.settings"
  delete_game_settings_by_pk(id: bigint!): game_settings

  # delete data from the table: "game.view_active_bet"
  delete_game_view_active_bet(
    # filter the rows which have to be deleted
    where: game_view_active_bet_bool_exp!
  ): game_view_active_bet_mutation_response

  # delete data from the table: "game.view_active_round"
  delete_game_view_active_round(
    # filter the rows which have to be deleted
    where: game_view_active_round_bool_exp!
  ): game_view_active_round_mutation_response

  # delete data from the table: "game.view_my_item"
  delete_game_view_my_item(
    # filter the rows which have to be deleted
    where: game_view_my_item_bool_exp!
  ): game_view_my_item_mutation_response

  # delete data from the table: "simulation.bank"
  delete_simulation_bank(
    # filter the rows which have to be deleted
    where: simulation_bank_bool_exp!
  ): simulation_bank_mutation_response

  # delete single row from the table: "simulation.bank"
  delete_simulation_bank_by_pk(id: bigint!): simulation_bank

  # delete data from the table: "simulation.bet"
  delete_simulation_bet(
    # filter the rows which have to be deleted
    where: simulation_bet_bool_exp!
  ): simulation_bet_mutation_response

  # delete single row from the table: "simulation.bet"
  delete_simulation_bet_by_pk(id: bigint!): simulation_bet

  # delete data from the table: "simulation.round"
  delete_simulation_round(
    # filter the rows which have to be deleted
    where: simulation_round_bool_exp!
  ): simulation_round_mutation_response

  # delete single row from the table: "simulation.round"
  delete_simulation_round_by_pk(id: bigint!): simulation_round

  # delete data from the table: "simulation.round_status"
  delete_simulation_round_status(
    # filter the rows which have to be deleted
    where: simulation_round_status_bool_exp!
  ): simulation_round_status_mutation_response

  # delete single row from the table: "simulation.round_status"
  delete_simulation_round_status_by_pk(value: String!): simulation_round_status

  # delete data from the table: "simulation.user"
  delete_simulation_user(
    # filter the rows which have to be deleted
    where: simulation_user_bool_exp!
  ): simulation_user_mutation_response

  # delete single row from the table: "simulation.user"
  delete_simulation_user_by_pk(id: bigint!): simulation_user

  # delete data from the table: "user"
  delete_user(
    # filter the rows which have to be deleted
    where: user_bool_exp!
  ): user_mutation_response

  # delete single row from the table: "user"
  delete_user_by_pk(id: bigint!): user

  # delete data from the table: "user_role"
  delete_user_role(
    # filter the rows which have to be deleted
    where: user_role_bool_exp!
  ): user_role_mutation_response

  # delete single row from the table: "user_role"
  delete_user_role_by_pk(value: String!): user_role

  # delete data from the table: "view_current_user"
  delete_view_current_user(
    # filter the rows which have to be deleted
    where: view_current_user_bool_exp!
  ): view_current_user_mutation_response

  # perform the action: "game_make_bet"
  game_make_bet(items_ids: [bigint!]!): Result!

  # insert data into the table: "chat.message"
  insert_chat_message(
    # the rows to be inserted
    objects: [chat_message_insert_input!]!

    # on conflict condition
    on_conflict: chat_message_on_conflict
  ): chat_message_mutation_response

  # insert a single row into the table: "chat.message"
  insert_chat_message_one(
    # the row to be inserted
    object: chat_message_insert_input!

    # on conflict condition
    on_conflict: chat_message_on_conflict
  ): chat_message

  # insert data into the table: "game.bet"
  insert_game_bet(
    # the rows to be inserted
    objects: [game_bet_insert_input!]!

    # on conflict condition
    on_conflict: game_bet_on_conflict
  ): game_bet_mutation_response

  # insert a single row into the table: "game.bet"
  insert_game_bet_one(
    # the row to be inserted
    object: game_bet_insert_input!

    # on conflict condition
    on_conflict: game_bet_on_conflict
  ): game_bet

  # insert data into the table: "game.item"
  insert_game_item(
    # the rows to be inserted
    objects: [game_item_insert_input!]!

    # on conflict condition
    on_conflict: game_item_on_conflict
  ): game_item_mutation_response

  # insert data into the table: "game.item_data"
  insert_game_item_data(
    # the rows to be inserted
    objects: [game_item_data_insert_input!]!

    # on conflict condition
    on_conflict: game_item_data_on_conflict
  ): game_item_data_mutation_response

  # insert a single row into the table: "game.item_data"
  insert_game_item_data_one(
    # the row to be inserted
    object: game_item_data_insert_input!

    # on conflict condition
    on_conflict: game_item_data_on_conflict
  ): game_item_data

  # insert a single row into the table: "game.item"
  insert_game_item_one(
    # the row to be inserted
    object: game_item_insert_input!

    # on conflict condition
    on_conflict: game_item_on_conflict
  ): game_item

  # insert data into the table: "game.items_data_loader"
  insert_game_items_data_loader(
    # the rows to be inserted
    objects: [game_items_data_loader_insert_input!]!

    # on conflict condition
    on_conflict: game_items_data_loader_on_conflict
  ): game_items_data_loader_mutation_response

  # insert a single row into the table: "game.items_data_loader"
  insert_game_items_data_loader_one(
    # the row to be inserted
    object: game_items_data_loader_insert_input!

    # on conflict condition
    on_conflict: game_items_data_loader_on_conflict
  ): game_items_data_loader

  # insert data into the table: "game.round"
  insert_game_round(
    # the rows to be inserted
    objects: [game_round_insert_input!]!

    # on conflict condition
    on_conflict: game_round_on_conflict
  ): game_round_mutation_response

  # insert a single row into the table: "game.round"
  insert_game_round_one(
    # the row to be inserted
    object: game_round_insert_input!

    # on conflict condition
    on_conflict: game_round_on_conflict
  ): game_round

  # insert data into the table: "game.round_status"
  insert_game_round_status(
    # the rows to be inserted
    objects: [game_round_status_insert_input!]!

    # on conflict condition
    on_conflict: game_round_status_on_conflict
  ): game_round_status_mutation_response

  # insert a single row into the table: "game.round_status"
  insert_game_round_status_one(
    # the row to be inserted
    object: game_round_status_insert_input!

    # on conflict condition
    on_conflict: game_round_status_on_conflict
  ): game_round_status

  # insert data into the table: "game.settings"
  insert_game_settings(
    # the rows to be inserted
    objects: [game_settings_insert_input!]!

    # on conflict condition
    on_conflict: game_settings_on_conflict
  ): game_settings_mutation_response

  # insert a single row into the table: "game.settings"
  insert_game_settings_one(
    # the row to be inserted
    object: game_settings_insert_input!

    # on conflict condition
    on_conflict: game_settings_on_conflict
  ): game_settings

  # insert data into the table: "game.view_active_bet"
  insert_game_view_active_bet(
    # the rows to be inserted
    objects: [game_view_active_bet_insert_input!]!
  ): game_view_active_bet_mutation_response

  # insert a single row into the table: "game.view_active_bet"
  insert_game_view_active_bet_one(
    # the row to be inserted
    object: game_view_active_bet_insert_input!
  ): game_view_active_bet

  # insert data into the table: "game.view_active_round"
  insert_game_view_active_round(
    # the rows to be inserted
    objects: [game_view_active_round_insert_input!]!
  ): game_view_active_round_mutation_response

  # insert a single row into the table: "game.view_active_round"
  insert_game_view_active_round_one(
    # the row to be inserted
    object: game_view_active_round_insert_input!
  ): game_view_active_round

  # insert data into the table: "game.view_my_item"
  insert_game_view_my_item(
    # the rows to be inserted
    objects: [game_view_my_item_insert_input!]!
  ): game_view_my_item_mutation_response

  # insert a single row into the table: "game.view_my_item"
  insert_game_view_my_item_one(
    # the row to be inserted
    object: game_view_my_item_insert_input!
  ): game_view_my_item

  # insert data into the table: "simulation.bank"
  insert_simulation_bank(
    # the rows to be inserted
    objects: [simulation_bank_insert_input!]!

    # on conflict condition
    on_conflict: simulation_bank_on_conflict
  ): simulation_bank_mutation_response

  # insert a single row into the table: "simulation.bank"
  insert_simulation_bank_one(
    # the row to be inserted
    object: simulation_bank_insert_input!

    # on conflict condition
    on_conflict: simulation_bank_on_conflict
  ): simulation_bank

  # insert data into the table: "simulation.bet"
  insert_simulation_bet(
    # the rows to be inserted
    objects: [simulation_bet_insert_input!]!

    # on conflict condition
    on_conflict: simulation_bet_on_conflict
  ): simulation_bet_mutation_response

  # insert a single row into the table: "simulation.bet"
  insert_simulation_bet_one(
    # the row to be inserted
    object: simulation_bet_insert_input!

    # on conflict condition
    on_conflict: simulation_bet_on_conflict
  ): simulation_bet

  # insert data into the table: "simulation.round"
  insert_simulation_round(
    # the rows to be inserted
    objects: [simulation_round_insert_input!]!

    # on conflict condition
    on_conflict: simulation_round_on_conflict
  ): simulation_round_mutation_response

  # insert a single row into the table: "simulation.round"
  insert_simulation_round_one(
    # the row to be inserted
    object: simulation_round_insert_input!

    # on conflict condition
    on_conflict: simulation_round_on_conflict
  ): simulation_round

  # insert data into the table: "simulation.round_status"
  insert_simulation_round_status(
    # the rows to be inserted
    objects: [simulation_round_status_insert_input!]!

    # on conflict condition
    on_conflict: simulation_round_status_on_conflict
  ): simulation_round_status_mutation_response

  # insert a single row into the table: "simulation.round_status"
  insert_simulation_round_status_one(
    # the row to be inserted
    object: simulation_round_status_insert_input!

    # on conflict condition
    on_conflict: simulation_round_status_on_conflict
  ): simulation_round_status

  # insert data into the table: "simulation.user"
  insert_simulation_user(
    # the rows to be inserted
    objects: [simulation_user_insert_input!]!

    # on conflict condition
    on_conflict: simulation_user_on_conflict
  ): simulation_user_mutation_response

  # insert a single row into the table: "simulation.user"
  insert_simulation_user_one(
    # the row to be inserted
    object: simulation_user_insert_input!

    # on conflict condition
    on_conflict: simulation_user_on_conflict
  ): simulation_user

  # insert data into the table: "user"
  insert_user(
    # the rows to be inserted
    objects: [user_insert_input!]!

    # on conflict condition
    on_conflict: user_on_conflict
  ): user_mutation_response

  # insert a single row into the table: "user"
  insert_user_one(
    # the row to be inserted
    object: user_insert_input!

    # on conflict condition
    on_conflict: user_on_conflict
  ): user

  # insert data into the table: "user_role"
  insert_user_role(
    # the rows to be inserted
    objects: [user_role_insert_input!]!

    # on conflict condition
    on_conflict: user_role_on_conflict
  ): user_role_mutation_response

  # insert a single row into the table: "user_role"
  insert_user_role_one(
    # the row to be inserted
    object: user_role_insert_input!

    # on conflict condition
    on_conflict: user_role_on_conflict
  ): user_role

  # insert data into the table: "view_current_user"
  insert_view_current_user(
    # the rows to be inserted
    objects: [view_current_user_insert_input!]!
  ): view_current_user_mutation_response

  # insert a single row into the table: "view_current_user"
  insert_view_current_user_one(
    # the row to be inserted
    object: view_current_user_insert_input!
  ): view_current_user

  # perform the action: "money_minus"
  money_minus: MoneyMinusOutput

  # perform the action: "money_plus"
  money_plus: MoneyPlusOutput

  # perform the action: "sell_item"
  sell_item(item_id: bigint!): Result

  # perform the action: "stop_update_items_data"
  stop_update_items_data: Result

  # update data of the table: "chat.message"
  update_chat_message(
    # increments the integer columns with given value of the filtered values
    _inc: chat_message_inc_input

    # sets the columns of the filtered rows to the given values
    _set: chat_message_set_input

    # filter the rows which have to be updated
    where: chat_message_bool_exp!
  ): chat_message_mutation_response

  # update single row of the table: "chat.message"
  update_chat_message_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: chat_message_inc_input

    # sets the columns of the filtered rows to the given values
    _set: chat_message_set_input
    pk_columns: chat_message_pk_columns_input!
  ): chat_message

  # update data of the table: "game.bet"
  update_game_bet(
    # increments the integer columns with given value of the filtered values
    _inc: game_bet_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_bet_set_input

    # filter the rows which have to be updated
    where: game_bet_bool_exp!
  ): game_bet_mutation_response

  # update single row of the table: "game.bet"
  update_game_bet_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: game_bet_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_bet_set_input
    pk_columns: game_bet_pk_columns_input!
  ): game_bet

  # update data of the table: "game.item"
  update_game_item(
    # increments the integer columns with given value of the filtered values
    _inc: game_item_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_item_set_input

    # filter the rows which have to be updated
    where: game_item_bool_exp!
  ): game_item_mutation_response

  # update single row of the table: "game.item"
  update_game_item_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: game_item_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_item_set_input
    pk_columns: game_item_pk_columns_input!
  ): game_item

  # update data of the table: "game.item_data"
  update_game_item_data(
    # increments the integer columns with given value of the filtered values
    _inc: game_item_data_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_item_data_set_input

    # filter the rows which have to be updated
    where: game_item_data_bool_exp!
  ): game_item_data_mutation_response

  # update single row of the table: "game.item_data"
  update_game_item_data_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: game_item_data_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_item_data_set_input
    pk_columns: game_item_data_pk_columns_input!
  ): game_item_data

  # update data of the table: "game.items_data_loader"
  update_game_items_data_loader(
    # increments the integer columns with given value of the filtered values
    _inc: game_items_data_loader_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_items_data_loader_set_input

    # filter the rows which have to be updated
    where: game_items_data_loader_bool_exp!
  ): game_items_data_loader_mutation_response

  # update single row of the table: "game.items_data_loader"
  update_game_items_data_loader_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: game_items_data_loader_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_items_data_loader_set_input
    pk_columns: game_items_data_loader_pk_columns_input!
  ): game_items_data_loader

  # update data of the table: "game.round"
  update_game_round(
    # increments the integer columns with given value of the filtered values
    _inc: game_round_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_round_set_input

    # filter the rows which have to be updated
    where: game_round_bool_exp!
  ): game_round_mutation_response

  # update single row of the table: "game.round"
  update_game_round_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: game_round_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_round_set_input
    pk_columns: game_round_pk_columns_input!
  ): game_round

  # update data of the table: "game.round_status"
  update_game_round_status(
    # sets the columns of the filtered rows to the given values
    _set: game_round_status_set_input

    # filter the rows which have to be updated
    where: game_round_status_bool_exp!
  ): game_round_status_mutation_response

  # update single row of the table: "game.round_status"
  update_game_round_status_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: game_round_status_set_input
    pk_columns: game_round_status_pk_columns_input!
  ): game_round_status

  # update data of the table: "game.settings"
  update_game_settings(
    # increments the integer columns with given value of the filtered values
    _inc: game_settings_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_settings_set_input

    # filter the rows which have to be updated
    where: game_settings_bool_exp!
  ): game_settings_mutation_response

  # update single row of the table: "game.settings"
  update_game_settings_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: game_settings_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_settings_set_input
    pk_columns: game_settings_pk_columns_input!
  ): game_settings

  # update data of the table: "game.view_active_bet"
  update_game_view_active_bet(
    # increments the integer columns with given value of the filtered values
    _inc: game_view_active_bet_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_view_active_bet_set_input

    # filter the rows which have to be updated
    where: game_view_active_bet_bool_exp!
  ): game_view_active_bet_mutation_response

  # update data of the table: "game.view_active_round"
  update_game_view_active_round(
    # increments the integer columns with given value of the filtered values
    _inc: game_view_active_round_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_view_active_round_set_input

    # filter the rows which have to be updated
    where: game_view_active_round_bool_exp!
  ): game_view_active_round_mutation_response

  # update data of the table: "game.view_my_item"
  update_game_view_my_item(
    # increments the integer columns with given value of the filtered values
    _inc: game_view_my_item_inc_input

    # sets the columns of the filtered rows to the given values
    _set: game_view_my_item_set_input

    # filter the rows which have to be updated
    where: game_view_my_item_bool_exp!
  ): game_view_my_item_mutation_response

  # perform the action: "update_items_data"
  update_items_data: Result

  # update data of the table: "simulation.bank"
  update_simulation_bank(
    # increments the integer columns with given value of the filtered values
    _inc: simulation_bank_inc_input

    # sets the columns of the filtered rows to the given values
    _set: simulation_bank_set_input

    # filter the rows which have to be updated
    where: simulation_bank_bool_exp!
  ): simulation_bank_mutation_response

  # update single row of the table: "simulation.bank"
  update_simulation_bank_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: simulation_bank_inc_input

    # sets the columns of the filtered rows to the given values
    _set: simulation_bank_set_input
    pk_columns: simulation_bank_pk_columns_input!
  ): simulation_bank

  # update data of the table: "simulation.bet"
  update_simulation_bet(
    # increments the integer columns with given value of the filtered values
    _inc: simulation_bet_inc_input

    # sets the columns of the filtered rows to the given values
    _set: simulation_bet_set_input

    # filter the rows which have to be updated
    where: simulation_bet_bool_exp!
  ): simulation_bet_mutation_response

  # update single row of the table: "simulation.bet"
  update_simulation_bet_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: simulation_bet_inc_input

    # sets the columns of the filtered rows to the given values
    _set: simulation_bet_set_input
    pk_columns: simulation_bet_pk_columns_input!
  ): simulation_bet

  # update data of the table: "simulation.round"
  update_simulation_round(
    # increments the integer columns with given value of the filtered values
    _inc: simulation_round_inc_input

    # sets the columns of the filtered rows to the given values
    _set: simulation_round_set_input

    # filter the rows which have to be updated
    where: simulation_round_bool_exp!
  ): simulation_round_mutation_response

  # update single row of the table: "simulation.round"
  update_simulation_round_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: simulation_round_inc_input

    # sets the columns of the filtered rows to the given values
    _set: simulation_round_set_input
    pk_columns: simulation_round_pk_columns_input!
  ): simulation_round

  # update data of the table: "simulation.round_status"
  update_simulation_round_status(
    # sets the columns of the filtered rows to the given values
    _set: simulation_round_status_set_input

    # filter the rows which have to be updated
    where: simulation_round_status_bool_exp!
  ): simulation_round_status_mutation_response

  # update single row of the table: "simulation.round_status"
  update_simulation_round_status_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: simulation_round_status_set_input
    pk_columns: simulation_round_status_pk_columns_input!
  ): simulation_round_status

  # update data of the table: "simulation.user"
  update_simulation_user(
    # increments the integer columns with given value of the filtered values
    _inc: simulation_user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: simulation_user_set_input

    # filter the rows which have to be updated
    where: simulation_user_bool_exp!
  ): simulation_user_mutation_response

  # update single row of the table: "simulation.user"
  update_simulation_user_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: simulation_user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: simulation_user_set_input
    pk_columns: simulation_user_pk_columns_input!
  ): simulation_user

  # update data of the table: "user"
  update_user(
    # increments the integer columns with given value of the filtered values
    _inc: user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: user_set_input

    # filter the rows which have to be updated
    where: user_bool_exp!
  ): user_mutation_response

  # update single row of the table: "user"
  update_user_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  # update data of the table: "user_role"
  update_user_role(
    # sets the columns of the filtered rows to the given values
    _set: user_role_set_input

    # filter the rows which have to be updated
    where: user_role_bool_exp!
  ): user_role_mutation_response

  # update single row of the table: "user_role"
  update_user_role_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: user_role_set_input
    pk_columns: user_role_pk_columns_input!
  ): user_role

  # update data of the table: "view_current_user"
  update_view_current_user(
    # increments the integer columns with given value of the filtered values
    _inc: view_current_user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: view_current_user_set_input

    # filter the rows which have to be updated
    where: view_current_user_bool_exp!
  ): view_current_user_mutation_response
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

type Output {
  money: Int!
}

# query root
type query_root {
  # fetch data from the table: "chat.message"
  chat_message(
    # distinct select on columns
    distinct_on: [chat_message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [chat_message_order_by!]

    # filter the rows returned
    where: chat_message_bool_exp
  ): [chat_message!]!

  # fetch aggregated fields from the table: "chat.message"
  chat_message_aggregate(
    # distinct select on columns
    distinct_on: [chat_message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [chat_message_order_by!]

    # filter the rows returned
    where: chat_message_bool_exp
  ): chat_message_aggregate!

  # fetch data from the table: "chat.message" using primary key columns
  chat_message_by_pk(id: bigint!): chat_message

  # fetch data from the table: "game.bet"
  game_bet(
    # distinct select on columns
    distinct_on: [game_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_bet_order_by!]

    # filter the rows returned
    where: game_bet_bool_exp
  ): [game_bet!]!

  # fetch aggregated fields from the table: "game.bet"
  game_bet_aggregate(
    # distinct select on columns
    distinct_on: [game_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_bet_order_by!]

    # filter the rows returned
    where: game_bet_bool_exp
  ): game_bet_aggregate!

  # fetch data from the table: "game.bet" using primary key columns
  game_bet_by_pk(id: bigint!): game_bet

  # fetch data from the table: "game.item"
  game_item(
    # distinct select on columns
    distinct_on: [game_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_item_order_by!]

    # filter the rows returned
    where: game_item_bool_exp
  ): [game_item!]!

  # fetch aggregated fields from the table: "game.item"
  game_item_aggregate(
    # distinct select on columns
    distinct_on: [game_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_item_order_by!]

    # filter the rows returned
    where: game_item_bool_exp
  ): game_item_aggregate!

  # fetch data from the table: "game.item" using primary key columns
  game_item_by_pk(id: bigint!): game_item

  # fetch data from the table: "game.item_data"
  game_item_data(
    # distinct select on columns
    distinct_on: [game_item_data_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_item_data_order_by!]

    # filter the rows returned
    where: game_item_data_bool_exp
  ): [game_item_data!]!

  # fetch aggregated fields from the table: "game.item_data"
  game_item_data_aggregate(
    # distinct select on columns
    distinct_on: [game_item_data_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_item_data_order_by!]

    # filter the rows returned
    where: game_item_data_bool_exp
  ): game_item_data_aggregate!

  # fetch data from the table: "game.item_data" using primary key columns
  game_item_data_by_pk(id: bigint!): game_item_data

  # fetch data from the table: "game.items_data_loader"
  game_items_data_loader(
    # distinct select on columns
    distinct_on: [game_items_data_loader_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_items_data_loader_order_by!]

    # filter the rows returned
    where: game_items_data_loader_bool_exp
  ): [game_items_data_loader!]!

  # fetch aggregated fields from the table: "game.items_data_loader"
  game_items_data_loader_aggregate(
    # distinct select on columns
    distinct_on: [game_items_data_loader_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_items_data_loader_order_by!]

    # filter the rows returned
    where: game_items_data_loader_bool_exp
  ): game_items_data_loader_aggregate!

  # fetch data from the table: "game.items_data_loader" using primary key columns
  game_items_data_loader_by_pk(id: bigint!): game_items_data_loader

  # fetch data from the table: "game.round"
  game_round(
    # distinct select on columns
    distinct_on: [game_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_round_order_by!]

    # filter the rows returned
    where: game_round_bool_exp
  ): [game_round!]!

  # fetch aggregated fields from the table: "game.round"
  game_round_aggregate(
    # distinct select on columns
    distinct_on: [game_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_round_order_by!]

    # filter the rows returned
    where: game_round_bool_exp
  ): game_round_aggregate!

  # fetch data from the table: "game.round" using primary key columns
  game_round_by_pk(id: bigint!): game_round

  # fetch data from the table: "game.round_status"
  game_round_status(
    # distinct select on columns
    distinct_on: [game_round_status_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_round_status_order_by!]

    # filter the rows returned
    where: game_round_status_bool_exp
  ): [game_round_status!]!

  # fetch aggregated fields from the table: "game.round_status"
  game_round_status_aggregate(
    # distinct select on columns
    distinct_on: [game_round_status_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_round_status_order_by!]

    # filter the rows returned
    where: game_round_status_bool_exp
  ): game_round_status_aggregate!

  # fetch data from the table: "game.round_status" using primary key columns
  game_round_status_by_pk(value: String!): game_round_status

  # fetch data from the table: "game.settings"
  game_settings(
    # distinct select on columns
    distinct_on: [game_settings_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_settings_order_by!]

    # filter the rows returned
    where: game_settings_bool_exp
  ): [game_settings!]!

  # fetch aggregated fields from the table: "game.settings"
  game_settings_aggregate(
    # distinct select on columns
    distinct_on: [game_settings_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_settings_order_by!]

    # filter the rows returned
    where: game_settings_bool_exp
  ): game_settings_aggregate!

  # fetch data from the table: "game.settings" using primary key columns
  game_settings_by_pk(id: bigint!): game_settings

  # fetch data from the table: "game.view_active_bet"
  game_view_active_bet(
    # distinct select on columns
    distinct_on: [game_view_active_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_active_bet_order_by!]

    # filter the rows returned
    where: game_view_active_bet_bool_exp
  ): [game_view_active_bet!]!

  # fetch aggregated fields from the table: "game.view_active_bet"
  game_view_active_bet_aggregate(
    # distinct select on columns
    distinct_on: [game_view_active_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_active_bet_order_by!]

    # filter the rows returned
    where: game_view_active_bet_bool_exp
  ): game_view_active_bet_aggregate!

  # fetch data from the table: "game.view_active_round"
  game_view_active_round(
    # distinct select on columns
    distinct_on: [game_view_active_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_active_round_order_by!]

    # filter the rows returned
    where: game_view_active_round_bool_exp
  ): [game_view_active_round!]!

  # fetch aggregated fields from the table: "game.view_active_round"
  game_view_active_round_aggregate(
    # distinct select on columns
    distinct_on: [game_view_active_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_active_round_order_by!]

    # filter the rows returned
    where: game_view_active_round_bool_exp
  ): game_view_active_round_aggregate!

  # fetch data from the table: "game.view_my_item"
  game_view_my_item(
    # distinct select on columns
    distinct_on: [game_view_my_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_my_item_order_by!]

    # filter the rows returned
    where: game_view_my_item_bool_exp
  ): [game_view_my_item!]!

  # fetch aggregated fields from the table: "game.view_my_item"
  game_view_my_item_aggregate(
    # distinct select on columns
    distinct_on: [game_view_my_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_my_item_order_by!]

    # filter the rows returned
    where: game_view_my_item_bool_exp
  ): game_view_my_item_aggregate!

  # fetch data from the table: "simulation.bank"
  simulation_bank(
    # distinct select on columns
    distinct_on: [simulation_bank_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_bank_order_by!]

    # filter the rows returned
    where: simulation_bank_bool_exp
  ): [simulation_bank!]!

  # fetch aggregated fields from the table: "simulation.bank"
  simulation_bank_aggregate(
    # distinct select on columns
    distinct_on: [simulation_bank_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_bank_order_by!]

    # filter the rows returned
    where: simulation_bank_bool_exp
  ): simulation_bank_aggregate!

  # fetch data from the table: "simulation.bank" using primary key columns
  simulation_bank_by_pk(id: bigint!): simulation_bank

  # fetch data from the table: "simulation.bet"
  simulation_bet(
    # distinct select on columns
    distinct_on: [simulation_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_bet_order_by!]

    # filter the rows returned
    where: simulation_bet_bool_exp
  ): [simulation_bet!]!

  # fetch aggregated fields from the table: "simulation.bet"
  simulation_bet_aggregate(
    # distinct select on columns
    distinct_on: [simulation_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_bet_order_by!]

    # filter the rows returned
    where: simulation_bet_bool_exp
  ): simulation_bet_aggregate!

  # fetch data from the table: "simulation.bet" using primary key columns
  simulation_bet_by_pk(id: bigint!): simulation_bet

  # fetch data from the table: "simulation.round"
  simulation_round(
    # distinct select on columns
    distinct_on: [simulation_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_round_order_by!]

    # filter the rows returned
    where: simulation_round_bool_exp
  ): [simulation_round!]!

  # fetch aggregated fields from the table: "simulation.round"
  simulation_round_aggregate(
    # distinct select on columns
    distinct_on: [simulation_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_round_order_by!]

    # filter the rows returned
    where: simulation_round_bool_exp
  ): simulation_round_aggregate!

  # fetch data from the table: "simulation.round" using primary key columns
  simulation_round_by_pk(id: bigint!): simulation_round

  # fetch data from the table: "simulation.round_status"
  simulation_round_status(
    # distinct select on columns
    distinct_on: [simulation_round_status_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_round_status_order_by!]

    # filter the rows returned
    where: simulation_round_status_bool_exp
  ): [simulation_round_status!]!

  # fetch aggregated fields from the table: "simulation.round_status"
  simulation_round_status_aggregate(
    # distinct select on columns
    distinct_on: [simulation_round_status_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_round_status_order_by!]

    # filter the rows returned
    where: simulation_round_status_bool_exp
  ): simulation_round_status_aggregate!

  # fetch data from the table: "simulation.round_status" using primary key columns
  simulation_round_status_by_pk(value: String!): simulation_round_status

  # fetch data from the table: "simulation.user"
  simulation_user(
    # distinct select on columns
    distinct_on: [simulation_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_user_order_by!]

    # filter the rows returned
    where: simulation_user_bool_exp
  ): [simulation_user!]!

  # fetch aggregated fields from the table: "simulation.user"
  simulation_user_aggregate(
    # distinct select on columns
    distinct_on: [simulation_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_user_order_by!]

    # filter the rows returned
    where: simulation_user_bool_exp
  ): simulation_user_aggregate!

  # fetch data from the table: "simulation.user" using primary key columns
  simulation_user_by_pk(id: bigint!): simulation_user

  # fetch data from the table: "user"
  user(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): [user!]!

  # fetch aggregated fields from the table: "user"
  user_aggregate(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): user_aggregate!

  # fetch data from the table: "user" using primary key columns
  user_by_pk(id: bigint!): user

  # fetch data from the table: "user_role"
  user_role(
    # distinct select on columns
    distinct_on: [user_role_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_role_order_by!]

    # filter the rows returned
    where: user_role_bool_exp
  ): [user_role!]!

  # fetch aggregated fields from the table: "user_role"
  user_role_aggregate(
    # distinct select on columns
    distinct_on: [user_role_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_role_order_by!]

    # filter the rows returned
    where: user_role_bool_exp
  ): user_role_aggregate!

  # fetch data from the table: "user_role" using primary key columns
  user_role_by_pk(value: String!): user_role

  # fetch data from the table: "view_current_user"
  view_current_user(
    # distinct select on columns
    distinct_on: [view_current_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [view_current_user_order_by!]

    # filter the rows returned
    where: view_current_user_bool_exp
  ): [view_current_user!]!

  # fetch aggregated fields from the table: "view_current_user"
  view_current_user_aggregate(
    # distinct select on columns
    distinct_on: [view_current_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [view_current_user_order_by!]

    # filter the rows returned
    where: view_current_user_bool_exp
  ): view_current_user_aggregate!
}

type Result {
  done: Boolean!
}

input SampleInput {
  password: String!
  username: String!
}

input SampleInputtttt {
  password: String!
  username: String!
}

type SampleInputttttpppp {
  id: Int!
}

type SampleOutput {
  accessToken: String!
}

type SellItemOutput {
  id: bigint!
}

type SendChatMessageOutput {
  id: Int!
}

input SendMessageInput {
  text: String!
}

type SendMessageOutput {
  id: bigint!
}

# columns and relationships of "simulation.bank"
type simulation_bank {
  id: bigint!
  money: bigint!
}

# aggregated selection of "simulation.bank"
type simulation_bank_aggregate {
  aggregate: simulation_bank_aggregate_fields
  nodes: [simulation_bank!]!
}

# aggregate fields of "simulation.bank"
type simulation_bank_aggregate_fields {
  avg: simulation_bank_avg_fields
  count(columns: [simulation_bank_select_column!], distinct: Boolean): Int
  max: simulation_bank_max_fields
  min: simulation_bank_min_fields
  stddev: simulation_bank_stddev_fields
  stddev_pop: simulation_bank_stddev_pop_fields
  stddev_samp: simulation_bank_stddev_samp_fields
  sum: simulation_bank_sum_fields
  var_pop: simulation_bank_var_pop_fields
  var_samp: simulation_bank_var_samp_fields
  variance: simulation_bank_variance_fields
}

# order by aggregate values of table "simulation.bank"
input simulation_bank_aggregate_order_by {
  avg: simulation_bank_avg_order_by
  count: order_by
  max: simulation_bank_max_order_by
  min: simulation_bank_min_order_by
  stddev: simulation_bank_stddev_order_by
  stddev_pop: simulation_bank_stddev_pop_order_by
  stddev_samp: simulation_bank_stddev_samp_order_by
  sum: simulation_bank_sum_order_by
  var_pop: simulation_bank_var_pop_order_by
  var_samp: simulation_bank_var_samp_order_by
  variance: simulation_bank_variance_order_by
}

# input type for inserting array relation for remote table "simulation.bank"
input simulation_bank_arr_rel_insert_input {
  data: [simulation_bank_insert_input!]!
  on_conflict: simulation_bank_on_conflict
}

# aggregate avg on columns
type simulation_bank_avg_fields {
  id: Float
  money: Float
}

# order by avg() on columns of table "simulation.bank"
input simulation_bank_avg_order_by {
  id: order_by
  money: order_by
}

# Boolean expression to filter rows from the table "simulation.bank". All fields are combined with a logical 'AND'.
input simulation_bank_bool_exp {
  _and: [simulation_bank_bool_exp]
  _not: simulation_bank_bool_exp
  _or: [simulation_bank_bool_exp]
  id: bigint_comparison_exp
  money: bigint_comparison_exp
}

# unique or primary key constraints on table "simulation.bank"
enum simulation_bank_constraint {
  # unique or primary key constraint
  simulation_bank_pkey
}

# input type for incrementing integer column in table "simulation.bank"
input simulation_bank_inc_input {
  id: bigint
  money: bigint
}

# input type for inserting data into table "simulation.bank"
input simulation_bank_insert_input {
  id: bigint
  money: bigint
}

# aggregate max on columns
type simulation_bank_max_fields {
  id: bigint
  money: bigint
}

# order by max() on columns of table "simulation.bank"
input simulation_bank_max_order_by {
  id: order_by
  money: order_by
}

# aggregate min on columns
type simulation_bank_min_fields {
  id: bigint
  money: bigint
}

# order by min() on columns of table "simulation.bank"
input simulation_bank_min_order_by {
  id: order_by
  money: order_by
}

# response of any mutation on the table "simulation.bank"
type simulation_bank_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [simulation_bank!]!
}

# input type for inserting object relation for remote table "simulation.bank"
input simulation_bank_obj_rel_insert_input {
  data: simulation_bank_insert_input!
  on_conflict: simulation_bank_on_conflict
}

# on conflict condition type for table "simulation.bank"
input simulation_bank_on_conflict {
  constraint: simulation_bank_constraint!
  update_columns: [simulation_bank_update_column!]!
  where: simulation_bank_bool_exp
}

# ordering options when selecting data from "simulation.bank"
input simulation_bank_order_by {
  id: order_by
  money: order_by
}

# primary key columns input for table: "simulation.bank"
input simulation_bank_pk_columns_input {
  id: bigint!
}

# select columns of table "simulation.bank"
enum simulation_bank_select_column {
  # column name
  id

  # column name
  money
}

# input type for updating data in table "simulation.bank"
input simulation_bank_set_input {
  id: bigint
  money: bigint
}

# aggregate stddev on columns
type simulation_bank_stddev_fields {
  id: Float
  money: Float
}

# order by stddev() on columns of table "simulation.bank"
input simulation_bank_stddev_order_by {
  id: order_by
  money: order_by
}

# aggregate stddev_pop on columns
type simulation_bank_stddev_pop_fields {
  id: Float
  money: Float
}

# order by stddev_pop() on columns of table "simulation.bank"
input simulation_bank_stddev_pop_order_by {
  id: order_by
  money: order_by
}

# aggregate stddev_samp on columns
type simulation_bank_stddev_samp_fields {
  id: Float
  money: Float
}

# order by stddev_samp() on columns of table "simulation.bank"
input simulation_bank_stddev_samp_order_by {
  id: order_by
  money: order_by
}

# aggregate sum on columns
type simulation_bank_sum_fields {
  id: bigint
  money: bigint
}

# order by sum() on columns of table "simulation.bank"
input simulation_bank_sum_order_by {
  id: order_by
  money: order_by
}

# update columns of table "simulation.bank"
enum simulation_bank_update_column {
  # column name
  id

  # column name
  money
}

# aggregate var_pop on columns
type simulation_bank_var_pop_fields {
  id: Float
  money: Float
}

# order by var_pop() on columns of table "simulation.bank"
input simulation_bank_var_pop_order_by {
  id: order_by
  money: order_by
}

# aggregate var_samp on columns
type simulation_bank_var_samp_fields {
  id: Float
  money: Float
}

# order by var_samp() on columns of table "simulation.bank"
input simulation_bank_var_samp_order_by {
  id: order_by
  money: order_by
}

# aggregate variance on columns
type simulation_bank_variance_fields {
  id: Float
  money: Float
}

# order by variance() on columns of table "simulation.bank"
input simulation_bank_variance_order_by {
  id: order_by
  money: order_by
}

# columns and relationships of "simulation.bet"
type simulation_bet {
  created_at: timestamptz!
  id: bigint!
  money: Int!
  round_id: bigint!
  user_id: bigint!
}

# aggregated selection of "simulation.bet"
type simulation_bet_aggregate {
  aggregate: simulation_bet_aggregate_fields
  nodes: [simulation_bet!]!
}

# aggregate fields of "simulation.bet"
type simulation_bet_aggregate_fields {
  avg: simulation_bet_avg_fields
  count(columns: [simulation_bet_select_column!], distinct: Boolean): Int
  max: simulation_bet_max_fields
  min: simulation_bet_min_fields
  stddev: simulation_bet_stddev_fields
  stddev_pop: simulation_bet_stddev_pop_fields
  stddev_samp: simulation_bet_stddev_samp_fields
  sum: simulation_bet_sum_fields
  var_pop: simulation_bet_var_pop_fields
  var_samp: simulation_bet_var_samp_fields
  variance: simulation_bet_variance_fields
}

# order by aggregate values of table "simulation.bet"
input simulation_bet_aggregate_order_by {
  avg: simulation_bet_avg_order_by
  count: order_by
  max: simulation_bet_max_order_by
  min: simulation_bet_min_order_by
  stddev: simulation_bet_stddev_order_by
  stddev_pop: simulation_bet_stddev_pop_order_by
  stddev_samp: simulation_bet_stddev_samp_order_by
  sum: simulation_bet_sum_order_by
  var_pop: simulation_bet_var_pop_order_by
  var_samp: simulation_bet_var_samp_order_by
  variance: simulation_bet_variance_order_by
}

# input type for inserting array relation for remote table "simulation.bet"
input simulation_bet_arr_rel_insert_input {
  data: [simulation_bet_insert_input!]!
  on_conflict: simulation_bet_on_conflict
}

# aggregate avg on columns
type simulation_bet_avg_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by avg() on columns of table "simulation.bet"
input simulation_bet_avg_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# Boolean expression to filter rows from the table "simulation.bet". All fields are combined with a logical 'AND'.
input simulation_bet_bool_exp {
  _and: [simulation_bet_bool_exp]
  _not: simulation_bet_bool_exp
  _or: [simulation_bet_bool_exp]
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  money: Int_comparison_exp
  round_id: bigint_comparison_exp
  user_id: bigint_comparison_exp
}

# unique or primary key constraints on table "simulation.bet"
enum simulation_bet_constraint {
  # unique or primary key constraint
  simulation_bet_pkey
}

# input type for incrementing integer column in table "simulation.bet"
input simulation_bet_inc_input {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# input type for inserting data into table "simulation.bet"
input simulation_bet_insert_input {
  created_at: timestamptz
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# aggregate max on columns
type simulation_bet_max_fields {
  created_at: timestamptz
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# order by max() on columns of table "simulation.bet"
input simulation_bet_max_order_by {
  created_at: order_by
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate min on columns
type simulation_bet_min_fields {
  created_at: timestamptz
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# order by min() on columns of table "simulation.bet"
input simulation_bet_min_order_by {
  created_at: order_by
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# response of any mutation on the table "simulation.bet"
type simulation_bet_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [simulation_bet!]!
}

# input type for inserting object relation for remote table "simulation.bet"
input simulation_bet_obj_rel_insert_input {
  data: simulation_bet_insert_input!
  on_conflict: simulation_bet_on_conflict
}

# on conflict condition type for table "simulation.bet"
input simulation_bet_on_conflict {
  constraint: simulation_bet_constraint!
  update_columns: [simulation_bet_update_column!]!
  where: simulation_bet_bool_exp
}

# ordering options when selecting data from "simulation.bet"
input simulation_bet_order_by {
  created_at: order_by
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# primary key columns input for table: "simulation.bet"
input simulation_bet_pk_columns_input {
  id: bigint!
}

# select columns of table "simulation.bet"
enum simulation_bet_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  money

  # column name
  round_id

  # column name
  user_id
}

# input type for updating data in table "simulation.bet"
input simulation_bet_set_input {
  created_at: timestamptz
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# aggregate stddev on columns
type simulation_bet_stddev_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by stddev() on columns of table "simulation.bet"
input simulation_bet_stddev_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate stddev_pop on columns
type simulation_bet_stddev_pop_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by stddev_pop() on columns of table "simulation.bet"
input simulation_bet_stddev_pop_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate stddev_samp on columns
type simulation_bet_stddev_samp_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by stddev_samp() on columns of table "simulation.bet"
input simulation_bet_stddev_samp_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate sum on columns
type simulation_bet_sum_fields {
  id: bigint
  money: Int
  round_id: bigint
  user_id: bigint
}

# order by sum() on columns of table "simulation.bet"
input simulation_bet_sum_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# update columns of table "simulation.bet"
enum simulation_bet_update_column {
  # column name
  created_at

  # column name
  id

  # column name
  money

  # column name
  round_id

  # column name
  user_id
}

# aggregate var_pop on columns
type simulation_bet_var_pop_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by var_pop() on columns of table "simulation.bet"
input simulation_bet_var_pop_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate var_samp on columns
type simulation_bet_var_samp_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by var_samp() on columns of table "simulation.bet"
input simulation_bet_var_samp_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# aggregate variance on columns
type simulation_bet_variance_fields {
  id: Float
  money: Float
  round_id: Float
  user_id: Float
}

# order by variance() on columns of table "simulation.bet"
input simulation_bet_variance_order_by {
  id: order_by
  money: order_by
  round_id: order_by
  user_id: order_by
}

# columns and relationships of "simulation.round"
type simulation_round {
  id: bigint!
  status: String!
  x: Int
}

# aggregated selection of "simulation.round"
type simulation_round_aggregate {
  aggregate: simulation_round_aggregate_fields
  nodes: [simulation_round!]!
}

# aggregate fields of "simulation.round"
type simulation_round_aggregate_fields {
  avg: simulation_round_avg_fields
  count(columns: [simulation_round_select_column!], distinct: Boolean): Int
  max: simulation_round_max_fields
  min: simulation_round_min_fields
  stddev: simulation_round_stddev_fields
  stddev_pop: simulation_round_stddev_pop_fields
  stddev_samp: simulation_round_stddev_samp_fields
  sum: simulation_round_sum_fields
  var_pop: simulation_round_var_pop_fields
  var_samp: simulation_round_var_samp_fields
  variance: simulation_round_variance_fields
}

# order by aggregate values of table "simulation.round"
input simulation_round_aggregate_order_by {
  avg: simulation_round_avg_order_by
  count: order_by
  max: simulation_round_max_order_by
  min: simulation_round_min_order_by
  stddev: simulation_round_stddev_order_by
  stddev_pop: simulation_round_stddev_pop_order_by
  stddev_samp: simulation_round_stddev_samp_order_by
  sum: simulation_round_sum_order_by
  var_pop: simulation_round_var_pop_order_by
  var_samp: simulation_round_var_samp_order_by
  variance: simulation_round_variance_order_by
}

# input type for inserting array relation for remote table "simulation.round"
input simulation_round_arr_rel_insert_input {
  data: [simulation_round_insert_input!]!
  on_conflict: simulation_round_on_conflict
}

# aggregate avg on columns
type simulation_round_avg_fields {
  id: Float
  x: Float
}

# order by avg() on columns of table "simulation.round"
input simulation_round_avg_order_by {
  id: order_by
  x: order_by
}

# Boolean expression to filter rows from the table "simulation.round". All fields are combined with a logical 'AND'.
input simulation_round_bool_exp {
  _and: [simulation_round_bool_exp]
  _not: simulation_round_bool_exp
  _or: [simulation_round_bool_exp]
  id: bigint_comparison_exp
  status: String_comparison_exp
  x: Int_comparison_exp
}

# unique or primary key constraints on table "simulation.round"
enum simulation_round_constraint {
  # unique or primary key constraint
  simulation_round_pkey
}

# input type for incrementing integer column in table "simulation.round"
input simulation_round_inc_input {
  id: bigint
  x: Int
}

# input type for inserting data into table "simulation.round"
input simulation_round_insert_input {
  id: bigint
  status: String
  x: Int
}

# aggregate max on columns
type simulation_round_max_fields {
  id: bigint
  status: String
  x: Int
}

# order by max() on columns of table "simulation.round"
input simulation_round_max_order_by {
  id: order_by
  status: order_by
  x: order_by
}

# aggregate min on columns
type simulation_round_min_fields {
  id: bigint
  status: String
  x: Int
}

# order by min() on columns of table "simulation.round"
input simulation_round_min_order_by {
  id: order_by
  status: order_by
  x: order_by
}

# response of any mutation on the table "simulation.round"
type simulation_round_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [simulation_round!]!
}

# input type for inserting object relation for remote table "simulation.round"
input simulation_round_obj_rel_insert_input {
  data: simulation_round_insert_input!
  on_conflict: simulation_round_on_conflict
}

# on conflict condition type for table "simulation.round"
input simulation_round_on_conflict {
  constraint: simulation_round_constraint!
  update_columns: [simulation_round_update_column!]!
  where: simulation_round_bool_exp
}

# ordering options when selecting data from "simulation.round"
input simulation_round_order_by {
  id: order_by
  status: order_by
  x: order_by
}

# primary key columns input for table: "simulation.round"
input simulation_round_pk_columns_input {
  id: bigint!
}

# select columns of table "simulation.round"
enum simulation_round_select_column {
  # column name
  id

  # column name
  status

  # column name
  x
}

# input type for updating data in table "simulation.round"
input simulation_round_set_input {
  id: bigint
  status: String
  x: Int
}

# columns and relationships of "simulation.round_status"
type simulation_round_status {
  value: String!
}

# aggregated selection of "simulation.round_status"
type simulation_round_status_aggregate {
  aggregate: simulation_round_status_aggregate_fields
  nodes: [simulation_round_status!]!
}

# aggregate fields of "simulation.round_status"
type simulation_round_status_aggregate_fields {
  count(columns: [simulation_round_status_select_column!], distinct: Boolean): Int
  max: simulation_round_status_max_fields
  min: simulation_round_status_min_fields
}

# order by aggregate values of table "simulation.round_status"
input simulation_round_status_aggregate_order_by {
  count: order_by
  max: simulation_round_status_max_order_by
  min: simulation_round_status_min_order_by
}

# input type for inserting array relation for remote table "simulation.round_status"
input simulation_round_status_arr_rel_insert_input {
  data: [simulation_round_status_insert_input!]!
  on_conflict: simulation_round_status_on_conflict
}

# Boolean expression to filter rows from the table "simulation.round_status". All fields are combined with a logical 'AND'.
input simulation_round_status_bool_exp {
  _and: [simulation_round_status_bool_exp]
  _not: simulation_round_status_bool_exp
  _or: [simulation_round_status_bool_exp]
  value: String_comparison_exp
}

# unique or primary key constraints on table "simulation.round_status"
enum simulation_round_status_constraint {
  # unique or primary key constraint
  simulation_round_state_pkey
}

# input type for inserting data into table "simulation.round_status"
input simulation_round_status_insert_input {
  value: String
}

# aggregate max on columns
type simulation_round_status_max_fields {
  value: String
}

# order by max() on columns of table "simulation.round_status"
input simulation_round_status_max_order_by {
  value: order_by
}

# aggregate min on columns
type simulation_round_status_min_fields {
  value: String
}

# order by min() on columns of table "simulation.round_status"
input simulation_round_status_min_order_by {
  value: order_by
}

# response of any mutation on the table "simulation.round_status"
type simulation_round_status_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [simulation_round_status!]!
}

# input type for inserting object relation for remote table "simulation.round_status"
input simulation_round_status_obj_rel_insert_input {
  data: simulation_round_status_insert_input!
  on_conflict: simulation_round_status_on_conflict
}

# on conflict condition type for table "simulation.round_status"
input simulation_round_status_on_conflict {
  constraint: simulation_round_status_constraint!
  update_columns: [simulation_round_status_update_column!]!
  where: simulation_round_status_bool_exp
}

# ordering options when selecting data from "simulation.round_status"
input simulation_round_status_order_by {
  value: order_by
}

# primary key columns input for table: "simulation.round_status"
input simulation_round_status_pk_columns_input {
  value: String!
}

# select columns of table "simulation.round_status"
enum simulation_round_status_select_column {
  # column name
  value
}

# input type for updating data in table "simulation.round_status"
input simulation_round_status_set_input {
  value: String
}

# update columns of table "simulation.round_status"
enum simulation_round_status_update_column {
  # column name
  value
}

# aggregate stddev on columns
type simulation_round_stddev_fields {
  id: Float
  x: Float
}

# order by stddev() on columns of table "simulation.round"
input simulation_round_stddev_order_by {
  id: order_by
  x: order_by
}

# aggregate stddev_pop on columns
type simulation_round_stddev_pop_fields {
  id: Float
  x: Float
}

# order by stddev_pop() on columns of table "simulation.round"
input simulation_round_stddev_pop_order_by {
  id: order_by
  x: order_by
}

# aggregate stddev_samp on columns
type simulation_round_stddev_samp_fields {
  id: Float
  x: Float
}

# order by stddev_samp() on columns of table "simulation.round"
input simulation_round_stddev_samp_order_by {
  id: order_by
  x: order_by
}

# aggregate sum on columns
type simulation_round_sum_fields {
  id: bigint
  x: Int
}

# order by sum() on columns of table "simulation.round"
input simulation_round_sum_order_by {
  id: order_by
  x: order_by
}

# update columns of table "simulation.round"
enum simulation_round_update_column {
  # column name
  id

  # column name
  status

  # column name
  x
}

# aggregate var_pop on columns
type simulation_round_var_pop_fields {
  id: Float
  x: Float
}

# order by var_pop() on columns of table "simulation.round"
input simulation_round_var_pop_order_by {
  id: order_by
  x: order_by
}

# aggregate var_samp on columns
type simulation_round_var_samp_fields {
  id: Float
  x: Float
}

# order by var_samp() on columns of table "simulation.round"
input simulation_round_var_samp_order_by {
  id: order_by
  x: order_by
}

# aggregate variance on columns
type simulation_round_variance_fields {
  id: Float
  x: Float
}

# order by variance() on columns of table "simulation.round"
input simulation_round_variance_order_by {
  id: order_by
  x: order_by
}

# columns and relationships of "simulation.user"
type simulation_user {
  bot: Boolean!
  created_at: timestamptz
  id: bigint!
  money: bigint!
  nickname: String!
  updated_at: timestamptz
}

# aggregated selection of "simulation.user"
type simulation_user_aggregate {
  aggregate: simulation_user_aggregate_fields
  nodes: [simulation_user!]!
}

# aggregate fields of "simulation.user"
type simulation_user_aggregate_fields {
  avg: simulation_user_avg_fields
  count(columns: [simulation_user_select_column!], distinct: Boolean): Int
  max: simulation_user_max_fields
  min: simulation_user_min_fields
  stddev: simulation_user_stddev_fields
  stddev_pop: simulation_user_stddev_pop_fields
  stddev_samp: simulation_user_stddev_samp_fields
  sum: simulation_user_sum_fields
  var_pop: simulation_user_var_pop_fields
  var_samp: simulation_user_var_samp_fields
  variance: simulation_user_variance_fields
}

# order by aggregate values of table "simulation.user"
input simulation_user_aggregate_order_by {
  avg: simulation_user_avg_order_by
  count: order_by
  max: simulation_user_max_order_by
  min: simulation_user_min_order_by
  stddev: simulation_user_stddev_order_by
  stddev_pop: simulation_user_stddev_pop_order_by
  stddev_samp: simulation_user_stddev_samp_order_by
  sum: simulation_user_sum_order_by
  var_pop: simulation_user_var_pop_order_by
  var_samp: simulation_user_var_samp_order_by
  variance: simulation_user_variance_order_by
}

# input type for inserting array relation for remote table "simulation.user"
input simulation_user_arr_rel_insert_input {
  data: [simulation_user_insert_input!]!
  on_conflict: simulation_user_on_conflict
}

# aggregate avg on columns
type simulation_user_avg_fields {
  id: Float
  money: Float
}

# order by avg() on columns of table "simulation.user"
input simulation_user_avg_order_by {
  id: order_by
  money: order_by
}

# Boolean expression to filter rows from the table "simulation.user". All fields are combined with a logical 'AND'.
input simulation_user_bool_exp {
  _and: [simulation_user_bool_exp]
  _not: simulation_user_bool_exp
  _or: [simulation_user_bool_exp]
  bot: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  money: bigint_comparison_exp
  nickname: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

# unique or primary key constraints on table "simulation.user"
enum simulation_user_constraint {
  # unique or primary key constraint
  simulation_user_nickname_key

  # unique or primary key constraint
  simulation_user_pkey
}

# input type for incrementing integer column in table "simulation.user"
input simulation_user_inc_input {
  id: bigint
  money: bigint
}

# input type for inserting data into table "simulation.user"
input simulation_user_insert_input {
  bot: Boolean
  created_at: timestamptz
  id: bigint
  money: bigint
  nickname: String
  updated_at: timestamptz
}

# aggregate max on columns
type simulation_user_max_fields {
  created_at: timestamptz
  id: bigint
  money: bigint
  nickname: String
  updated_at: timestamptz
}

# order by max() on columns of table "simulation.user"
input simulation_user_max_order_by {
  created_at: order_by
  id: order_by
  money: order_by
  nickname: order_by
  updated_at: order_by
}

# aggregate min on columns
type simulation_user_min_fields {
  created_at: timestamptz
  id: bigint
  money: bigint
  nickname: String
  updated_at: timestamptz
}

# order by min() on columns of table "simulation.user"
input simulation_user_min_order_by {
  created_at: order_by
  id: order_by
  money: order_by
  nickname: order_by
  updated_at: order_by
}

# response of any mutation on the table "simulation.user"
type simulation_user_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [simulation_user!]!
}

# input type for inserting object relation for remote table "simulation.user"
input simulation_user_obj_rel_insert_input {
  data: simulation_user_insert_input!
  on_conflict: simulation_user_on_conflict
}

# on conflict condition type for table "simulation.user"
input simulation_user_on_conflict {
  constraint: simulation_user_constraint!
  update_columns: [simulation_user_update_column!]!
  where: simulation_user_bool_exp
}

# ordering options when selecting data from "simulation.user"
input simulation_user_order_by {
  bot: order_by
  created_at: order_by
  id: order_by
  money: order_by
  nickname: order_by
  updated_at: order_by
}

# primary key columns input for table: "simulation.user"
input simulation_user_pk_columns_input {
  id: bigint!
}

# select columns of table "simulation.user"
enum simulation_user_select_column {
  # column name
  bot

  # column name
  created_at

  # column name
  id

  # column name
  money

  # column name
  nickname

  # column name
  updated_at
}

# input type for updating data in table "simulation.user"
input simulation_user_set_input {
  bot: Boolean
  created_at: timestamptz
  id: bigint
  money: bigint
  nickname: String
  updated_at: timestamptz
}

# aggregate stddev on columns
type simulation_user_stddev_fields {
  id: Float
  money: Float
}

# order by stddev() on columns of table "simulation.user"
input simulation_user_stddev_order_by {
  id: order_by
  money: order_by
}

# aggregate stddev_pop on columns
type simulation_user_stddev_pop_fields {
  id: Float
  money: Float
}

# order by stddev_pop() on columns of table "simulation.user"
input simulation_user_stddev_pop_order_by {
  id: order_by
  money: order_by
}

# aggregate stddev_samp on columns
type simulation_user_stddev_samp_fields {
  id: Float
  money: Float
}

# order by stddev_samp() on columns of table "simulation.user"
input simulation_user_stddev_samp_order_by {
  id: order_by
  money: order_by
}

# aggregate sum on columns
type simulation_user_sum_fields {
  id: bigint
  money: bigint
}

# order by sum() on columns of table "simulation.user"
input simulation_user_sum_order_by {
  id: order_by
  money: order_by
}

# update columns of table "simulation.user"
enum simulation_user_update_column {
  # column name
  bot

  # column name
  created_at

  # column name
  id

  # column name
  money

  # column name
  nickname

  # column name
  updated_at
}

# aggregate var_pop on columns
type simulation_user_var_pop_fields {
  id: Float
  money: Float
}

# order by var_pop() on columns of table "simulation.user"
input simulation_user_var_pop_order_by {
  id: order_by
  money: order_by
}

# aggregate var_samp on columns
type simulation_user_var_samp_fields {
  id: Float
  money: Float
}

# order by var_samp() on columns of table "simulation.user"
input simulation_user_var_samp_order_by {
  id: order_by
  money: order_by
}

# aggregate variance on columns
type simulation_user_variance_fields {
  id: Float
  money: Float
}

# order by variance() on columns of table "simulation.user"
input simulation_user_variance_order_by {
  id: order_by
  money: order_by
}

input SimulationOptionsInput {
  bank_money: Int!
}

type SimulationOutput {
  id: bigint!
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "chat.message"
  chat_message(
    # distinct select on columns
    distinct_on: [chat_message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [chat_message_order_by!]

    # filter the rows returned
    where: chat_message_bool_exp
  ): [chat_message!]!

  # fetch aggregated fields from the table: "chat.message"
  chat_message_aggregate(
    # distinct select on columns
    distinct_on: [chat_message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [chat_message_order_by!]

    # filter the rows returned
    where: chat_message_bool_exp
  ): chat_message_aggregate!

  # fetch data from the table: "chat.message" using primary key columns
  chat_message_by_pk(id: bigint!): chat_message

  # fetch data from the table: "game.bet"
  game_bet(
    # distinct select on columns
    distinct_on: [game_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_bet_order_by!]

    # filter the rows returned
    where: game_bet_bool_exp
  ): [game_bet!]!

  # fetch aggregated fields from the table: "game.bet"
  game_bet_aggregate(
    # distinct select on columns
    distinct_on: [game_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_bet_order_by!]

    # filter the rows returned
    where: game_bet_bool_exp
  ): game_bet_aggregate!

  # fetch data from the table: "game.bet" using primary key columns
  game_bet_by_pk(id: bigint!): game_bet

  # fetch data from the table: "game.item"
  game_item(
    # distinct select on columns
    distinct_on: [game_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_item_order_by!]

    # filter the rows returned
    where: game_item_bool_exp
  ): [game_item!]!

  # fetch aggregated fields from the table: "game.item"
  game_item_aggregate(
    # distinct select on columns
    distinct_on: [game_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_item_order_by!]

    # filter the rows returned
    where: game_item_bool_exp
  ): game_item_aggregate!

  # fetch data from the table: "game.item" using primary key columns
  game_item_by_pk(id: bigint!): game_item

  # fetch data from the table: "game.item_data"
  game_item_data(
    # distinct select on columns
    distinct_on: [game_item_data_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_item_data_order_by!]

    # filter the rows returned
    where: game_item_data_bool_exp
  ): [game_item_data!]!

  # fetch aggregated fields from the table: "game.item_data"
  game_item_data_aggregate(
    # distinct select on columns
    distinct_on: [game_item_data_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_item_data_order_by!]

    # filter the rows returned
    where: game_item_data_bool_exp
  ): game_item_data_aggregate!

  # fetch data from the table: "game.item_data" using primary key columns
  game_item_data_by_pk(id: bigint!): game_item_data

  # fetch data from the table: "game.items_data_loader"
  game_items_data_loader(
    # distinct select on columns
    distinct_on: [game_items_data_loader_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_items_data_loader_order_by!]

    # filter the rows returned
    where: game_items_data_loader_bool_exp
  ): [game_items_data_loader!]!

  # fetch aggregated fields from the table: "game.items_data_loader"
  game_items_data_loader_aggregate(
    # distinct select on columns
    distinct_on: [game_items_data_loader_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_items_data_loader_order_by!]

    # filter the rows returned
    where: game_items_data_loader_bool_exp
  ): game_items_data_loader_aggregate!

  # fetch data from the table: "game.items_data_loader" using primary key columns
  game_items_data_loader_by_pk(id: bigint!): game_items_data_loader

  # fetch data from the table: "game.round"
  game_round(
    # distinct select on columns
    distinct_on: [game_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_round_order_by!]

    # filter the rows returned
    where: game_round_bool_exp
  ): [game_round!]!

  # fetch aggregated fields from the table: "game.round"
  game_round_aggregate(
    # distinct select on columns
    distinct_on: [game_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_round_order_by!]

    # filter the rows returned
    where: game_round_bool_exp
  ): game_round_aggregate!

  # fetch data from the table: "game.round" using primary key columns
  game_round_by_pk(id: bigint!): game_round

  # fetch data from the table: "game.round_status"
  game_round_status(
    # distinct select on columns
    distinct_on: [game_round_status_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_round_status_order_by!]

    # filter the rows returned
    where: game_round_status_bool_exp
  ): [game_round_status!]!

  # fetch aggregated fields from the table: "game.round_status"
  game_round_status_aggregate(
    # distinct select on columns
    distinct_on: [game_round_status_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_round_status_order_by!]

    # filter the rows returned
    where: game_round_status_bool_exp
  ): game_round_status_aggregate!

  # fetch data from the table: "game.round_status" using primary key columns
  game_round_status_by_pk(value: String!): game_round_status

  # fetch data from the table: "game.settings"
  game_settings(
    # distinct select on columns
    distinct_on: [game_settings_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_settings_order_by!]

    # filter the rows returned
    where: game_settings_bool_exp
  ): [game_settings!]!

  # fetch aggregated fields from the table: "game.settings"
  game_settings_aggregate(
    # distinct select on columns
    distinct_on: [game_settings_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_settings_order_by!]

    # filter the rows returned
    where: game_settings_bool_exp
  ): game_settings_aggregate!

  # fetch data from the table: "game.settings" using primary key columns
  game_settings_by_pk(id: bigint!): game_settings

  # fetch data from the table: "game.view_active_bet"
  game_view_active_bet(
    # distinct select on columns
    distinct_on: [game_view_active_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_active_bet_order_by!]

    # filter the rows returned
    where: game_view_active_bet_bool_exp
  ): [game_view_active_bet!]!

  # fetch aggregated fields from the table: "game.view_active_bet"
  game_view_active_bet_aggregate(
    # distinct select on columns
    distinct_on: [game_view_active_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_active_bet_order_by!]

    # filter the rows returned
    where: game_view_active_bet_bool_exp
  ): game_view_active_bet_aggregate!

  # fetch data from the table: "game.view_active_round"
  game_view_active_round(
    # distinct select on columns
    distinct_on: [game_view_active_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_active_round_order_by!]

    # filter the rows returned
    where: game_view_active_round_bool_exp
  ): [game_view_active_round!]!

  # fetch aggregated fields from the table: "game.view_active_round"
  game_view_active_round_aggregate(
    # distinct select on columns
    distinct_on: [game_view_active_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_active_round_order_by!]

    # filter the rows returned
    where: game_view_active_round_bool_exp
  ): game_view_active_round_aggregate!

  # fetch data from the table: "game.view_my_item"
  game_view_my_item(
    # distinct select on columns
    distinct_on: [game_view_my_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_my_item_order_by!]

    # filter the rows returned
    where: game_view_my_item_bool_exp
  ): [game_view_my_item!]!

  # fetch aggregated fields from the table: "game.view_my_item"
  game_view_my_item_aggregate(
    # distinct select on columns
    distinct_on: [game_view_my_item_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_view_my_item_order_by!]

    # filter the rows returned
    where: game_view_my_item_bool_exp
  ): game_view_my_item_aggregate!

  # fetch data from the table: "simulation.bank"
  simulation_bank(
    # distinct select on columns
    distinct_on: [simulation_bank_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_bank_order_by!]

    # filter the rows returned
    where: simulation_bank_bool_exp
  ): [simulation_bank!]!

  # fetch aggregated fields from the table: "simulation.bank"
  simulation_bank_aggregate(
    # distinct select on columns
    distinct_on: [simulation_bank_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_bank_order_by!]

    # filter the rows returned
    where: simulation_bank_bool_exp
  ): simulation_bank_aggregate!

  # fetch data from the table: "simulation.bank" using primary key columns
  simulation_bank_by_pk(id: bigint!): simulation_bank

  # fetch data from the table: "simulation.bet"
  simulation_bet(
    # distinct select on columns
    distinct_on: [simulation_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_bet_order_by!]

    # filter the rows returned
    where: simulation_bet_bool_exp
  ): [simulation_bet!]!

  # fetch aggregated fields from the table: "simulation.bet"
  simulation_bet_aggregate(
    # distinct select on columns
    distinct_on: [simulation_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_bet_order_by!]

    # filter the rows returned
    where: simulation_bet_bool_exp
  ): simulation_bet_aggregate!

  # fetch data from the table: "simulation.bet" using primary key columns
  simulation_bet_by_pk(id: bigint!): simulation_bet

  # fetch data from the table: "simulation.round"
  simulation_round(
    # distinct select on columns
    distinct_on: [simulation_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_round_order_by!]

    # filter the rows returned
    where: simulation_round_bool_exp
  ): [simulation_round!]!

  # fetch aggregated fields from the table: "simulation.round"
  simulation_round_aggregate(
    # distinct select on columns
    distinct_on: [simulation_round_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_round_order_by!]

    # filter the rows returned
    where: simulation_round_bool_exp
  ): simulation_round_aggregate!

  # fetch data from the table: "simulation.round" using primary key columns
  simulation_round_by_pk(id: bigint!): simulation_round

  # fetch data from the table: "simulation.round_status"
  simulation_round_status(
    # distinct select on columns
    distinct_on: [simulation_round_status_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_round_status_order_by!]

    # filter the rows returned
    where: simulation_round_status_bool_exp
  ): [simulation_round_status!]!

  # fetch aggregated fields from the table: "simulation.round_status"
  simulation_round_status_aggregate(
    # distinct select on columns
    distinct_on: [simulation_round_status_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_round_status_order_by!]

    # filter the rows returned
    where: simulation_round_status_bool_exp
  ): simulation_round_status_aggregate!

  # fetch data from the table: "simulation.round_status" using primary key columns
  simulation_round_status_by_pk(value: String!): simulation_round_status

  # fetch data from the table: "simulation.user"
  simulation_user(
    # distinct select on columns
    distinct_on: [simulation_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_user_order_by!]

    # filter the rows returned
    where: simulation_user_bool_exp
  ): [simulation_user!]!

  # fetch aggregated fields from the table: "simulation.user"
  simulation_user_aggregate(
    # distinct select on columns
    distinct_on: [simulation_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [simulation_user_order_by!]

    # filter the rows returned
    where: simulation_user_bool_exp
  ): simulation_user_aggregate!

  # fetch data from the table: "simulation.user" using primary key columns
  simulation_user_by_pk(id: bigint!): simulation_user

  # fetch data from the table: "user"
  user(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): [user!]!

  # fetch aggregated fields from the table: "user"
  user_aggregate(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): user_aggregate!

  # fetch data from the table: "user" using primary key columns
  user_by_pk(id: bigint!): user

  # fetch data from the table: "user_role"
  user_role(
    # distinct select on columns
    distinct_on: [user_role_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_role_order_by!]

    # filter the rows returned
    where: user_role_bool_exp
  ): [user_role!]!

  # fetch aggregated fields from the table: "user_role"
  user_role_aggregate(
    # distinct select on columns
    distinct_on: [user_role_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_role_order_by!]

    # filter the rows returned
    where: user_role_bool_exp
  ): user_role_aggregate!

  # fetch data from the table: "user_role" using primary key columns
  user_role_by_pk(value: String!): user_role

  # fetch data from the table: "view_current_user"
  view_current_user(
    # distinct select on columns
    distinct_on: [view_current_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [view_current_user_order_by!]

    # filter the rows returned
    where: view_current_user_bool_exp
  ): [view_current_user!]!

  # fetch aggregated fields from the table: "view_current_user"
  view_current_user_aggregate(
    # distinct select on columns
    distinct_on: [view_current_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [view_current_user_order_by!]

    # filter the rows returned
    where: view_current_user_bool_exp
  ): view_current_user_aggregate!
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

type UpdateItemsDataOutput {
  id: bigint!
}

# columns and relationships of "user"
type user {
  avatar: String!
  bot: Boolean!

  # An array relationship
  game_round_bets(
    # distinct select on columns
    distinct_on: [game_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_bet_order_by!]

    # filter the rows returned
    where: game_bet_bool_exp
  ): [game_bet!]!

  # An aggregated array relationship
  game_round_bets_aggregate(
    # distinct select on columns
    distinct_on: [game_bet_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [game_bet_order_by!]

    # filter the rows returned
    where: game_bet_bool_exp
  ): game_bet_aggregate!
  id: bigint!
  lang: String!
  money: bigint!
  nickname: String!
  role: user_role_enum!
  steam_id: String!
  steam_profile: String!
}

# aggregated selection of "user"
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

# aggregate fields of "user"
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

# order by aggregate values of table "user"
input user_aggregate_order_by {
  avg: user_avg_order_by
  count: order_by
  max: user_max_order_by
  min: user_min_order_by
  stddev: user_stddev_order_by
  stddev_pop: user_stddev_pop_order_by
  stddev_samp: user_stddev_samp_order_by
  sum: user_sum_order_by
  var_pop: user_var_pop_order_by
  var_samp: user_var_samp_order_by
  variance: user_variance_order_by
}

# input type for inserting array relation for remote table "user"
input user_arr_rel_insert_input {
  data: [user_insert_input!]!
  on_conflict: user_on_conflict
}

# aggregate avg on columns
type user_avg_fields {
  id: Float
  money: Float
}

# order by avg() on columns of table "user"
input user_avg_order_by {
  id: order_by
  money: order_by
}

# Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
input user_bool_exp {
  _and: [user_bool_exp]
  _not: user_bool_exp
  _or: [user_bool_exp]
  avatar: String_comparison_exp
  bot: Boolean_comparison_exp
  game_round_bets: game_bet_bool_exp
  id: bigint_comparison_exp
  lang: String_comparison_exp
  money: bigint_comparison_exp
  nickname: String_comparison_exp
  role: user_role_enum_comparison_exp
  steam_id: String_comparison_exp
  steam_profile: String_comparison_exp
}

# unique or primary key constraints on table "user"
enum user_constraint {
  # unique or primary key constraint
  user_pkey

  # unique or primary key constraint
  user_steam_id_key
}

# input type for incrementing integer column in table "user"
input user_inc_input {
  id: bigint
  money: bigint
}

# input type for inserting data into table "user"
input user_insert_input {
  avatar: String
  bot: Boolean
  game_round_bets: game_bet_arr_rel_insert_input
  id: bigint
  lang: String
  money: bigint
  nickname: String
  role: user_role_enum
  steam_id: String
  steam_profile: String
}

# aggregate max on columns
type user_max_fields {
  avatar: String
  id: bigint
  lang: String
  money: bigint
  nickname: String
  steam_id: String
  steam_profile: String
}

# order by max() on columns of table "user"
input user_max_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  money: order_by
  nickname: order_by
  steam_id: order_by
  steam_profile: order_by
}

# aggregate min on columns
type user_min_fields {
  avatar: String
  id: bigint
  lang: String
  money: bigint
  nickname: String
  steam_id: String
  steam_profile: String
}

# order by min() on columns of table "user"
input user_min_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  money: order_by
  nickname: order_by
  steam_id: order_by
  steam_profile: order_by
}

# response of any mutation on the table "user"
type user_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [user!]!
}

# input type for inserting object relation for remote table "user"
input user_obj_rel_insert_input {
  data: user_insert_input!
  on_conflict: user_on_conflict
}

# on conflict condition type for table "user"
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]!
  where: user_bool_exp
}

# ordering options when selecting data from "user"
input user_order_by {
  avatar: order_by
  bot: order_by
  game_round_bets_aggregate: game_bet_aggregate_order_by
  id: order_by
  lang: order_by
  money: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# primary key columns input for table: "user"
input user_pk_columns_input {
  id: bigint!
}

# columns and relationships of "user_role"
type user_role {
  # An array relationship
  users(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): [user!]!

  # An aggregated array relationship
  users_aggregate(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): user_aggregate!
  value: String!
}

# aggregated selection of "user_role"
type user_role_aggregate {
  aggregate: user_role_aggregate_fields
  nodes: [user_role!]!
}

# aggregate fields of "user_role"
type user_role_aggregate_fields {
  count(columns: [user_role_select_column!], distinct: Boolean): Int
  max: user_role_max_fields
  min: user_role_min_fields
}

# order by aggregate values of table "user_role"
input user_role_aggregate_order_by {
  count: order_by
  max: user_role_max_order_by
  min: user_role_min_order_by
}

# input type for inserting array relation for remote table "user_role"
input user_role_arr_rel_insert_input {
  data: [user_role_insert_input!]!
  on_conflict: user_role_on_conflict
}

# Boolean expression to filter rows from the table "user_role". All fields are combined with a logical 'AND'.
input user_role_bool_exp {
  _and: [user_role_bool_exp]
  _not: user_role_bool_exp
  _or: [user_role_bool_exp]
  users: user_bool_exp
  value: String_comparison_exp
}

# unique or primary key constraints on table "user_role"
enum user_role_constraint {
  # unique or primary key constraint
  role_pkey
}

enum user_role_enum {
  anonymous
  owner
  user
}

# expression to compare columns of type user_role_enum. All fields are combined with logical 'AND'.
input user_role_enum_comparison_exp {
  _eq: user_role_enum
  _in: [user_role_enum!]
  _is_null: Boolean
  _neq: user_role_enum
  _nin: [user_role_enum!]
}

# input type for inserting data into table "user_role"
input user_role_insert_input {
  users: user_arr_rel_insert_input
  value: String
}

# aggregate max on columns
type user_role_max_fields {
  value: String
}

# order by max() on columns of table "user_role"
input user_role_max_order_by {
  value: order_by
}

# aggregate min on columns
type user_role_min_fields {
  value: String
}

# order by min() on columns of table "user_role"
input user_role_min_order_by {
  value: order_by
}

# response of any mutation on the table "user_role"
type user_role_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [user_role!]!
}

# input type for inserting object relation for remote table "user_role"
input user_role_obj_rel_insert_input {
  data: user_role_insert_input!
  on_conflict: user_role_on_conflict
}

# on conflict condition type for table "user_role"
input user_role_on_conflict {
  constraint: user_role_constraint!
  update_columns: [user_role_update_column!]!
  where: user_role_bool_exp
}

# ordering options when selecting data from "user_role"
input user_role_order_by {
  users_aggregate: user_aggregate_order_by
  value: order_by
}

# primary key columns input for table: "user_role"
input user_role_pk_columns_input {
  value: String!
}

# select columns of table "user_role"
enum user_role_select_column {
  # column name
  value
}

# input type for updating data in table "user_role"
input user_role_set_input {
  value: String
}

# update columns of table "user_role"
enum user_role_update_column {
  # column name
  value
}

# select columns of table "user"
enum user_select_column {
  # column name
  avatar

  # column name
  bot

  # column name
  id

  # column name
  lang

  # column name
  money

  # column name
  nickname

  # column name
  role

  # column name
  steam_id

  # column name
  steam_profile
}

# input type for updating data in table "user"
input user_set_input {
  avatar: String
  bot: Boolean
  id: bigint
  lang: String
  money: bigint
  nickname: String
  role: user_role_enum
  steam_id: String
  steam_profile: String
}

# aggregate stddev on columns
type user_stddev_fields {
  id: Float
  money: Float
}

# order by stddev() on columns of table "user"
input user_stddev_order_by {
  id: order_by
  money: order_by
}

# aggregate stddev_pop on columns
type user_stddev_pop_fields {
  id: Float
  money: Float
}

# order by stddev_pop() on columns of table "user"
input user_stddev_pop_order_by {
  id: order_by
  money: order_by
}

# aggregate stddev_samp on columns
type user_stddev_samp_fields {
  id: Float
  money: Float
}

# order by stddev_samp() on columns of table "user"
input user_stddev_samp_order_by {
  id: order_by
  money: order_by
}

# aggregate sum on columns
type user_sum_fields {
  id: bigint
  money: bigint
}

# order by sum() on columns of table "user"
input user_sum_order_by {
  id: order_by
  money: order_by
}

# update columns of table "user"
enum user_update_column {
  # column name
  avatar

  # column name
  bot

  # column name
  id

  # column name
  lang

  # column name
  money

  # column name
  nickname

  # column name
  role

  # column name
  steam_id

  # column name
  steam_profile
}

# aggregate var_pop on columns
type user_var_pop_fields {
  id: Float
  money: Float
}

# order by var_pop() on columns of table "user"
input user_var_pop_order_by {
  id: order_by
  money: order_by
}

# aggregate var_samp on columns
type user_var_samp_fields {
  id: Float
  money: Float
}

# order by var_samp() on columns of table "user"
input user_var_samp_order_by {
  id: order_by
  money: order_by
}

# aggregate variance on columns
type user_variance_fields {
  id: Float
  money: Float
}

# order by variance() on columns of table "user"
input user_variance_order_by {
  id: order_by
  money: order_by
}

scalar uuid

# columns and relationships of "view_current_user"
type view_current_user {
  avatar: String
  bot: Boolean
  id: bigint
  lang: String
  money: bigint
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# aggregated selection of "view_current_user"
type view_current_user_aggregate {
  aggregate: view_current_user_aggregate_fields
  nodes: [view_current_user!]!
}

# aggregate fields of "view_current_user"
type view_current_user_aggregate_fields {
  avg: view_current_user_avg_fields
  count(columns: [view_current_user_select_column!], distinct: Boolean): Int
  max: view_current_user_max_fields
  min: view_current_user_min_fields
  stddev: view_current_user_stddev_fields
  stddev_pop: view_current_user_stddev_pop_fields
  stddev_samp: view_current_user_stddev_samp_fields
  sum: view_current_user_sum_fields
  var_pop: view_current_user_var_pop_fields
  var_samp: view_current_user_var_samp_fields
  variance: view_current_user_variance_fields
}

# order by aggregate values of table "view_current_user"
input view_current_user_aggregate_order_by {
  avg: view_current_user_avg_order_by
  count: order_by
  max: view_current_user_max_order_by
  min: view_current_user_min_order_by
  stddev: view_current_user_stddev_order_by
  stddev_pop: view_current_user_stddev_pop_order_by
  stddev_samp: view_current_user_stddev_samp_order_by
  sum: view_current_user_sum_order_by
  var_pop: view_current_user_var_pop_order_by
  var_samp: view_current_user_var_samp_order_by
  variance: view_current_user_variance_order_by
}

# input type for inserting array relation for remote table "view_current_user"
input view_current_user_arr_rel_insert_input {
  data: [view_current_user_insert_input!]!
}

# aggregate avg on columns
type view_current_user_avg_fields {
  id: Float
  money: Float
}

# order by avg() on columns of table "view_current_user"
input view_current_user_avg_order_by {
  id: order_by
  money: order_by
}

# Boolean expression to filter rows from the table "view_current_user". All fields are combined with a logical 'AND'.
input view_current_user_bool_exp {
  _and: [view_current_user_bool_exp]
  _not: view_current_user_bool_exp
  _or: [view_current_user_bool_exp]
  avatar: String_comparison_exp
  bot: Boolean_comparison_exp
  id: bigint_comparison_exp
  lang: String_comparison_exp
  money: bigint_comparison_exp
  nickname: String_comparison_exp
  role: String_comparison_exp
  steam_id: String_comparison_exp
  steam_profile: String_comparison_exp
}

# input type for incrementing integer column in table "view_current_user"
input view_current_user_inc_input {
  id: bigint
  money: bigint
}

# input type for inserting data into table "view_current_user"
input view_current_user_insert_input {
  avatar: String
  bot: Boolean
  id: bigint
  lang: String
  money: bigint
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# aggregate max on columns
type view_current_user_max_fields {
  avatar: String
  id: bigint
  lang: String
  money: bigint
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# order by max() on columns of table "view_current_user"
input view_current_user_max_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  money: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# aggregate min on columns
type view_current_user_min_fields {
  avatar: String
  id: bigint
  lang: String
  money: bigint
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# order by min() on columns of table "view_current_user"
input view_current_user_min_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  money: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# response of any mutation on the table "view_current_user"
type view_current_user_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [view_current_user!]!
}

# input type for inserting object relation for remote table "view_current_user"
input view_current_user_obj_rel_insert_input {
  data: view_current_user_insert_input!
}

# ordering options when selecting data from "view_current_user"
input view_current_user_order_by {
  avatar: order_by
  bot: order_by
  id: order_by
  lang: order_by
  money: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# select columns of table "view_current_user"
enum view_current_user_select_column {
  # column name
  avatar

  # column name
  bot

  # column name
  id

  # column name
  lang

  # column name
  money

  # column name
  nickname

  # column name
  role

  # column name
  steam_id

  # column name
  steam_profile
}

# input type for updating data in table "view_current_user"
input view_current_user_set_input {
  avatar: String
  bot: Boolean
  id: bigint
  lang: String
  money: bigint
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# aggregate stddev on columns
type view_current_user_stddev_fields {
  id: Float
  money: Float
}

# order by stddev() on columns of table "view_current_user"
input view_current_user_stddev_order_by {
  id: order_by
  money: order_by
}

# aggregate stddev_pop on columns
type view_current_user_stddev_pop_fields {
  id: Float
  money: Float
}

# order by stddev_pop() on columns of table "view_current_user"
input view_current_user_stddev_pop_order_by {
  id: order_by
  money: order_by
}

# aggregate stddev_samp on columns
type view_current_user_stddev_samp_fields {
  id: Float
  money: Float
}

# order by stddev_samp() on columns of table "view_current_user"
input view_current_user_stddev_samp_order_by {
  id: order_by
  money: order_by
}

# aggregate sum on columns
type view_current_user_sum_fields {
  id: bigint
  money: bigint
}

# order by sum() on columns of table "view_current_user"
input view_current_user_sum_order_by {
  id: order_by
  money: order_by
}

# aggregate var_pop on columns
type view_current_user_var_pop_fields {
  id: Float
  money: Float
}

# order by var_pop() on columns of table "view_current_user"
input view_current_user_var_pop_order_by {
  id: order_by
  money: order_by
}

# aggregate var_samp on columns
type view_current_user_var_samp_fields {
  id: Float
  money: Float
}

# order by var_samp() on columns of table "view_current_user"
input view_current_user_var_samp_order_by {
  id: order_by
  money: order_by
}

# aggregate variance on columns
type view_current_user_variance_fields {
  id: Float
  money: Float
}

# order by variance() on columns of table "view_current_user"
input view_current_user_variance_order_by {
  id: order_by
  money: order_by
}

