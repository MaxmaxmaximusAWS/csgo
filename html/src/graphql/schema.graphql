schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

scalar bigint

# expression to compare columns of type bigint. All fields are combined with logical 'AND'.
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

# columns and relationships of "bot"
type bot {
  avatar: String
  bot: Boolean
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# aggregated selection of "bot"
type bot_aggregate {
  aggregate: bot_aggregate_fields
  nodes: [bot!]!
}

# aggregate fields of "bot"
type bot_aggregate_fields {
  avg: bot_avg_fields
  count(columns: [bot_select_column!], distinct: Boolean): Int
  max: bot_max_fields
  min: bot_min_fields
  stddev: bot_stddev_fields
  stddev_pop: bot_stddev_pop_fields
  stddev_samp: bot_stddev_samp_fields
  sum: bot_sum_fields
  var_pop: bot_var_pop_fields
  var_samp: bot_var_samp_fields
  variance: bot_variance_fields
}

# order by aggregate values of table "bot"
input bot_aggregate_order_by {
  avg: bot_avg_order_by
  count: order_by
  max: bot_max_order_by
  min: bot_min_order_by
  stddev: bot_stddev_order_by
  stddev_pop: bot_stddev_pop_order_by
  stddev_samp: bot_stddev_samp_order_by
  sum: bot_sum_order_by
  var_pop: bot_var_pop_order_by
  var_samp: bot_var_samp_order_by
  variance: bot_variance_order_by
}

# input type for inserting array relation for remote table "bot"
input bot_arr_rel_insert_input {
  data: [bot_insert_input!]!
}

# aggregate avg on columns
type bot_avg_fields {
  id: Float
}

# order by avg() on columns of table "bot"
input bot_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "bot". All fields are combined with a logical 'AND'.
input bot_bool_exp {
  _and: [bot_bool_exp]
  _not: bot_bool_exp
  _or: [bot_bool_exp]
  avatar: String_comparison_exp
  bot: Boolean_comparison_exp
  id: bigint_comparison_exp
  lang: String_comparison_exp
  nickname: String_comparison_exp
  role: String_comparison_exp
  steam_id: String_comparison_exp
  steam_profile: String_comparison_exp
}

# input type for incrementing integer column in table "bot"
input bot_inc_input {
  id: bigint
}

# input type for inserting data into table "bot"
input bot_insert_input {
  avatar: String
  bot: Boolean
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# aggregate max on columns
type bot_max_fields {
  avatar: String
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# order by max() on columns of table "bot"
input bot_max_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# aggregate min on columns
type bot_min_fields {
  avatar: String
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# order by min() on columns of table "bot"
input bot_min_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# response of any mutation on the table "bot"
type bot_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [bot!]!
}

# input type for inserting object relation for remote table "bot"
input bot_obj_rel_insert_input {
  data: bot_insert_input!
}

# ordering options when selecting data from "bot"
input bot_order_by {
  avatar: order_by
  bot: order_by
  id: order_by
  lang: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# select columns of table "bot"
enum bot_select_column {
  # column name
  avatar

  # column name
  bot

  # column name
  id

  # column name
  lang

  # column name
  nickname

  # column name
  role

  # column name
  steam_id

  # column name
  steam_profile
}

# input type for updating data in table "bot"
input bot_set_input {
  avatar: String
  bot: Boolean
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# aggregate stddev on columns
type bot_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "bot"
input bot_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type bot_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "bot"
input bot_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type bot_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "bot"
input bot_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type bot_sum_fields {
  id: bigint
}

# order by sum() on columns of table "bot"
input bot_sum_order_by {
  id: order_by
}

# aggregate var_pop on columns
type bot_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "bot"
input bot_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type bot_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "bot"
input bot_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type bot_variance_fields {
  id: Float
}

# order by variance() on columns of table "bot"
input bot_variance_order_by {
  id: order_by
}

# columns and relationships of "chat_message"
type chat_message {
  id: bigint!
  text: String!
}

# aggregated selection of "chat_message"
type chat_message_aggregate {
  aggregate: chat_message_aggregate_fields
  nodes: [chat_message!]!
}

# aggregate fields of "chat_message"
type chat_message_aggregate_fields {
  avg: chat_message_avg_fields
  count(columns: [chat_message_select_column!], distinct: Boolean): Int
  max: chat_message_max_fields
  min: chat_message_min_fields
  stddev: chat_message_stddev_fields
  stddev_pop: chat_message_stddev_pop_fields
  stddev_samp: chat_message_stddev_samp_fields
  sum: chat_message_sum_fields
  var_pop: chat_message_var_pop_fields
  var_samp: chat_message_var_samp_fields
  variance: chat_message_variance_fields
}

# order by aggregate values of table "chat_message"
input chat_message_aggregate_order_by {
  avg: chat_message_avg_order_by
  count: order_by
  max: chat_message_max_order_by
  min: chat_message_min_order_by
  stddev: chat_message_stddev_order_by
  stddev_pop: chat_message_stddev_pop_order_by
  stddev_samp: chat_message_stddev_samp_order_by
  sum: chat_message_sum_order_by
  var_pop: chat_message_var_pop_order_by
  var_samp: chat_message_var_samp_order_by
  variance: chat_message_variance_order_by
}

# input type for inserting array relation for remote table "chat_message"
input chat_message_arr_rel_insert_input {
  data: [chat_message_insert_input!]!
  on_conflict: chat_message_on_conflict
}

# aggregate avg on columns
type chat_message_avg_fields {
  id: Float
}

# order by avg() on columns of table "chat_message"
input chat_message_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "chat_message". All fields are combined with a logical 'AND'.
input chat_message_bool_exp {
  _and: [chat_message_bool_exp]
  _not: chat_message_bool_exp
  _or: [chat_message_bool_exp]
  id: bigint_comparison_exp
  text: String_comparison_exp
}

# unique or primary key constraints on table "chat_message"
enum chat_message_constraint {
  # unique or primary key constraint
  message_pkey
}

# input type for incrementing integer column in table "chat_message"
input chat_message_inc_input {
  id: bigint
}

# input type for inserting data into table "chat_message"
input chat_message_insert_input {
  id: bigint
  text: String
}

# aggregate max on columns
type chat_message_max_fields {
  id: bigint
  text: String
}

# order by max() on columns of table "chat_message"
input chat_message_max_order_by {
  id: order_by
  text: order_by
}

# aggregate min on columns
type chat_message_min_fields {
  id: bigint
  text: String
}

# order by min() on columns of table "chat_message"
input chat_message_min_order_by {
  id: order_by
  text: order_by
}

# response of any mutation on the table "chat_message"
type chat_message_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [chat_message!]!
}

# input type for inserting object relation for remote table "chat_message"
input chat_message_obj_rel_insert_input {
  data: chat_message_insert_input!
  on_conflict: chat_message_on_conflict
}

# on conflict condition type for table "chat_message"
input chat_message_on_conflict {
  constraint: chat_message_constraint!
  update_columns: [chat_message_update_column!]!
  where: chat_message_bool_exp
}

# ordering options when selecting data from "chat_message"
input chat_message_order_by {
  id: order_by
  text: order_by
}

# primary key columns input for table: "chat_message"
input chat_message_pk_columns_input {
  id: bigint!
}

# select columns of table "chat_message"
enum chat_message_select_column {
  # column name
  id

  # column name
  text
}

# input type for updating data in table "chat_message"
input chat_message_set_input {
  id: bigint
  text: String
}

# aggregate stddev on columns
type chat_message_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "chat_message"
input chat_message_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type chat_message_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "chat_message"
input chat_message_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type chat_message_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "chat_message"
input chat_message_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type chat_message_sum_fields {
  id: bigint
}

# order by sum() on columns of table "chat_message"
input chat_message_sum_order_by {
  id: order_by
}

# update columns of table "chat_message"
enum chat_message_update_column {
  # column name
  id

  # column name
  text
}

# aggregate var_pop on columns
type chat_message_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "chat_message"
input chat_message_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type chat_message_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "chat_message"
input chat_message_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type chat_message_variance_fields {
  id: Float
}

# order by variance() on columns of table "chat_message"
input chat_message_variance_order_by {
  id: order_by
}

type CreateUserOutput {
  id: Int!
}

# columns and relationships of "current_user"
type current_user {
  avatar: String
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# aggregated selection of "current_user"
type current_user_aggregate {
  aggregate: current_user_aggregate_fields
  nodes: [current_user!]!
}

# aggregate fields of "current_user"
type current_user_aggregate_fields {
  avg: current_user_avg_fields
  count(columns: [current_user_select_column!], distinct: Boolean): Int
  max: current_user_max_fields
  min: current_user_min_fields
  stddev: current_user_stddev_fields
  stddev_pop: current_user_stddev_pop_fields
  stddev_samp: current_user_stddev_samp_fields
  sum: current_user_sum_fields
  var_pop: current_user_var_pop_fields
  var_samp: current_user_var_samp_fields
  variance: current_user_variance_fields
}

# order by aggregate values of table "current_user"
input current_user_aggregate_order_by {
  avg: current_user_avg_order_by
  count: order_by
  max: current_user_max_order_by
  min: current_user_min_order_by
  stddev: current_user_stddev_order_by
  stddev_pop: current_user_stddev_pop_order_by
  stddev_samp: current_user_stddev_samp_order_by
  sum: current_user_sum_order_by
  var_pop: current_user_var_pop_order_by
  var_samp: current_user_var_samp_order_by
  variance: current_user_variance_order_by
}

# input type for inserting array relation for remote table "current_user"
input current_user_arr_rel_insert_input {
  data: [current_user_insert_input!]!
}

# aggregate avg on columns
type current_user_avg_fields {
  id: Float
}

# order by avg() on columns of table "current_user"
input current_user_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "current_user". All fields are combined with a logical 'AND'.
input current_user_bool_exp {
  _and: [current_user_bool_exp]
  _not: current_user_bool_exp
  _or: [current_user_bool_exp]
  avatar: String_comparison_exp
  id: bigint_comparison_exp
  lang: String_comparison_exp
  nickname: String_comparison_exp
  role: String_comparison_exp
  steam_id: String_comparison_exp
  steam_profile: String_comparison_exp
}

# input type for incrementing integer column in table "current_user"
input current_user_inc_input {
  id: bigint
}

# input type for inserting data into table "current_user"
input current_user_insert_input {
  avatar: String
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# aggregate max on columns
type current_user_max_fields {
  avatar: String
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# order by max() on columns of table "current_user"
input current_user_max_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# aggregate min on columns
type current_user_min_fields {
  avatar: String
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# order by min() on columns of table "current_user"
input current_user_min_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# response of any mutation on the table "current_user"
type current_user_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [current_user!]!
}

# input type for inserting object relation for remote table "current_user"
input current_user_obj_rel_insert_input {
  data: current_user_insert_input!
}

# ordering options when selecting data from "current_user"
input current_user_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# select columns of table "current_user"
enum current_user_select_column {
  # column name
  avatar

  # column name
  id

  # column name
  lang

  # column name
  nickname

  # column name
  role

  # column name
  steam_id

  # column name
  steam_profile
}

# input type for updating data in table "current_user"
input current_user_set_input {
  avatar: String
  id: bigint
  lang: String
  nickname: String
  role: String
  steam_id: String
  steam_profile: String
}

# aggregate stddev on columns
type current_user_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "current_user"
input current_user_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type current_user_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "current_user"
input current_user_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type current_user_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "current_user"
input current_user_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type current_user_sum_fields {
  id: bigint
}

# order by sum() on columns of table "current_user"
input current_user_sum_order_by {
  id: order_by
}

# aggregate var_pop on columns
type current_user_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "current_user"
input current_user_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type current_user_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "current_user"
input current_user_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type current_user_variance_fields {
  id: Float
}

# order by variance() on columns of table "current_user"
input current_user_variance_order_by {
  id: order_by
}

type Inp {
  id: Int!
}

input Input {
  id: Int!
}

scalar json

# expression to compare columns of type json. All fields are combined with logical 'AND'.
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

type Lol {
  id: Int!
}

# mutation root
type mutation_root {
  # delete data from the table: "bot"
  delete_bot(
    # filter the rows which have to be deleted
    where: bot_bool_exp!
  ): bot_mutation_response

  # delete data from the table: "chat_message"
  delete_chat_message(
    # filter the rows which have to be deleted
    where: chat_message_bool_exp!
  ): chat_message_mutation_response

  # delete single row from the table: "chat_message"
  delete_chat_message_by_pk(id: bigint!): chat_message

  # delete data from the table: "current_user"
  delete_current_user(
    # filter the rows which have to be deleted
    where: current_user_bool_exp!
  ): current_user_mutation_response

  # delete data from the table: "role"
  delete_role(
    # filter the rows which have to be deleted
    where: role_bool_exp!
  ): role_mutation_response

  # delete single row from the table: "role"
  delete_role_by_pk(value: String!): role

  # delete data from the table: "user"
  delete_user(
    # filter the rows which have to be deleted
    where: user_bool_exp!
  ): user_mutation_response

  # delete single row from the table: "user"
  delete_user_by_pk(id: bigint!): user

  # insert data into the table: "bot"
  insert_bot(
    # the rows to be inserted
    objects: [bot_insert_input!]!
  ): bot_mutation_response

  # insert a single row into the table: "bot"
  insert_bot_one(
    # the row to be inserted
    object: bot_insert_input!
  ): bot

  # insert data into the table: "chat_message"
  insert_chat_message(
    # the rows to be inserted
    objects: [chat_message_insert_input!]!

    # on conflict condition
    on_conflict: chat_message_on_conflict
  ): chat_message_mutation_response

  # insert a single row into the table: "chat_message"
  insert_chat_message_one(
    # the row to be inserted
    object: chat_message_insert_input!

    # on conflict condition
    on_conflict: chat_message_on_conflict
  ): chat_message

  # insert data into the table: "current_user"
  insert_current_user(
    # the rows to be inserted
    objects: [current_user_insert_input!]!
  ): current_user_mutation_response

  # insert a single row into the table: "current_user"
  insert_current_user_one(
    # the row to be inserted
    object: current_user_insert_input!
  ): current_user

  # insert data into the table: "role"
  insert_role(
    # the rows to be inserted
    objects: [role_insert_input!]!

    # on conflict condition
    on_conflict: role_on_conflict
  ): role_mutation_response

  # insert a single row into the table: "role"
  insert_role_one(
    # the row to be inserted
    object: role_insert_input!

    # on conflict condition
    on_conflict: role_on_conflict
  ): role

  # insert data into the table: "user"
  insert_user(
    # the rows to be inserted
    objects: [user_insert_input!]!

    # on conflict condition
    on_conflict: user_on_conflict
  ): user_mutation_response

  # insert a single row into the table: "user"
  insert_user_one(
    # the row to be inserted
    object: user_insert_input!

    # on conflict condition
    on_conflict: user_on_conflict
  ): user

  # perform the action: "send_message"
  send_message(text: String!): SendMessageOutput

  # update data of the table: "bot"
  update_bot(
    # increments the integer columns with given value of the filtered values
    _inc: bot_inc_input

    # sets the columns of the filtered rows to the given values
    _set: bot_set_input

    # filter the rows which have to be updated
    where: bot_bool_exp!
  ): bot_mutation_response

  # update data of the table: "chat_message"
  update_chat_message(
    # increments the integer columns with given value of the filtered values
    _inc: chat_message_inc_input

    # sets the columns of the filtered rows to the given values
    _set: chat_message_set_input

    # filter the rows which have to be updated
    where: chat_message_bool_exp!
  ): chat_message_mutation_response

  # update single row of the table: "chat_message"
  update_chat_message_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: chat_message_inc_input

    # sets the columns of the filtered rows to the given values
    _set: chat_message_set_input
    pk_columns: chat_message_pk_columns_input!
  ): chat_message

  # update data of the table: "current_user"
  update_current_user(
    # increments the integer columns with given value of the filtered values
    _inc: current_user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: current_user_set_input

    # filter the rows which have to be updated
    where: current_user_bool_exp!
  ): current_user_mutation_response

  # update data of the table: "role"
  update_role(
    # sets the columns of the filtered rows to the given values
    _set: role_set_input

    # filter the rows which have to be updated
    where: role_bool_exp!
  ): role_mutation_response

  # update single row of the table: "role"
  update_role_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: role_set_input
    pk_columns: role_pk_columns_input!
  ): role

  # update data of the table: "user"
  update_user(
    # increments the integer columns with given value of the filtered values
    _inc: user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: user_set_input

    # filter the rows which have to be updated
    where: user_bool_exp!
  ): user_mutation_response

  # update single row of the table: "user"
  update_user_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

type Output {
  money: Int!
}

# query root
type query_root {
  # fetch data from the table: "bot"
  bot(
    # distinct select on columns
    distinct_on: [bot_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [bot_order_by!]

    # filter the rows returned
    where: bot_bool_exp
  ): [bot!]!

  # fetch aggregated fields from the table: "bot"
  bot_aggregate(
    # distinct select on columns
    distinct_on: [bot_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [bot_order_by!]

    # filter the rows returned
    where: bot_bool_exp
  ): bot_aggregate!

  # fetch data from the table: "chat_message"
  chat_message(
    # distinct select on columns
    distinct_on: [chat_message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [chat_message_order_by!]

    # filter the rows returned
    where: chat_message_bool_exp
  ): [chat_message!]!

  # fetch aggregated fields from the table: "chat_message"
  chat_message_aggregate(
    # distinct select on columns
    distinct_on: [chat_message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [chat_message_order_by!]

    # filter the rows returned
    where: chat_message_bool_exp
  ): chat_message_aggregate!

  # fetch data from the table: "chat_message" using primary key columns
  chat_message_by_pk(id: bigint!): chat_message

  # fetch data from the table: "current_user"
  current_user(
    # distinct select on columns
    distinct_on: [current_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [current_user_order_by!]

    # filter the rows returned
    where: current_user_bool_exp
  ): [current_user!]!

  # fetch aggregated fields from the table: "current_user"
  current_user_aggregate(
    # distinct select on columns
    distinct_on: [current_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [current_user_order_by!]

    # filter the rows returned
    where: current_user_bool_exp
  ): current_user_aggregate!

  # fetch data from the table: "role"
  role(
    # distinct select on columns
    distinct_on: [role_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [role_order_by!]

    # filter the rows returned
    where: role_bool_exp
  ): [role!]!

  # fetch aggregated fields from the table: "role"
  role_aggregate(
    # distinct select on columns
    distinct_on: [role_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [role_order_by!]

    # filter the rows returned
    where: role_bool_exp
  ): role_aggregate!

  # fetch data from the table: "role" using primary key columns
  role_by_pk(value: String!): role

  # fetch data from the table: "user"
  user(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): [user!]!

  # fetch aggregated fields from the table: "user"
  user_aggregate(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): user_aggregate!

  # fetch data from the table: "user" using primary key columns
  user_by_pk(id: bigint!): user
}

# columns and relationships of "role"
type role {
  value: String!
}

# aggregated selection of "role"
type role_aggregate {
  aggregate: role_aggregate_fields
  nodes: [role!]!
}

# aggregate fields of "role"
type role_aggregate_fields {
  count(columns: [role_select_column!], distinct: Boolean): Int
  max: role_max_fields
  min: role_min_fields
}

# order by aggregate values of table "role"
input role_aggregate_order_by {
  count: order_by
  max: role_max_order_by
  min: role_min_order_by
}

# input type for inserting array relation for remote table "role"
input role_arr_rel_insert_input {
  data: [role_insert_input!]!
  on_conflict: role_on_conflict
}

# Boolean expression to filter rows from the table "role". All fields are combined with a logical 'AND'.
input role_bool_exp {
  _and: [role_bool_exp]
  _not: role_bool_exp
  _or: [role_bool_exp]
  value: String_comparison_exp
}

# unique or primary key constraints on table "role"
enum role_constraint {
  # unique or primary key constraint
  role_pkey
}

enum role_enum {
  anonymous
  owner
  user
}

# expression to compare columns of type role_enum. All fields are combined with logical 'AND'.
input role_enum_comparison_exp {
  _eq: role_enum
  _in: [role_enum!]
  _is_null: Boolean
  _neq: role_enum
  _nin: [role_enum!]
}

# input type for inserting data into table "role"
input role_insert_input {
  value: String
}

# aggregate max on columns
type role_max_fields {
  value: String
}

# order by max() on columns of table "role"
input role_max_order_by {
  value: order_by
}

# aggregate min on columns
type role_min_fields {
  value: String
}

# order by min() on columns of table "role"
input role_min_order_by {
  value: order_by
}

# response of any mutation on the table "role"
type role_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [role!]!
}

# input type for inserting object relation for remote table "role"
input role_obj_rel_insert_input {
  data: role_insert_input!
  on_conflict: role_on_conflict
}

# on conflict condition type for table "role"
input role_on_conflict {
  constraint: role_constraint!
  update_columns: [role_update_column!]!
  where: role_bool_exp
}

# ordering options when selecting data from "role"
input role_order_by {
  value: order_by
}

# primary key columns input for table: "role"
input role_pk_columns_input {
  value: String!
}

# select columns of table "role"
enum role_select_column {
  # column name
  value
}

# input type for updating data in table "role"
input role_set_input {
  value: String
}

# update columns of table "role"
enum role_update_column {
  # column name
  value
}

input SampleInput {
  password: String!
  username: String!
}

input SampleInputtttt {
  password: String!
  username: String!
}

type SampleInputttttpppp {
  id: Int!
}

type SampleOutput {
  accessToken: String!
}

type SendChatMessageOutput {
  id: Int!
}

input SendMessageInput {
  text: String!
}

type SendMessageOutput {
  id: bigint!
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "bot"
  bot(
    # distinct select on columns
    distinct_on: [bot_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [bot_order_by!]

    # filter the rows returned
    where: bot_bool_exp
  ): [bot!]!

  # fetch aggregated fields from the table: "bot"
  bot_aggregate(
    # distinct select on columns
    distinct_on: [bot_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [bot_order_by!]

    # filter the rows returned
    where: bot_bool_exp
  ): bot_aggregate!

  # fetch data from the table: "chat_message"
  chat_message(
    # distinct select on columns
    distinct_on: [chat_message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [chat_message_order_by!]

    # filter the rows returned
    where: chat_message_bool_exp
  ): [chat_message!]!

  # fetch aggregated fields from the table: "chat_message"
  chat_message_aggregate(
    # distinct select on columns
    distinct_on: [chat_message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [chat_message_order_by!]

    # filter the rows returned
    where: chat_message_bool_exp
  ): chat_message_aggregate!

  # fetch data from the table: "chat_message" using primary key columns
  chat_message_by_pk(id: bigint!): chat_message

  # fetch data from the table: "current_user"
  current_user(
    # distinct select on columns
    distinct_on: [current_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [current_user_order_by!]

    # filter the rows returned
    where: current_user_bool_exp
  ): [current_user!]!

  # fetch aggregated fields from the table: "current_user"
  current_user_aggregate(
    # distinct select on columns
    distinct_on: [current_user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [current_user_order_by!]

    # filter the rows returned
    where: current_user_bool_exp
  ): current_user_aggregate!

  # fetch data from the table: "role"
  role(
    # distinct select on columns
    distinct_on: [role_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [role_order_by!]

    # filter the rows returned
    where: role_bool_exp
  ): [role!]!

  # fetch aggregated fields from the table: "role"
  role_aggregate(
    # distinct select on columns
    distinct_on: [role_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [role_order_by!]

    # filter the rows returned
    where: role_bool_exp
  ): role_aggregate!

  # fetch data from the table: "role" using primary key columns
  role_by_pk(value: String!): role

  # fetch data from the table: "user"
  user(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): [user!]!

  # fetch aggregated fields from the table: "user"
  user_aggregate(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): user_aggregate!

  # fetch data from the table: "user" using primary key columns
  user_by_pk(id: bigint!): user
}

scalar timestamptz

# columns and relationships of "user"
type user {
  avatar: String!
  bot: Boolean!
  id: bigint!
  lang: String!
  nickname: String!
  role: role_enum!
  steam_id: String!
  steam_profile: String!
}

# aggregated selection of "user"
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

# aggregate fields of "user"
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

# order by aggregate values of table "user"
input user_aggregate_order_by {
  avg: user_avg_order_by
  count: order_by
  max: user_max_order_by
  min: user_min_order_by
  stddev: user_stddev_order_by
  stddev_pop: user_stddev_pop_order_by
  stddev_samp: user_stddev_samp_order_by
  sum: user_sum_order_by
  var_pop: user_var_pop_order_by
  var_samp: user_var_samp_order_by
  variance: user_variance_order_by
}

# input type for inserting array relation for remote table "user"
input user_arr_rel_insert_input {
  data: [user_insert_input!]!
  on_conflict: user_on_conflict
}

# aggregate avg on columns
type user_avg_fields {
  id: Float
}

# order by avg() on columns of table "user"
input user_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
input user_bool_exp {
  _and: [user_bool_exp]
  _not: user_bool_exp
  _or: [user_bool_exp]
  avatar: String_comparison_exp
  bot: Boolean_comparison_exp
  id: bigint_comparison_exp
  lang: String_comparison_exp
  nickname: String_comparison_exp
  role: role_enum_comparison_exp
  steam_id: String_comparison_exp
  steam_profile: String_comparison_exp
}

# unique or primary key constraints on table "user"
enum user_constraint {
  # unique or primary key constraint
  user_pkey

  # unique or primary key constraint
  user_steam_id_key
}

# input type for incrementing integer column in table "user"
input user_inc_input {
  id: bigint
}

# input type for inserting data into table "user"
input user_insert_input {
  avatar: String
  bot: Boolean
  id: bigint
  lang: String
  nickname: String
  role: role_enum
  steam_id: String
  steam_profile: String
}

# aggregate max on columns
type user_max_fields {
  avatar: String
  id: bigint
  lang: String
  nickname: String
  steam_id: String
  steam_profile: String
}

# order by max() on columns of table "user"
input user_max_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  nickname: order_by
  steam_id: order_by
  steam_profile: order_by
}

# aggregate min on columns
type user_min_fields {
  avatar: String
  id: bigint
  lang: String
  nickname: String
  steam_id: String
  steam_profile: String
}

# order by min() on columns of table "user"
input user_min_order_by {
  avatar: order_by
  id: order_by
  lang: order_by
  nickname: order_by
  steam_id: order_by
  steam_profile: order_by
}

# response of any mutation on the table "user"
type user_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [user!]!
}

# input type for inserting object relation for remote table "user"
input user_obj_rel_insert_input {
  data: user_insert_input!
  on_conflict: user_on_conflict
}

# on conflict condition type for table "user"
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]!
  where: user_bool_exp
}

# ordering options when selecting data from "user"
input user_order_by {
  avatar: order_by
  bot: order_by
  id: order_by
  lang: order_by
  nickname: order_by
  role: order_by
  steam_id: order_by
  steam_profile: order_by
}

# primary key columns input for table: "user"
input user_pk_columns_input {
  id: bigint!
}

# select columns of table "user"
enum user_select_column {
  # column name
  avatar

  # column name
  bot

  # column name
  id

  # column name
  lang

  # column name
  nickname

  # column name
  role

  # column name
  steam_id

  # column name
  steam_profile
}

# input type for updating data in table "user"
input user_set_input {
  avatar: String
  bot: Boolean
  id: bigint
  lang: String
  nickname: String
  role: role_enum
  steam_id: String
  steam_profile: String
}

# aggregate stddev on columns
type user_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "user"
input user_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type user_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "user"
input user_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type user_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "user"
input user_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type user_sum_fields {
  id: bigint
}

# order by sum() on columns of table "user"
input user_sum_order_by {
  id: order_by
}

# update columns of table "user"
enum user_update_column {
  # column name
  avatar

  # column name
  bot

  # column name
  id

  # column name
  lang

  # column name
  nickname

  # column name
  role

  # column name
  steam_id

  # column name
  steam_profile
}

# aggregate var_pop on columns
type user_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "user"
input user_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type user_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "user"
input user_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type user_variance_fields {
  id: Float
}

# order by variance() on columns of table "user"
input user_variance_order_by {
  id: order_by
}

scalar uuid

