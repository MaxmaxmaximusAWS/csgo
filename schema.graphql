schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

type CreateUserOutput {
  id: Int!
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar json

# expression to compare columns of type json. All fields are combined with logical 'AND'.
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

# columns and relationships of "message"
type message {
  # An object relationship
  author: user!
  author_id: Int!
  id: Int!
  text: String!
}

# aggregated selection of "message"
type message_aggregate {
  aggregate: message_aggregate_fields
  nodes: [message!]!
}

# aggregate fields of "message"
type message_aggregate_fields {
  avg: message_avg_fields
  count(columns: [message_select_column!], distinct: Boolean): Int
  max: message_max_fields
  min: message_min_fields
  stddev: message_stddev_fields
  stddev_pop: message_stddev_pop_fields
  stddev_samp: message_stddev_samp_fields
  sum: message_sum_fields
  var_pop: message_var_pop_fields
  var_samp: message_var_samp_fields
  variance: message_variance_fields
}

# order by aggregate values of table "message"
input message_aggregate_order_by {
  avg: message_avg_order_by
  count: order_by
  max: message_max_order_by
  min: message_min_order_by
  stddev: message_stddev_order_by
  stddev_pop: message_stddev_pop_order_by
  stddev_samp: message_stddev_samp_order_by
  sum: message_sum_order_by
  var_pop: message_var_pop_order_by
  var_samp: message_var_samp_order_by
  variance: message_variance_order_by
}

# input type for inserting array relation for remote table "message"
input message_arr_rel_insert_input {
  data: [message_insert_input!]!
  on_conflict: message_on_conflict
}

# aggregate avg on columns
type message_avg_fields {
  author_id: Float
  id: Float
}

# order by avg() on columns of table "message"
input message_avg_order_by {
  author_id: order_by
  id: order_by
}

# Boolean expression to filter rows from the table "message". All fields are combined with a logical 'AND'.
input message_bool_exp {
  _and: [message_bool_exp]
  _not: message_bool_exp
  _or: [message_bool_exp]
  author: user_bool_exp
  author_id: Int_comparison_exp
  id: Int_comparison_exp
  text: String_comparison_exp
}

# unique or primary key constraints on table "message"
enum message_constraint {
  # unique or primary key constraint
  message_pkey
}

# input type for incrementing integer column in table "message"
input message_inc_input {
  author_id: Int
  id: Int
}

# input type for inserting data into table "message"
input message_insert_input {
  author: user_obj_rel_insert_input
  author_id: Int
  id: Int
  text: String
}

# aggregate max on columns
type message_max_fields {
  author_id: Int
  id: Int
  text: String
}

# order by max() on columns of table "message"
input message_max_order_by {
  author_id: order_by
  id: order_by
  text: order_by
}

# aggregate min on columns
type message_min_fields {
  author_id: Int
  id: Int
  text: String
}

# order by min() on columns of table "message"
input message_min_order_by {
  author_id: order_by
  id: order_by
  text: order_by
}

# response of any mutation on the table "message"
type message_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [message!]!
}

# input type for inserting object relation for remote table "message"
input message_obj_rel_insert_input {
  data: message_insert_input!
  on_conflict: message_on_conflict
}

# on conflict condition type for table "message"
input message_on_conflict {
  constraint: message_constraint!
  update_columns: [message_update_column!]!
  where: message_bool_exp
}

# ordering options when selecting data from "message"
input message_order_by {
  author: user_order_by
  author_id: order_by
  id: order_by
  text: order_by
}

# primary key columns input for table: "message"
input message_pk_columns_input {
  id: Int!
}

# select columns of table "message"
enum message_select_column {
  # column name
  author_id

  # column name
  id

  # column name
  text
}

# input type for updating data in table "message"
input message_set_input {
  author_id: Int
  id: Int
  text: String
}

# aggregate stddev on columns
type message_stddev_fields {
  author_id: Float
  id: Float
}

# order by stddev() on columns of table "message"
input message_stddev_order_by {
  author_id: order_by
  id: order_by
}

# aggregate stddev_pop on columns
type message_stddev_pop_fields {
  author_id: Float
  id: Float
}

# order by stddev_pop() on columns of table "message"
input message_stddev_pop_order_by {
  author_id: order_by
  id: order_by
}

# aggregate stddev_samp on columns
type message_stddev_samp_fields {
  author_id: Float
  id: Float
}

# order by stddev_samp() on columns of table "message"
input message_stddev_samp_order_by {
  author_id: order_by
  id: order_by
}

# aggregate sum on columns
type message_sum_fields {
  author_id: Int
  id: Int
}

# order by sum() on columns of table "message"
input message_sum_order_by {
  author_id: order_by
  id: order_by
}

# update columns of table "message"
enum message_update_column {
  # column name
  author_id

  # column name
  id

  # column name
  text
}

# aggregate var_pop on columns
type message_var_pop_fields {
  author_id: Float
  id: Float
}

# order by var_pop() on columns of table "message"
input message_var_pop_order_by {
  author_id: order_by
  id: order_by
}

# aggregate var_samp on columns
type message_var_samp_fields {
  author_id: Float
  id: Float
}

# order by var_samp() on columns of table "message"
input message_var_samp_order_by {
  author_id: order_by
  id: order_by
}

# aggregate variance on columns
type message_variance_fields {
  author_id: Float
  id: Float
}

# order by variance() on columns of table "message"
input message_variance_order_by {
  author_id: order_by
  id: order_by
}

# mutation root
type mutation_root {
  # perform the action: "createUser"
  createUser(avatar: String, nickname: String, steam_id: String): CreateUserOutput

  # delete data from the table: "message"
  delete_message(
    # filter the rows which have to be deleted
    where: message_bool_exp!
  ): message_mutation_response

  # delete single row from the table: "message"
  delete_message_by_pk(id: Int!): message

  # delete data from the table: "user"
  delete_user(
    # filter the rows which have to be deleted
    where: user_bool_exp!
  ): user_mutation_response

  # delete single row from the table: "user"
  delete_user_by_pk(id: Int!): user

  # insert data into the table: "message"
  insert_message(
    # the rows to be inserted
    objects: [message_insert_input!]!

    # on conflict condition
    on_conflict: message_on_conflict
  ): message_mutation_response

  # insert a single row into the table: "message"
  insert_message_one(
    # the row to be inserted
    object: message_insert_input!

    # on conflict condition
    on_conflict: message_on_conflict
  ): message

  # insert data into the table: "user"
  insert_user(
    # the rows to be inserted
    objects: [user_insert_input!]!

    # on conflict condition
    on_conflict: user_on_conflict
  ): user_mutation_response

  # insert a single row into the table: "user"
  insert_user_one(
    # the row to be inserted
    object: user_insert_input!

    # on conflict condition
    on_conflict: user_on_conflict
  ): user

  # update data of the table: "message"
  update_message(
    # increments the integer columns with given value of the filtered values
    _inc: message_inc_input

    # sets the columns of the filtered rows to the given values
    _set: message_set_input

    # filter the rows which have to be updated
    where: message_bool_exp!
  ): message_mutation_response

  # update single row of the table: "message"
  update_message_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: message_inc_input

    # sets the columns of the filtered rows to the given values
    _set: message_set_input
    pk_columns: message_pk_columns_input!
  ): message

  # update data of the table: "user"
  update_user(
    # increments the integer columns with given value of the filtered values
    _inc: user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: user_set_input

    # filter the rows which have to be updated
    where: user_bool_exp!
  ): user_mutation_response

  # update single row of the table: "user"
  update_user_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: user_inc_input

    # sets the columns of the filtered rows to the given values
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "message"
  message(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): [message!]!

  # fetch aggregated fields from the table: "message"
  message_aggregate(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): message_aggregate!

  # fetch data from the table: "message" using primary key columns
  message_by_pk(id: Int!): message

  # fetch data from the table: "user"
  user(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): [user!]!

  # fetch aggregated fields from the table: "user"
  user_aggregate(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): user_aggregate!

  # fetch data from the table: "user" using primary key columns
  user_by_pk(id: Int!): user
}

input SampleInput {
  password: String!
  username: String!
}

type SampleOutput {
  accessToken: String!
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "message"
  message(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): [message!]!

  # fetch aggregated fields from the table: "message"
  message_aggregate(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): message_aggregate!

  # fetch data from the table: "message" using primary key columns
  message_by_pk(id: Int!): message

  # fetch data from the table: "user"
  user(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): [user!]!

  # fetch aggregated fields from the table: "user"
  user_aggregate(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): user_aggregate!

  # fetch data from the table: "user" using primary key columns
  user_by_pk(id: Int!): user
}

scalar timestamptz

# columns and relationships of "user"
type user {
  avatar: String!
  id: Int!

  # An array relationship
  messages(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): [message!]!

  # An aggregated array relationship
  messages_aggregate(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): message_aggregate!
  nickname: String!
  steam_id: String!
}

# aggregated selection of "user"
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

# aggregate fields of "user"
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

# order by aggregate values of table "user"
input user_aggregate_order_by {
  avg: user_avg_order_by
  count: order_by
  max: user_max_order_by
  min: user_min_order_by
  stddev: user_stddev_order_by
  stddev_pop: user_stddev_pop_order_by
  stddev_samp: user_stddev_samp_order_by
  sum: user_sum_order_by
  var_pop: user_var_pop_order_by
  var_samp: user_var_samp_order_by
  variance: user_variance_order_by
}

# input type for inserting array relation for remote table "user"
input user_arr_rel_insert_input {
  data: [user_insert_input!]!
  on_conflict: user_on_conflict
}

# aggregate avg on columns
type user_avg_fields {
  id: Float
}

# order by avg() on columns of table "user"
input user_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
input user_bool_exp {
  _and: [user_bool_exp]
  _not: user_bool_exp
  _or: [user_bool_exp]
  avatar: String_comparison_exp
  id: Int_comparison_exp
  messages: message_bool_exp
  nickname: String_comparison_exp
  steam_id: String_comparison_exp
}

# unique or primary key constraints on table "user"
enum user_constraint {
  # unique or primary key constraint
  user_pkey

  # unique or primary key constraint
  user_steam_id_key
}

# input type for incrementing integer column in table "user"
input user_inc_input {
  id: Int
}

# input type for inserting data into table "user"
input user_insert_input {
  avatar: String
  id: Int
  messages: message_arr_rel_insert_input
  nickname: String
  steam_id: String
}

# aggregate max on columns
type user_max_fields {
  avatar: String
  id: Int
  nickname: String
  steam_id: String
}

# order by max() on columns of table "user"
input user_max_order_by {
  avatar: order_by
  id: order_by
  nickname: order_by
  steam_id: order_by
}

# aggregate min on columns
type user_min_fields {
  avatar: String
  id: Int
  nickname: String
  steam_id: String
}

# order by min() on columns of table "user"
input user_min_order_by {
  avatar: order_by
  id: order_by
  nickname: order_by
  steam_id: order_by
}

# response of any mutation on the table "user"
type user_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [user!]!
}

# input type for inserting object relation for remote table "user"
input user_obj_rel_insert_input {
  data: user_insert_input!
  on_conflict: user_on_conflict
}

# on conflict condition type for table "user"
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]!
  where: user_bool_exp
}

# ordering options when selecting data from "user"
input user_order_by {
  avatar: order_by
  id: order_by
  messages_aggregate: message_aggregate_order_by
  nickname: order_by
  steam_id: order_by
}

# primary key columns input for table: "user"
input user_pk_columns_input {
  id: Int!
}

# select columns of table "user"
enum user_select_column {
  # column name
  avatar

  # column name
  id

  # column name
  nickname

  # column name
  steam_id
}

# input type for updating data in table "user"
input user_set_input {
  avatar: String
  id: Int
  nickname: String
  steam_id: String
}

# aggregate stddev on columns
type user_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "user"
input user_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type user_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "user"
input user_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type user_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "user"
input user_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type user_sum_fields {
  id: Int
}

# order by sum() on columns of table "user"
input user_sum_order_by {
  id: order_by
}

# update columns of table "user"
enum user_update_column {
  # column name
  avatar

  # column name
  id

  # column name
  nickname

  # column name
  steam_id
}

# aggregate var_pop on columns
type user_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "user"
input user_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type user_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "user"
input user_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type user_variance_fields {
  id: Float
}

# order by variance() on columns of table "user"
input user_variance_order_by {
  id: order_by
}

scalar uuid

