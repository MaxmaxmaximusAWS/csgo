{"ast":null,"code":"var _s=$RefreshSig$();import{useState,useRef,useEffect,useCallback,useLayoutEffect}from\"react\";import ResizeObserver from'resize-observer-polyfill';// const ro = new ResizeObserver((entries, observer) => {\n//   for (const entry of entries) {\n//     const {left, top, width, height} = entry.contentRect;\n//\n//     console.log('Element:', entry.target);\n//     console.log(`Element's size: ${ width }px x ${ height }px`);\n//     console.log(`Element's paddings: ${ top }px ; ${ left }px`);\n//   }\n// });\n//\n// ro.observe(document.body);\n//\n// console.log(ro)\nfunction getDimensions(node,props){if(node){var dimensions=node.getBoundingClientRect().toJSON();dimensions.offsetLeft=node.offsetLeft;dimensions.offsetTop=node.offsetTop;}else{var dimensions={bottom:0,height:0,left:0,offsetLeft:0,offsetTop:0,right:0,top:0,width:0,x:0,y:0};}if(!props.length){return dimensions;}var clearedDimensions={};for(var i=0;i<props.length;i++){var prop=props[i];clearedDimensions[prop]=dimensions[prop];}return clearedDimensions;}function isChanged(dimensions,newDimensions){for(var key in newDimensions){if(newDimensions.hasOwnProperty(key)){if(newDimensions[key]!==dimensions[key]){return true;}}}return false;}function startObserver(){// console.log('startObserver')\n}function stopObserver(){// console.log('stopObserver')\n}export default function useSize(){_s();for(var _len=arguments.length,props=new Array(_len),_key=0;_key<_len;_key++){props[_key]=arguments[_key];}var ref=useRef();var _useState=useState(function(){return getDimensions(ref.current,props);}),dimensions=_useState[0],setDimensions=_useState[1];useEffect(function(){function updateDimensions(){var newDimensions=getDimensions(ref.current,props);if(isChanged(dimensions,newDimensions)){setDimensions(newDimensions);}}updateDimensions();});return[ref,dimensions];}_s(useSize,\"bd5Cbt9DGWFI1TRqpvUYWBhzrqA=\");","map":{"version":3,"sources":["C:/localhost/csshot/services/www/hooks/useSize.js"],"names":["useState","useRef","useEffect","useCallback","useLayoutEffect","ResizeObserver","getDimensions","node","props","dimensions","getBoundingClientRect","toJSON","offsetLeft","offsetTop","bottom","height","left","right","top","width","x","y","length","clearedDimensions","i","prop","isChanged","newDimensions","key","hasOwnProperty","startObserver","stopObserver","useSize","ref","current","setDimensions","updateDimensions"],"mappings":"sBAAA,OAASA,QAAT,CAAmBC,MAAnB,CAA2BC,SAA3B,CAAsCC,WAAtC,CAAmDC,eAAnD,KAA0E,OAA1E,CACA,MAAOC,CAAAA,cAAP,KAA2B,0BAA3B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,QAASC,CAAAA,aAAT,CAAuBC,IAAvB,CAA6BC,KAA7B,CAAoC,CAClC,GAAID,IAAJ,CAAU,CACR,GAAIE,CAAAA,UAAU,CAAGF,IAAI,CAACG,qBAAL,GAA6BC,MAA7B,EAAjB,CACAF,UAAU,CAACG,UAAX,CAAwBL,IAAI,CAACK,UAA7B,CACAH,UAAU,CAACI,SAAX,CAAuBN,IAAI,CAACM,SAA5B,CACD,CAJD,IAIO,CACL,GAAIJ,CAAAA,UAAU,CAAG,CACfK,MAAM,CAAE,CADO,CACJC,MAAM,CAAE,CADJ,CACOC,IAAI,CAAE,CADb,CACgBJ,UAAU,CAAE,CAD5B,CAC+BC,SAAS,CAAE,CAD1C,CAEfI,KAAK,CAAE,CAFQ,CAELC,GAAG,CAAE,CAFA,CAEGC,KAAK,CAAE,CAFV,CAEaC,CAAC,CAAE,CAFhB,CAEmBC,CAAC,CAAE,CAFtB,CAAjB,CAID,CAED,GAAI,CAACb,KAAK,CAACc,MAAX,CAAmB,CACjB,MAAOb,CAAAA,UAAP,CACD,CAED,GAAIc,CAAAA,iBAAiB,CAAG,EAAxB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGhB,KAAK,CAACc,MAA1B,CAAkCE,CAAC,EAAnC,CAAuC,CACrC,GAAIC,CAAAA,IAAI,CAAGjB,KAAK,CAACgB,CAAD,CAAhB,CACAD,iBAAiB,CAACE,IAAD,CAAjB,CAA0BhB,UAAU,CAACgB,IAAD,CAApC,CACD,CAED,MAAOF,CAAAA,iBAAP,CACD,CAGD,QAASG,CAAAA,SAAT,CAAmBjB,UAAnB,CAA+BkB,aAA/B,CAA8C,CAC5C,IAAK,GAAIC,CAAAA,GAAT,GAAgBD,CAAAA,aAAhB,CAA+B,CAC7B,GAAIA,aAAa,CAACE,cAAd,CAA6BD,GAA7B,CAAJ,CAAuC,CACrC,GAAID,aAAa,CAACC,GAAD,CAAb,GAAuBnB,UAAU,CAACmB,GAAD,CAArC,CAA4C,CAC1C,MAAO,KAAP,CACD,CACF,CACF,CAED,MAAO,MAAP,CACD,CAGD,QAASE,CAAAA,aAAT,EAAyB,CACvB;AACD,CAGD,QAASC,CAAAA,YAAT,EAAwB,CACtB;AACD,CAGD,cAAe,SAASC,CAAAA,OAAT,EAA2B,oCAAPxB,KAAO,0CAAPA,KAAO,wBACxC,GAAMyB,CAAAA,GAAG,CAAGhC,MAAM,EAAlB,CADwC,cAGJD,QAAQ,CAAC,UAAM,CACjD,MAAOM,CAAAA,aAAa,CAAC2B,GAAG,CAACC,OAAL,CAAc1B,KAAd,CAApB,CACD,CAF2C,CAHJ,CAGjCC,UAHiC,cAGrB0B,aAHqB,cAQxCjC,SAAS,CAAC,UAAM,CACd,QAASkC,CAAAA,gBAAT,EAA4B,CAC1B,GAAIT,CAAAA,aAAa,CAAGrB,aAAa,CAAC2B,GAAG,CAACC,OAAL,CAAc1B,KAAd,CAAjC,CAEA,GAAIkB,SAAS,CAACjB,UAAD,CAAakB,aAAb,CAAb,CAA0C,CACxCQ,aAAa,CAACR,aAAD,CAAb,CACD,CACF,CAEDS,gBAAgB,GACjB,CAVQ,CAAT,CAaA,MAAO,CAACH,GAAD,CAAMxB,UAAN,CAAP,CACD,C,GAtBuBuB,O","sourcesContent":["import { useState, useRef, useEffect, useCallback, useLayoutEffect } from \"react\";\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\n\r\n// const ro = new ResizeObserver((entries, observer) => {\r\n//   for (const entry of entries) {\r\n//     const {left, top, width, height} = entry.contentRect;\r\n//\r\n//     console.log('Element:', entry.target);\r\n//     console.log(`Element's size: ${ width }px x ${ height }px`);\r\n//     console.log(`Element's paddings: ${ top }px ; ${ left }px`);\r\n//   }\r\n// });\r\n//\r\n// ro.observe(document.body);\r\n//\r\n// console.log(ro)\r\n\r\n\r\nfunction getDimensions(node, props) {\r\n  if (node) {\r\n    var dimensions = node.getBoundingClientRect().toJSON()\r\n    dimensions.offsetLeft = node.offsetLeft\r\n    dimensions.offsetTop = node.offsetTop\r\n  } else {\r\n    var dimensions = {\r\n      bottom: 0, height: 0, left: 0, offsetLeft: 0, offsetTop: 0,\r\n      right: 0, top: 0, width: 0, x: 0, y: 0,\r\n    }\r\n  }\r\n\r\n  if (!props.length) {\r\n    return dimensions\r\n  }\r\n\r\n  let clearedDimensions = {}\r\n  for (let i = 0; i < props.length; i++) {\r\n    let prop = props[i]\r\n    clearedDimensions[prop] = dimensions[prop]\r\n  }\r\n\r\n  return clearedDimensions\r\n}\r\n\r\n\r\nfunction isChanged(dimensions, newDimensions) {\r\n  for (let key in newDimensions) {\r\n    if (newDimensions.hasOwnProperty(key)) {\r\n      if (newDimensions[key] !== dimensions[key]) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n\r\nfunction startObserver() {\r\n  // console.log('startObserver')\r\n}\r\n\r\n\r\nfunction stopObserver() {\r\n  // console.log('stopObserver')\r\n}\r\n\r\n\r\nexport default function useSize(...props) {\r\n  const ref = useRef()\r\n\r\n  const [dimensions, setDimensions] = useState(() => {\r\n    return getDimensions(ref.current, props)\r\n  })\r\n\r\n\r\n  useEffect(() => {\r\n    function updateDimensions() {\r\n      let newDimensions = getDimensions(ref.current, props)\r\n\r\n      if (isChanged(dimensions, newDimensions)) {\r\n        setDimensions(newDimensions)\r\n      }\r\n    }\r\n\r\n    updateDimensions()\r\n  });\r\n\r\n\r\n  return [ref, dimensions]\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}
