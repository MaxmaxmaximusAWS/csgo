{"ast":null,"code":"var _jsxFileName=\"/app/services/html/lib/withApollo.js\";import React from\"react\";var __jsx=React.createElement;function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}import NextApp from\"next/app\";import{ApolloProvider}from'@apollo/react-hooks';import{ApolloClient}from\"apollo-client\";import{InMemoryCache}from\"apollo-cache-inmemory\";import{HttpLink}from\"apollo-link-http\";import{WebSocketLink}from\"apollo-link-ws\";import{ApolloLink,split}from\"apollo-link\";import{getMainDefinition}from\"apollo-utilities\";import Head from'next/head';export default function withApollo(App){function AppWithApollo(_ref){let{client,clientState}=_ref,props=_objectWithoutProperties(_ref,[\"client\",\"clientState\"]);if(!client){client=initApolloClient(clientState);}return __jsx(ApolloProvider,{client:client,__self:this,__source:{fileName:_jsxFileName,lineNumber:20,columnNumber:12}},__jsx(App,_extends({},props,{__self:this,__source:{fileName:_jsxFileName,lineNumber:21,columnNumber:7}})));}AppWithApollo.getInitialProps=async function({AppTree,ctx}){let pageProps={};let clientState={};let client=null;console.log('arguments',arguments);if(!false){// When redirecting, the response is finished.\nif(ctx.res&&ctx.res.finished){return{pageProps};}const{getDataFromTree}=require('@apollo/react-ssr');client=initApolloClient();try{await getDataFromTree(__jsx(AppTree,_extends({pageProps,client},{__self:this,__source:{fileName:_jsxFileName,lineNumber:44,columnNumber:31}})));clientState=client.cache.extract();}catch(error){console.error(error);}finally{Head.rewind();}}return{pageProps,clientState,client};};// AppWithApollo.getInitialProps = NextApp.getInitialProps\n// AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\nreturn AppWithApollo;}let browserApolloClientCache=null;function initApolloClient(clientState){if(!false)return createApolloClient(clientState);if(!browserApolloClientCache){browserApolloClientCache=createApolloClient(clientState);}return browserApolloClientCache;}function createApolloClient(clientState){const cache=new InMemoryCache();const link=createApolloLink();const client=new ApolloClient({ssrMode:!false,cache:cache.restore(clientState),link});client.toJSON=()=>null;return client;}function createApolloLink(){if(!false){return createServerLink();}return createBrowserLink();}function createServerLink(){if(false)return null;return new HttpLink({uri:`http://localhost:8080/v1/graphql`,fetch:require('isomorphic-fetch')});}function createBrowserLink(){const httpLink=new HttpLink({uri:`http://localhost:8080/v1/graphql`});const wsLink=new WebSocketLink({uri:`ws://localhost:8080/v1/graphql`,options:{reconnect:true}});const terminatingLink=split(({query})=>{const{kind,operation}=getMainDefinition(query);return kind==='OperationDefinition'&&operation==='subscription';},wsLink,httpLink);return ApolloLink.from([terminatingLink]);}","map":{"version":3,"sources":["/app/services/html/lib/withApollo.js"],"names":["NextApp","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","WebSocketLink","ApolloLink","split","getMainDefinition","Head","withApollo","App","AppWithApollo","client","clientState","props","initApolloClient","getInitialProps","AppTree","ctx","pageProps","console","log","arguments","res","finished","getDataFromTree","require","cache","extract","error","rewind","browserApolloClientCache","createApolloClient","link","createApolloLink","ssrMode","restore","toJSON","createServerLink","createBrowserLink","uri","fetch","httpLink","wsLink","options","reconnect","terminatingLink","query","kind","operation","from"],"mappings":"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","sourcesContent":["import NextApp from \"next/app\"\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { ApolloLink, split } from \"apollo-link\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport Head from 'next/head'\r\n\r\n\r\nexport default function withApollo(App) {\r\n\r\n  function AppWithApollo({client, clientState, ...props}) {\r\n\r\n    if (!client) {\r\n      client = initApolloClient(clientState)\r\n    }\r\n\r\n    return <ApolloProvider client={ client }>\r\n      <App { ...props }/>\r\n    </ApolloProvider>\r\n  }\r\n\r\n\r\n  AppWithApollo.getInitialProps = async function ({AppTree, ctx}) {\r\n    let pageProps = {}\r\n    let clientState = {}\r\n    let client = null\r\n\r\n\r\n    console.log('arguments', arguments)\r\n\r\n    if (!process.browser) {\r\n      // When redirecting, the response is finished.\r\n      if (ctx.res && ctx.res.finished) {\r\n        return {pageProps}\r\n      }\r\n\r\n      const {getDataFromTree} = require('@apollo/react-ssr')\r\n      client = initApolloClient()\r\n\r\n      try {\r\n        await getDataFromTree(<AppTree  { ...{pageProps, client} }/>)\r\n        clientState = client.cache.extract()\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        Head.rewind()\r\n      }\r\n\r\n    }\r\n\r\n    return {pageProps, clientState, client}\r\n  }\r\n\r\n\r\n  // AppWithApollo.getInitialProps = NextApp.getInitialProps\r\n  // AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\r\n\r\n  return AppWithApollo\r\n\r\n}\r\n\r\n\r\nlet browserApolloClientCache = null\r\n\r\n\r\nfunction initApolloClient(clientState) {\r\n  if (!process.browser) return createApolloClient(clientState)\r\n\r\n  if (!browserApolloClientCache) {\r\n    browserApolloClientCache = createApolloClient(clientState)\r\n  }\r\n  return browserApolloClientCache\r\n}\r\n\r\n\r\nfunction createApolloClient(clientState) {\r\n  const cache = new InMemoryCache()\r\n  const link = createApolloLink()\r\n\r\n  const client = new ApolloClient({\r\n    ssrMode: !process.browser,\r\n    cache: cache.restore(clientState),\r\n    link\r\n  })\r\n\r\n  client.toJSON = () => null\r\n  return client\r\n}\r\n\r\n\r\nfunction createApolloLink() {\r\n  if (!process.browser) {\r\n    return createServerLink()\r\n  }\r\n\r\n  return createBrowserLink()\r\n}\r\n\r\nfunction createServerLink() {\r\n  if (process.browser) return null\r\n\r\n  return new HttpLink({\r\n    uri: `http://localhost:8080/v1/graphql`,\r\n    fetch: require('isomorphic-fetch')\r\n  })\r\n}\r\n\r\n\r\nfunction createBrowserLink() {\r\n  const httpLink = new HttpLink({\r\n    uri: `http://localhost:8080/v1/graphql`,\r\n  })\r\n\r\n  const wsLink = new WebSocketLink({\r\n    uri: `ws://localhost:8080/v1/graphql`,\r\n    options: {\r\n      reconnect: true,\r\n    },\r\n  })\r\n\r\n  const terminatingLink = split(({query}) => {\r\n    const {kind, operation} = getMainDefinition(query);\r\n    return (\r\n      kind === 'OperationDefinition' && operation === 'subscription'\r\n    );\r\n  }, wsLink, httpLink)\r\n\r\n  return ApolloLink.from([terminatingLink])\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}