{"ast":null,"code":"var _jsxFileName=\"/app/services/next-js/lib/withApollo.js\";import React from\"react\";var __jsx=React.createElement;function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}import NextApp from\"next/app\";import{ApolloProvider}from'@apollo/react-hooks';import{ApolloClient}from\"apollo-client\";import{InMemoryCache}from\"apollo-cache-inmemory\";import{HttpLink}from\"apollo-link-http\";import{WebSocketLink}from\"apollo-link-ws\";import{ApolloLink,split}from\"apollo-link\";import{getMainDefinition}from\"apollo-utilities\";import Head from'next/head';export default function withApollo(App,options){function AppWithApollo(_ref){let{client,clientState}=_ref,props=_objectWithoutProperties(_ref,[\"client\",\"clientState\"]);if(!client){client=initApolloClient(options,clientState);}console.log('props',props);return __jsx(ApolloProvider,{client:client,__self:this,__source:{fileName:_jsxFileName,lineNumber:23,columnNumber:12}},__jsx(App,_extends({},props,{__self:this,__source:{fileName:_jsxFileName,lineNumber:24,columnNumber:7}})));}AppWithApollo.getInitialProps=async function({AppTree,ctx}){let pageProps={};let clientState={};let client=null;if(!false){// When redirecting, the response is finished.\nif(ctx.res&&ctx.res.finished){return{pageProps};}const{getDataFromTree}=require('@apollo/react-ssr');client=initApolloClient(options);try{await getDataFromTree(__jsx(AppTree,_extends({pageProps,client},{__self:this,__source:{fileName:_jsxFileName,lineNumber:44,columnNumber:31}})));clientState=client.cache.extract();}catch(error){console.error(error);}finally{Head.rewind();}}return{pageProps,clientState,client};};// AppWithApollo.getInitialProps = NextApp.getInitialProps\n// AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\nreturn AppWithApollo;}let browserApolloClientCache=null;function initApolloClient(options,clientState=null){if(!false){return createApolloClient(options,clientState);}if(!browserApolloClientCache){browserApolloClientCache=createApolloClient(options,clientState);}return browserApolloClientCache;}function createApolloClient(options,clientState=null){const cache=new InMemoryCache();const link=createLink(options);const client=new ApolloClient({ssrMode:!false,cache:cache.restore(clientState),link});client.toJSON=()=>null;return client;}function createLink(options){if(!false){return new HttpLink({uri:`http://graphql-engine:8080/v1/graphql`,fetch:require('isomorphic-fetch')});}return createBrowserLink();}function createBrowserLink(){const httpLink=new HttpLink({credentials:'include',uri:`http://localhost:8080/v1/graphql`});const wsLink=new WebSocketLink({uri:`ws://localhost:8080/v1/graphql`,credentials:'include',options:{reconnect:true}});const terminatingLink=split(({query})=>{const{kind,operation}=getMainDefinition(query);return kind==='OperationDefinition'&&operation==='subscription';},wsLink,httpLink);return ApolloLink.from([terminatingLink]);}","map":{"version":3,"sources":["/app/services/next-js/lib/withApollo.js"],"names":["NextApp","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","WebSocketLink","ApolloLink","split","getMainDefinition","Head","withApollo","App","options","AppWithApollo","client","clientState","props","initApolloClient","console","log","getInitialProps","AppTree","ctx","pageProps","res","finished","getDataFromTree","require","cache","extract","error","rewind","browserApolloClientCache","createApolloClient","link","createLink","ssrMode","restore","toJSON","uri","fetch","createBrowserLink","httpLink","credentials","wsLink","reconnect","terminatingLink","query","kind","operation","from"],"mappings":"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","sourcesContent":["import NextApp from \"next/app\"\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { ApolloLink, split } from \"apollo-link\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport Head from 'next/head'\r\n\r\n\r\nexport default function withApollo(App, options) {\r\n\r\n  function AppWithApollo({client, clientState, ...props}) {\r\n\r\n    if (!client) {\r\n      client = initApolloClient(options, clientState)\r\n    }\r\n\r\n    console.log('props', props)\r\n\r\n\r\n    return <ApolloProvider client={ client }>\r\n      <App { ...props }/>\r\n    </ApolloProvider>\r\n  }\r\n\r\n\r\n  AppWithApollo.getInitialProps = async function ({AppTree, ctx}) {\r\n    let pageProps = {}\r\n    let clientState = {}\r\n    let client = null\r\n\r\n    if (!process.browser) {\r\n      // When redirecting, the response is finished.\r\n      if (ctx.res && ctx.res.finished) {\r\n        return {pageProps}\r\n      }\r\n\r\n      const {getDataFromTree} = require('@apollo/react-ssr')\r\n      client = initApolloClient(options)\r\n\r\n      try {\r\n        await getDataFromTree(<AppTree  { ...{pageProps, client} }/>)\r\n        clientState = client.cache.extract()\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        Head.rewind()\r\n      }\r\n\r\n    }\r\n\r\n    return {pageProps, clientState, client}\r\n  }\r\n\r\n\r\n  // AppWithApollo.getInitialProps = NextApp.getInitialProps\r\n  // AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\r\n\r\n  return AppWithApollo\r\n\r\n}\r\n\r\n\r\nlet browserApolloClientCache = null\r\n\r\n\r\nfunction initApolloClient(options, clientState = null) {\r\n  if (!process.browser) {\r\n    return createApolloClient(options, clientState)\r\n  }\r\n\r\n  if (!browserApolloClientCache) {\r\n    browserApolloClientCache = createApolloClient(options, clientState)\r\n  }\r\n  return browserApolloClientCache\r\n}\r\n\r\n\r\nfunction createApolloClient(options, clientState = null) {\r\n  const cache = new InMemoryCache()\r\n  const link = createLink(options)\r\n\r\n  const client = new ApolloClient({\r\n    ssrMode: !process.browser,\r\n    cache: cache.restore(clientState),\r\n    link\r\n  })\r\n\r\n  client.toJSON = () => null\r\n  return client\r\n}\r\n\r\n\r\nfunction createLink(options) {\r\n  if (!process.browser) {\r\n    return new HttpLink({\r\n      uri: `http://graphql-engine:8080/v1/graphql`,\r\n      fetch: require('isomorphic-fetch')\r\n    })\r\n  }\r\n\r\n  return createBrowserLink()\r\n}\r\n\r\n\r\nfunction createBrowserLink() {\r\n  const httpLink = new HttpLink({\r\n    credentials: 'include',\r\n    uri: `http://localhost:8080/v1/graphql`,\r\n  })\r\n\r\n  const wsLink = new WebSocketLink({\r\n    uri: `ws://localhost:8080/v1/graphql`,\r\n    credentials: 'include',\r\n    options: {\r\n      reconnect: true,\r\n    },\r\n  })\r\n\r\n  const terminatingLink = split(({query}) => {\r\n    const {kind, operation} = getMainDefinition(query);\r\n    return (\r\n      kind === 'OperationDefinition' && operation === 'subscription'\r\n    );\r\n  }, wsLink, httpLink)\r\n\r\n  return ApolloLink.from([terminatingLink])\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}