{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _extends from\"@babel/runtime/helpers/esm/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/esm/objectWithoutProperties\";var _jsxFileName=\"C:\\\\localhost\\\\csshot\\\\services\\\\web\\\\lib\\\\withApollo.js\";import React from\"react\";var __jsx=React.createElement;import NextApp from\"next/app\";import{ApolloProvider}from'@apollo/react-hooks';import{ApolloClient}from\"apollo-client\";import{InMemoryCache}from\"apollo-cache-inmemory\";import{HttpLink}from\"apollo-link-http\";import{WebSocketLink}from\"apollo-link-ws\";import{ApolloLink,split}from\"apollo-link\";import{getMainDefinition}from\"apollo-utilities\";import Head from'next/head';export default function withApollo(App){var _this=this;function AppWithApollo(_ref){var client=_ref.client,clientState=_ref.clientState,props=_objectWithoutProperties(_ref,[\"client\",\"clientState\"]);if(!client){client=initApolloClient(clientState);}return __jsx(ApolloProvider,{client:client,__self:this,__source:{fileName:_jsxFileName,lineNumber:20,columnNumber:12}},__jsx(App,_extends({},props,{__self:this,__source:{fileName:_jsxFileName,lineNumber:21,columnNumber:7}})));}AppWithApollo.getInitialProps=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2){var AppTree,ctx,pageProps,clientState,client,_require,getDataFromTree;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:AppTree=_ref2.AppTree,ctx=_ref2.ctx;pageProps={};clientState={};client=null;if(true){_context.next=21;break;}if(!(ctx.res&&ctx.res.finished)){_context.next=7;break;}return _context.abrupt(\"return\",{pageProps:pageProps});case 7:_require=require('@apollo/react-ssr'),getDataFromTree=_require.getDataFromTree;client=initApolloClient();_context.prev=9;_context.next=12;return getDataFromTree(__jsx(AppTree,_extends({pageProps:pageProps,client:client},{__self:_this,__source:{fileName:_jsxFileName,lineNumber:42,columnNumber:31}})));case 12:clientState=client.cache.extract();_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](9);console.error(_context.t0);case 18:_context.prev=18;Head.rewind();return _context.finish(18);case 21:return _context.abrupt(\"return\",{pageProps:pageProps,clientState:clientState,client:client});case 22:case\"end\":return _context.stop();}}},_callee,null,[[9,15,18,21]]);}));return function(_x){return _ref3.apply(this,arguments);};}();// AppWithApollo.getInitialProps = NextApp.getInitialProps\n// AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\nreturn AppWithApollo;}var browserApolloClientCache=null;function initApolloClient(clientState){if(!true)return createApolloClient(clientState);if(!browserApolloClientCache){browserApolloClientCache=createApolloClient(clientState);}return browserApolloClientCache;}function createApolloClient(clientState){var cache=new InMemoryCache();var link=createApolloLink();var client=new ApolloClient({ssrMode:!true,cache:cache.restore(clientState),link:link});client.toJSON=function(){return null;};return client;}function createApolloLink(){if(!true){return createServerLink();}return createBrowserLink();}function createServerLink(){if(true)return null;return new HttpLink({uri:\"http://localhost:8080/v1/graphql\",fetch:require('isomorphic-fetch')});}function createBrowserLink(){return new WebSocketLink({uri:\"ws://localhost:8080/v1/graphql\",options:{reconnect:true}});//\n//\n// const httpLink = new HttpLink({\n//   uri: `http://localhost:8080/v1/graphql`,\n// })\n//\n// const wsLink = new WebSocketLink({\n//   uri: `ws://localhost:8080/v1/graphql`,\n//   options: {\n//     reconnect: true,\n//   },\n// })\n//\n// const terminatingLink = split(({query}) => {\n//   const {kind, operation} = getMainDefinition(query);\n//   return (\n//     kind === 'OperationDefinition' && operation === 'subscription'\n//   );\n// }, wsLink, httpLink)\n//\n// return ApolloLink.from([terminatingLink])\n}","map":{"version":3,"sources":["C:/localhost/csshot/services/web/lib/withApollo.js"],"names":["NextApp","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","WebSocketLink","ApolloLink","split","getMainDefinition","Head","withApollo","App","AppWithApollo","client","clientState","props","initApolloClient","getInitialProps","AppTree","ctx","pageProps","res","finished","require","getDataFromTree","cache","extract","console","error","rewind","browserApolloClientCache","createApolloClient","link","createApolloLink","ssrMode","restore","toJSON","createServerLink","createBrowserLink","uri","fetch","options","reconnect"],"mappings":"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","sourcesContent":["import NextApp from \"next/app\"\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { ApolloLink, split } from \"apollo-link\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport Head from 'next/head'\r\n\r\n\r\nexport default function withApollo(App) {\r\n\r\n  function AppWithApollo({client, clientState, ...props}) {\r\n\r\n    if (!client) {\r\n      client = initApolloClient(clientState)\r\n    }\r\n\r\n    return <ApolloProvider client={ client }>\r\n      <App { ...props }/>\r\n    </ApolloProvider>\r\n  }\r\n\r\n\r\n  AppWithApollo.getInitialProps = async ({AppTree, ctx}) => {\r\n    let pageProps = {}\r\n    let clientState = {}\r\n    let client = null\r\n\r\n\r\n    if (!process.browser) {\r\n      // When redirecting, the response is finished.\r\n      if (ctx.res && ctx.res.finished) {\r\n        return {pageProps}\r\n      }\r\n\r\n      const {getDataFromTree} = require('@apollo/react-ssr')\r\n      client = initApolloClient()\r\n\r\n      try {\r\n        await getDataFromTree(<AppTree  { ...{pageProps, client} }/>)\r\n        clientState = client.cache.extract()\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        Head.rewind()\r\n      }\r\n\r\n    }\r\n\r\n    return {pageProps, clientState, client}\r\n  }\r\n\r\n\r\n  // AppWithApollo.getInitialProps = NextApp.getInitialProps\r\n  // AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\r\n\r\n  return AppWithApollo\r\n\r\n}\r\n\r\n\r\nlet browserApolloClientCache = null\r\n\r\n\r\nfunction initApolloClient(clientState) {\r\n  if (!process.browser) return createApolloClient(clientState)\r\n\r\n  if (!browserApolloClientCache) {\r\n    browserApolloClientCache = createApolloClient(clientState)\r\n  }\r\n  return browserApolloClientCache\r\n}\r\n\r\n\r\nfunction createApolloClient(clientState) {\r\n  const cache = new InMemoryCache()\r\n  const link = createApolloLink()\r\n\r\n  const client = new ApolloClient({\r\n    ssrMode: !process.browser,\r\n    cache: cache.restore(clientState),\r\n    link\r\n  })\r\n\r\n  client.toJSON = () => null\r\n  return client\r\n}\r\n\r\n\r\nfunction createApolloLink() {\r\n  if (!process.browser) {\r\n    return createServerLink()\r\n  }\r\n\r\n  return createBrowserLink()\r\n}\r\n\r\nfunction createServerLink() {\r\n  if (process.browser) return null\r\n\r\n  return new HttpLink({\r\n    uri: `http://localhost:8080/v1/graphql`,\r\n    fetch: require('isomorphic-fetch')\r\n  })\r\n}\r\n\r\n\r\nfunction createBrowserLink() {\r\n  return  new WebSocketLink({\r\n    uri: `ws://localhost:8080/v1/graphql`,\r\n    options: {\r\n      reconnect: true,\r\n    },\r\n  })\r\n  //\r\n  //\r\n  // const httpLink = new HttpLink({\r\n  //   uri: `http://localhost:8080/v1/graphql`,\r\n  // })\r\n  //\r\n  // const wsLink = new WebSocketLink({\r\n  //   uri: `ws://localhost:8080/v1/graphql`,\r\n  //   options: {\r\n  //     reconnect: true,\r\n  //   },\r\n  // })\r\n  //\r\n  // const terminatingLink = split(({query}) => {\r\n  //   const {kind, operation} = getMainDefinition(query);\r\n  //   return (\r\n  //     kind === 'OperationDefinition' && operation === 'subscription'\r\n  //   );\r\n  // }, wsLink, httpLink)\r\n  //\r\n  // return ApolloLink.from([terminatingLink])\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
