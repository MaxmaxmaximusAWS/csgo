{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _extends from\"@babel/runtime/helpers/esm/extends\";import _toConsumableArray from\"@babel/runtime/helpers/esm/toConsumableArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/esm/objectWithoutProperties\";var _jsxFileName=\"/app/services/html/lib/withApollo.js\";import React from\"react\";var __jsx=React.createElement;import NextApp from\"next/app\";import{ApolloProvider}from'@apollo/react-hooks';import{ApolloClient}from\"apollo-client\";import{InMemoryCache}from\"apollo-cache-inmemory\";import{HttpLink}from\"apollo-link-http\";import{WebSocketLink}from\"apollo-link-ws\";import{ApolloLink,split}from\"apollo-link\";import{getMainDefinition}from\"apollo-utilities\";import Head from'next/head';export default function withApollo(App){function AppWithApollo(_ref){var _console;var client=_ref.client,clientState=_ref.clientState,props=_objectWithoutProperties(_ref,[\"client\",\"clientState\"]);if(!client){client=initApolloClient(clientState);}(_console=console).log.apply(_console,_toConsumableArray(props));return __jsx(ApolloProvider,{client:client,__self:this,__source:{fileName:_jsxFileName,lineNumber:22,columnNumber:12}},__jsx(App,_extends({},props,{__self:this,__source:{fileName:_jsxFileName,lineNumber:23,columnNumber:7}})));}AppWithApollo.getInitialProps=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2){var AppTree,ctx,pageProps,clientState,client,_require,getDataFromTree;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:AppTree=_ref2.AppTree,ctx=_ref2.ctx;pageProps={};clientState={};client=null;// console.log('arguments', arguments)\nif(true){_context.next=8;break;}if(!(ctx.res&&ctx.res.finished)){_context.next=7;break;}return _context.abrupt(\"return\",{pageProps:pageProps});case 7:_require=require('@apollo/react-ssr'),getDataFromTree=_require.getDataFromTree;// client = initApolloClient()\n//\n// try {\n//   const q = {...arguments[0], pageProps, client }\n//   console.log('q', q)\n//   await getDataFromTree(<AppTree  { ...q }/>)\n//   clientState = client.cache.extract()\n// } catch (error) {\n//   console.error(error)\n// } finally {\n//   Head.rewind()\n// }\ncase 8:return _context.abrupt(\"return\",{pageProps:pageProps,clientState:clientState,client:client});case 9:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref3.apply(this,arguments);};}();// AppWithApollo.getInitialProps = NextApp.getInitialProps\n// AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\nreturn AppWithApollo;}var browserApolloClientCache=null;function initApolloClient(clientState){if(!true)return createApolloClient(clientState);if(!browserApolloClientCache){browserApolloClientCache=createApolloClient(clientState);}return browserApolloClientCache;}function createApolloClient(clientState){var cache=new InMemoryCache();var link=createApolloLink();var client=new ApolloClient({ssrMode:!true,cache:cache.restore(clientState),link:link});client.toJSON=function(){return null;};return client;}function createApolloLink(){if(!true){return createServerLink();}return createBrowserLink();}function createServerLink(){if(true)return null;return new HttpLink({uri:\"http://localhost:8080/v1/graphql\",fetch:require('isomorphic-fetch')});}function createBrowserLink(){var httpLink=new HttpLink({uri:\"http://localhost:8080/v1/graphql\"});var wsLink=new WebSocketLink({uri:\"ws://localhost:8080/v1/graphql\",options:{reconnect:true}});var terminatingLink=split(function(_ref4){var query=_ref4.query;var _getMainDefinition=getMainDefinition(query),kind=_getMainDefinition.kind,operation=_getMainDefinition.operation;return kind==='OperationDefinition'&&operation==='subscription';},wsLink,httpLink);return ApolloLink.from([terminatingLink]);}","map":{"version":3,"sources":["/app/services/html/lib/withApollo.js"],"names":["NextApp","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","WebSocketLink","ApolloLink","split","getMainDefinition","Head","withApollo","App","AppWithApollo","client","clientState","props","initApolloClient","console","log","getInitialProps","AppTree","ctx","pageProps","res","finished","require","getDataFromTree","browserApolloClientCache","createApolloClient","cache","link","createApolloLink","ssrMode","restore","toJSON","createServerLink","createBrowserLink","uri","fetch","httpLink","wsLink","options","reconnect","terminatingLink","query","kind","operation","from"],"mappings":"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","sourcesContent":["import NextApp from \"next/app\"\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { ApolloLink, split } from \"apollo-link\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport Head from 'next/head'\r\n\r\n\r\nexport default function withApollo(App) {\r\n\r\n  function AppWithApollo({client, clientState, ...props}) {\r\n\r\n    if (!client) {\r\n      client = initApolloClient(clientState)\r\n    }\r\n    \r\n    console.log(...props)\r\n\r\n    return <ApolloProvider client={ client }>\r\n      <App { ...props }/>\r\n    </ApolloProvider>\r\n  }\r\n\r\n\r\n  AppWithApollo.getInitialProps = async function ({AppTree, ctx}) {\r\n    let pageProps = {}\r\n    let clientState = {}\r\n    let client = null\r\n\r\n\r\n    // console.log('arguments', arguments)\r\n\r\n    if (!process.browser) {\r\n      // When redirecting, the response is finished.\r\n      if (ctx.res && ctx.res.finished) {\r\n        return {pageProps}\r\n      }\r\n\r\n      const {getDataFromTree} = require('@apollo/react-ssr')\r\n      // client = initApolloClient()\r\n      //\r\n      // try {\r\n      //   const q = {...arguments[0], pageProps, client }\r\n      //   console.log('q', q)\r\n      //   await getDataFromTree(<AppTree  { ...q }/>)\r\n      //   clientState = client.cache.extract()\r\n      // } catch (error) {\r\n      //   console.error(error)\r\n      // } finally {\r\n      //   Head.rewind()\r\n      // }\r\n\r\n    }\r\n\r\n    // return {pageProps, clientState, client}\r\n    return {pageProps, clientState, client}\r\n  }\r\n\r\n\r\n  // AppWithApollo.getInitialProps = NextApp.getInitialProps\r\n  // AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\r\n\r\n  return AppWithApollo\r\n\r\n}\r\n\r\n\r\nlet browserApolloClientCache = null\r\n\r\n\r\nfunction initApolloClient(clientState) {\r\n  if (!process.browser) return createApolloClient(clientState)\r\n\r\n  if (!browserApolloClientCache) {\r\n    browserApolloClientCache = createApolloClient(clientState)\r\n  }\r\n  return browserApolloClientCache\r\n}\r\n\r\n\r\nfunction createApolloClient(clientState) {\r\n  const cache = new InMemoryCache()\r\n  const link = createApolloLink()\r\n\r\n  const client = new ApolloClient({\r\n    ssrMode: !process.browser,\r\n    cache: cache.restore(clientState),\r\n    link\r\n  })\r\n\r\n  client.toJSON = () => null\r\n  return client\r\n}\r\n\r\n\r\nfunction createApolloLink() {\r\n  if (!process.browser) {\r\n    return createServerLink()\r\n  }\r\n\r\n  return createBrowserLink()\r\n}\r\n\r\nfunction createServerLink() {\r\n  if (process.browser) return null\r\n\r\n  return new HttpLink({\r\n    uri: `http://localhost:8080/v1/graphql`,\r\n    fetch: require('isomorphic-fetch')\r\n  })\r\n}\r\n\r\n\r\nfunction createBrowserLink() {\r\n  const httpLink = new HttpLink({\r\n    uri: `http://localhost:8080/v1/graphql`,\r\n  })\r\n\r\n  const wsLink = new WebSocketLink({\r\n    uri: `ws://localhost:8080/v1/graphql`,\r\n    options: {\r\n      reconnect: true,\r\n    },\r\n  })\r\n\r\n  const terminatingLink = split(({query}) => {\r\n    const {kind, operation} = getMainDefinition(query);\r\n    return (\r\n      kind === 'OperationDefinition' && operation === 'subscription'\r\n    );\r\n  }, wsLink, httpLink)\r\n\r\n  return ApolloLink.from([terminatingLink])\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}