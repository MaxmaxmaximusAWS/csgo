{"ast":null,"code":"var _jsxFileName=\"/app/services/html/lib/withApollo.js\";import React from\"react\";var __jsx=React.createElement;function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}import NextApp from\"next/app\";import{ApolloProvider}from'@apollo/react-hooks';import{ApolloClient}from\"apollo-client\";import{InMemoryCache}from\"apollo-cache-inmemory\";import{HttpLink}from\"apollo-link-http\";import{WebSocketLink}from\"apollo-link-ws\";import{ApolloLink,split}from\"apollo-link\";import{getMainDefinition}from\"apollo-utilities\";import Head from'next/head';export default function withApollo(App,options){function AppWithApollo(_ref){let{client,clientState}=_ref,props=_objectWithoutProperties(_ref,[\"client\",\"clientState\"]);if(!client){client=initApolloClient(options,clientState);}return __jsx(ApolloProvider,{client:client,__self:this,__source:{fileName:_jsxFileName,lineNumber:20,columnNumber:12}},__jsx(App,_extends({},props,{__self:this,__source:{fileName:_jsxFileName,lineNumber:21,columnNumber:7}})));}AppWithApollo.getInitialProps=async function({AppTree,ctx,router}){let pageProps={};let clientState={};let client=null;console.log('IM NEXT JS22');// if (!process.browser) {\n//   // When redirecting, the response is finished.\n//   if (ctx.res && ctx.res.finished) {\n//     return {pageProps}\n//   }\n//\n//   const {getDataFromTree} = require('@apollo/react-ssr')\n//   client = initApolloClient(options)\n//\n//   try {\n//     await getDataFromTree(<AppTree  { ...{pageProps, client, ctx} }/>)\n//     clientState = client.cache.extract()\n//   } catch (error) {\n//     console.error(error)\n//   } finally {\n//     Head.rewind()\n//   }\n//\n// }\nreturn{pageProps,clientState,client};};// AppWithApollo.getInitialProps = NextApp.getInitialProps\n// AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\nreturn AppWithApollo;}let browserApolloClientCache=null;function initApolloClient(options,clientState=null){if(!false){return createApolloClient(options,clientState);}if(!browserApolloClientCache){browserApolloClientCache=createApolloClient(options,clientState);}return browserApolloClientCache;}function createApolloClient(options,clientState=null){const cache=new InMemoryCache();const link=createLink(options);const client=new ApolloClient({ssrMode:!false,cache:cache.restore(clientState),link});client.toJSON=()=>null;return client;}console.log(process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT);function createLink(options){if(!false){return new HttpLink({uri:`http://graphql-engine:8080/v1/graphql`,fetch:require('isomorphic-fetch')});}return createBrowserLink();}function createBrowserLink(){const httpLink=new HttpLink({credentials:'include',uri:`http://localhost:8080/v1/graphql`});const wsLink=new WebSocketLink({uri:`ws://localhost:8080/v1/graphql`,credentials:'include',options:{reconnect:true}});const terminatingLink=split(({query})=>{const{kind,operation}=getMainDefinition(query);return kind==='OperationDefinition'&&operation==='subscription';},wsLink,httpLink);return ApolloLink.from([terminatingLink]);}","map":{"version":3,"sources":["/app/services/html/lib/withApollo.js"],"names":["NextApp","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","WebSocketLink","ApolloLink","split","getMainDefinition","Head","withApollo","App","options","AppWithApollo","client","clientState","props","initApolloClient","getInitialProps","AppTree","ctx","router","pageProps","console","log","browserApolloClientCache","createApolloClient","cache","link","createLink","ssrMode","restore","toJSON","process","env","NEXT_PUBLIC_GRAPHQL_ENDPOINT","uri","fetch","require","createBrowserLink","httpLink","credentials","wsLink","reconnect","terminatingLink","query","kind","operation","from"],"mappings":"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","sourcesContent":["import NextApp from \"next/app\"\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { ApolloLink, split } from \"apollo-link\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport Head from 'next/head'\r\n\r\n\r\nexport default function withApollo(App, options) {\r\n\r\n  function AppWithApollo({client, clientState, ...props}) {\r\n\r\n    if (!client) {\r\n      client = initApolloClient(options, clientState)\r\n    }\r\n\r\n    return <ApolloProvider client={ client }>\r\n      <App { ...props }/>\r\n    </ApolloProvider>\r\n  }\r\n\r\n\r\n  AppWithApollo.getInitialProps = async function ({AppTree, ctx, router}) {\r\n    let pageProps = {}\r\n    let clientState = {}\r\n    let client = null\r\n\r\n    console.log('IM NEXT JS22')\r\n\r\n    // if (!process.browser) {\r\n    //   // When redirecting, the response is finished.\r\n    //   if (ctx.res && ctx.res.finished) {\r\n    //     return {pageProps}\r\n    //   }\r\n    //\r\n    //   const {getDataFromTree} = require('@apollo/react-ssr')\r\n    //   client = initApolloClient(options)\r\n    //\r\n    //   try {\r\n    //     await getDataFromTree(<AppTree  { ...{pageProps, client, ctx} }/>)\r\n    //     clientState = client.cache.extract()\r\n    //   } catch (error) {\r\n    //     console.error(error)\r\n    //   } finally {\r\n    //     Head.rewind()\r\n    //   }\r\n    //\r\n    // }\r\n\r\n    return {pageProps, clientState, client}\r\n  }\r\n\r\n\r\n  // AppWithApollo.getInitialProps = NextApp.getInitialProps\r\n  // AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\r\n\r\n  return AppWithApollo\r\n\r\n}\r\n\r\n\r\nlet browserApolloClientCache = null\r\n\r\n\r\nfunction initApolloClient(options, clientState = null) {\r\n  if (!process.browser) {\r\n    return createApolloClient(options, clientState)\r\n  }\r\n\r\n  if (!browserApolloClientCache) {\r\n    browserApolloClientCache = createApolloClient(options, clientState)\r\n  }\r\n  return browserApolloClientCache\r\n}\r\n\r\n\r\nfunction createApolloClient(options, clientState = null) {\r\n  const cache = new InMemoryCache()\r\n  const link = createLink(options)\r\n\r\n  const client = new ApolloClient({\r\n    ssrMode: !process.browser,\r\n    cache: cache.restore(clientState),\r\n    link\r\n  })\r\n\r\n  client.toJSON = () => null\r\n  return client\r\n}\r\n\r\n\r\nconsole.log(process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT)\r\n\r\nfunction createLink(options) {\r\n  if (!process.browser) {\r\n    return new HttpLink({\r\n      uri: `http://graphql-engine:8080/v1/graphql`,\r\n      fetch: require('isomorphic-fetch')\r\n    })\r\n  }\r\n\r\n  return createBrowserLink()\r\n}\r\n\r\n\r\nfunction createBrowserLink() {\r\n  const httpLink = new HttpLink({\r\n    credentials: 'include',\r\n    uri: `http://localhost:8080/v1/graphql`,\r\n  })\r\n\r\n  const wsLink = new WebSocketLink({\r\n    uri: `ws://localhost:8080/v1/graphql`,\r\n    credentials: 'include',\r\n    options: {\r\n      reconnect: true,\r\n    },\r\n  })\r\n\r\n  const terminatingLink = split(({query}) => {\r\n    const {kind, operation} = getMainDefinition(query);\r\n    return (\r\n      kind === 'OperationDefinition' && operation === 'subscription'\r\n    );\r\n  }, wsLink, httpLink)\r\n\r\n  return ApolloLink.from([terminatingLink])\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}