{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _asyncToGenerator from\"@babel/runtime/helpers/esm/asyncToGenerator\";import _extends from\"@babel/runtime/helpers/esm/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/esm/objectWithoutProperties\";var _jsxFileName=\"/app/services/next-js/lib/withApollo.js\";import React from\"react\";var __jsx=React.createElement;import NextApp from\"next/app\";import{ApolloProvider}from'@apollo/react-hooks';import{ApolloClient}from\"apollo-client\";import{InMemoryCache}from\"apollo-cache-inmemory\";import{HttpLink}from\"apollo-link-http\";import{WebSocketLink}from\"apollo-link-ws\";import{ApolloLink,split}from\"apollo-link\";import{getMainDefinition}from\"apollo-utilities\";import Head from'next/head';export default function withApollo(App,options){function AppWithApollo(_ref){var client=_ref.client,clientState=_ref.clientState,props=_objectWithoutProperties(_ref,[\"client\",\"clientState\"]);if(!client){client=initApolloClient(options,clientState);}return __jsx(ApolloProvider,{client:client,__self:this,__source:{fileName:_jsxFileName,lineNumber:20,columnNumber:12}},__jsx(App,_extends({},props,{__self:this,__source:{fileName:_jsxFileName,lineNumber:21,columnNumber:7}})));}AppWithApollo.getInitialProps=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2){var AppTree,ctx,router,pageProps,clientState,client;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:AppTree=_ref2.AppTree,ctx=_ref2.ctx,router=_ref2.router;pageProps={};clientState={};client=null;console.log('server');console.log(process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT);console.log(process.env.OLOLO);// if (!process.browser) {\n//   // When redirecting, the response is finished.\n//   if (ctx.res && ctx.res.finished) {\n//     return {pageProps}\n//   }\n//\n//   const {getDataFromTree} = require('@apollo/react-ssr')\n//   client = initApolloClient(options)\n//\n//   try {\n//     await getDataFromTree(<AppTree  { ...{pageProps, client, ctx} }/>)\n//     clientState = client.cache.extract()\n//   } catch (error) {\n//     console.error(error)\n//   } finally {\n//     Head.rewind()\n//   }\n//\n// }\nreturn _context.abrupt(\"return\",{pageProps:pageProps,clientState:clientState,client:client});case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref3.apply(this,arguments);};}();// AppWithApollo.getInitialProps = NextApp.getInitialProps\n// AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\nreturn AppWithApollo;}var browserApolloClientCache=null;console.log('all');console.log(process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT);console.log(process.env.OLOLO);function initApolloClient(options){var clientState=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!true){return createApolloClient(options,clientState);}if(!browserApolloClientCache){browserApolloClientCache=createApolloClient(options,clientState);}return browserApolloClientCache;}function createApolloClient(options){var clientState=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var cache=new InMemoryCache();var link=createLink(options);var client=new ApolloClient({ssrMode:!true,cache:cache.restore(clientState),link:link});client.toJSON=function(){return null;};return client;}function createLink(options){if(!true){return new HttpLink({uri:\"http://graphql-engine:8080/v1/graphql\",fetch:require('isomorphic-fetch')});}return createBrowserLink();}function createBrowserLink(){var httpLink=new HttpLink({credentials:'include',uri:\"http://localhost:8080/v1/graphql\"});var wsLink=new WebSocketLink({uri:\"ws://localhost:8080/v1/graphql\",credentials:'include',options:{reconnect:true}});var terminatingLink=split(function(_ref4){var query=_ref4.query;var _getMainDefinition=getMainDefinition(query),kind=_getMainDefinition.kind,operation=_getMainDefinition.operation;return kind==='OperationDefinition'&&operation==='subscription';},wsLink,httpLink);return ApolloLink.from([terminatingLink]);}","map":{"version":3,"sources":["/app/services/next-js/lib/withApollo.js"],"names":["NextApp","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","WebSocketLink","ApolloLink","split","getMainDefinition","Head","withApollo","App","options","AppWithApollo","client","clientState","props","initApolloClient","getInitialProps","AppTree","ctx","router","pageProps","console","log","process","env","NEXT_PUBLIC_GRAPHQL_ENDPOINT","OLOLO","browserApolloClientCache","createApolloClient","cache","link","createLink","ssrMode","restore","toJSON","uri","fetch","require","createBrowserLink","httpLink","credentials","wsLink","reconnect","terminatingLink","query","kind","operation","from"],"mappings":"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","sourcesContent":["import NextApp from \"next/app\"\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { WebSocketLink } from \"apollo-link-ws\";\r\nimport { ApolloLink, split } from \"apollo-link\";\r\nimport { getMainDefinition } from \"apollo-utilities\";\r\nimport Head from 'next/head'\r\n\r\n\r\nexport default function withApollo(App, options) {\r\n\r\n  function AppWithApollo({client, clientState, ...props}) {\r\n\r\n    if (!client) {\r\n      client = initApolloClient(options, clientState)\r\n    }\r\n\r\n    return <ApolloProvider client={ client }>\r\n      <App { ...props }/>\r\n    </ApolloProvider>\r\n  }\r\n\r\n\r\n  AppWithApollo.getInitialProps = async function ({AppTree, ctx, router}) {\r\n    let pageProps = {}\r\n    let clientState = {}\r\n    let client = null\r\n\r\n\r\n    console.log('server')\r\n    console.log(process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT)\r\n    console.log(process.env.OLOLO)\r\n\r\n\r\n    // if (!process.browser) {\r\n    //   // When redirecting, the response is finished.\r\n    //   if (ctx.res && ctx.res.finished) {\r\n    //     return {pageProps}\r\n    //   }\r\n    //\r\n    //   const {getDataFromTree} = require('@apollo/react-ssr')\r\n    //   client = initApolloClient(options)\r\n    //\r\n    //   try {\r\n    //     await getDataFromTree(<AppTree  { ...{pageProps, client, ctx} }/>)\r\n    //     clientState = client.cache.extract()\r\n    //   } catch (error) {\r\n    //     console.error(error)\r\n    //   } finally {\r\n    //     Head.rewind()\r\n    //   }\r\n    //\r\n    // }\r\n\r\n    return {pageProps, clientState, client}\r\n  }\r\n\r\n\r\n  // AppWithApollo.getInitialProps = NextApp.getInitialProps\r\n  // AppWithApollo.origGetInitialProps = NextApp.origGetInitialProps\r\n\r\n  return AppWithApollo\r\n\r\n}\r\n\r\n\r\nlet browserApolloClientCache = null\r\n\r\n\r\nconsole.log('all')\r\nconsole.log(process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT)\r\nconsole.log(process.env.OLOLO)\r\n\r\n\r\nfunction initApolloClient(options, clientState = null) {\r\n  if (!process.browser) {\r\n    return createApolloClient(options, clientState)\r\n  }\r\n\r\n  if (!browserApolloClientCache) {\r\n    browserApolloClientCache = createApolloClient(options, clientState)\r\n  }\r\n  return browserApolloClientCache\r\n}\r\n\r\n\r\nfunction createApolloClient(options, clientState = null) {\r\n  const cache = new InMemoryCache()\r\n  const link = createLink(options)\r\n\r\n  const client = new ApolloClient({\r\n    ssrMode: !process.browser,\r\n    cache: cache.restore(clientState),\r\n    link\r\n  })\r\n\r\n  client.toJSON = () => null\r\n  return client\r\n}\r\n\r\n\r\nfunction createLink(options) {\r\n  if (!process.browser) {\r\n    return new HttpLink({\r\n      uri: `http://graphql-engine:8080/v1/graphql`,\r\n      fetch: require('isomorphic-fetch')\r\n    })\r\n  }\r\n\r\n  return createBrowserLink()\r\n}\r\n\r\n\r\nfunction createBrowserLink() {\r\n  const httpLink = new HttpLink({\r\n    credentials: 'include',\r\n    uri: `http://localhost:8080/v1/graphql`,\r\n  })\r\n\r\n  const wsLink = new WebSocketLink({\r\n    uri: `ws://localhost:8080/v1/graphql`,\r\n    credentials: 'include',\r\n    options: {\r\n      reconnect: true,\r\n    },\r\n  })\r\n\r\n  const terminatingLink = split(({query}) => {\r\n    const {kind, operation} = getMainDefinition(query);\r\n    return (\r\n      kind === 'OperationDefinition' && operation === 'subscription'\r\n    );\r\n  }, wsLink, httpLink)\r\n\r\n  return ApolloLink.from([terminatingLink])\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}