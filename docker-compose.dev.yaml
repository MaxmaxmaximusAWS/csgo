version: '3.6'

services:

  postgres:
    image: postgres:12
    restart: always
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    command: -p ${POSTGRES_PORT}
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data


  hasura:
    image: hasura/graphql-engine:v1.2.1
    ports:
      - 8080:8080
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL: 300
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_AUTH_HOOK: http://auth:${AUTH_PORT}/hook/hasurahook
      HASURA_GRAPHQL_ACTION_SECRET: ${HASURA_GRAPHQL_ACTION_SECRET}
    depends_on:
      - postgres
      - auth


  next:
    build:
      context: .
      dockerfile: ./next/Dockerfile.dev
    volumes:
      - ./:/app
    restart: always
    ports:
      - ${NEXT_PORT}:${NEXT_PORT}
      - 9222:9222
    environment:
      DOCKER_GRAPHQL_ENDPOINT: http://hasura:8080/v1/graphql

    depends_on:
      - hasura


  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile.dev
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/conf.dev/:/etc/nginx/conf.d/
      - ./nginx/logs/:/var/log/nginx/


  redis:
    image: redis:6.0.4
    restart: always
    ports:
      - 6379:6379
    command: redis-server --requirepass ${REDIS_PASS}


  auth:
    build:
      context: .
      dockerfile: ./auth/Dockerfile.dev
    volumes:
      - ./:/app
    restart: always
    environment:
      PORT: ${AUTH_PORT}
      DEBUGGER_PORT: 9228
      AUTH_STEAM_API_KEY: ${AUTH_STEAM_API_KEY}
      AUTH_SESSIONS_SECRET_KEY: ${AUTH_SESSIONS_SECRET_KEY}
      REDIS_PASS: ${REDIS_PASS}
    ports:
      - ${AUTH_PORT}:${AUTH_PORT}
      - 9228:9228
    depends_on:
      - postgres
      - redis


  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile.dev
    volumes:
      - ./:/app
    restart: always
    environment:
      HASURA_GRAPHQL_ACTION_SECRET: ${HASURA_GRAPHQL_ACTION_SECRET}
      PORT: ${API_PORT}
      DEBUGGER_PORT: 9229
    ports:
      - ${API_PORT}:${API_PORT}
      - 9229:9229
    depends_on:
      - postgres

volumes:
  db_data:
    driver: local
