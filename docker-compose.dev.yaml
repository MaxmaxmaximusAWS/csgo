version: '3.6'

services:

  postgres:
    image: postgres:12
    restart: always
    ports:
      - ${PG_PORT}:${PG_PORT}
    command: -p ${PG_PORT}
    environment:
      PG_PASSWORD: ${PG_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:6.0.4
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: redis-server --port ${REDIS_PORT} --requirepass ${REDIS_PASS}

  hasura:
    image: hasura/graphql-engine:v1.2.2
    ports:
      - ${HASURA_GRAPHQL_SERVER_PORT}:${HASURA_GRAPHQL_SERVER_PORT}
    restart: always
    environment:
      HASURA_GRAPHQL_SERVER_PORT: ${HASURA_GRAPHQL_SERVER_PORT}
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${PG_PASSWORD}@${PG_USER}:${PG_PORT}/${PG_DB_NAME}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL: ${HASURA_GRAPHQL_RATE_LIMIT}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_ACTION_SECRET: ${HASURA_GRAPHQL_ACTION_SECRET}
      HASURA_GRAPHQL_AUTH_HOOK: ${HASURA_GRAPHQL_AUTH_HOOK}
    depends_on:
      - postgres
      - api

  api:
    restart: always

    build:
      context: .
      dockerfile: ./api/Dockerfile.dev

    volumes:
      - ./api/:/app/

    environment:
      API_PORT: ${API_PORT}
      API_DEBUG_PORT: ${API_DEBUG_PORT}
      API_STEAM_REALM: ${API_STEAM_REALM}
      API_STEAM_API_KEY: ${API_STEAM_API_KEY}
      API_SESSIONS_SECRET_KEY: ${API_SESSIONS_SECRET_KEY}

      PG_DB_NAME: ${PG_DB_NAME}
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PASS: ${REDIS_PASS}
      REDIS_PORT: ${REDIS_PORT}

    ports:
      - ${API_PORT}:${API_PORT}
      - ${API_DEBUG_PORT}:${API_DEBUG_PORT}

    depends_on:
      - postgres
      - redis

  html:
    build:
      context: .
      dockerfile: ./html/Dockerfile.dev
    restart: always
    ports:
      - ${HTML_PORT}:${HTML_PORT}
    volumes:
      - ./html/:/app/
    environment:
      HTML_PORT: ${HTML_PORT}

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile.dev
    restart: always
    ports:
      - ${NGINX_HTTP_PORT}:${NGINX_HTTP_PORT}
      - ${NGINX_HTTPS_PORT}:${NGINX_HTTPS_PORT}
    volumes:
      - ./nginx/conf.dev/:/etc/nginx/conf.d/
      - ./nginx/logs/:/var/log/nginx/
    depends_on:
      - api
      - html


volumes:
  db_data:
    driver: local
